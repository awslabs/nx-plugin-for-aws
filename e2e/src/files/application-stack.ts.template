import * as cdk from 'aws-cdk-lib';
import { Construct } from 'constructs';
import {
  UserIdentity,
  Website,
  MyApi,
  MyApiHttp,
  PyApi,
  PyApiHttp,
  PyProjectMyFunction,
  MyMcpServer,
  MyAgent,
  TsProjectMyFunction,
  HostedMcpServer,
  MySmithyApi,
} from ':e2e-test/common-constructs';

export class ApplicationStack extends cdk.Stack {
  constructor(scope: Construct, id: string, props?: cdk.StackProps) {
    super(scope, id, props);

    const identity = new UserIdentity(this, 'UserIdentity');
    const myapi = new MyApi(this, 'MyApi', {
      integrations: MyApi.defaultIntegrations(this).build(),
    });
    myapi.grantInvokeAccess(identity.identityPool.authenticatedRole);
    const pyapi = new PyApi(this, 'PyApi', {
      integrations: PyApi.defaultIntegrations(this).build(),
    });
    pyapi.grantInvokeAccess(identity.identityPool.authenticatedRole);
    new Website(this, 'Website');
    const pyFn = new PyProjectMyFunction(this, 'MyFunction');
    new cdk.CfnOutput(this, 'PyFunctionArn', {
      value: pyFn.functionArn,
    });
    new MyApiHttp(this, 'MyApiHttp', {
      integrations: MyApiHttp.defaultIntegrations(this).build(),
    });
    new PyApiHttp(this, 'PyApiHttp', {
      integrations: PyApiHttp.defaultIntegrations(this).build(),
    });
    new MySmithyApi(this, 'MySmithyApi', {
      integrations: MySmithyApi.defaultIntegrations(this).build(),
    });
    const tsFn = new TsProjectMyFunction(this, 'TsProjectMyFunction');
    new cdk.CfnOutput(this, 'TsFunctionArn', {
      value: tsFn.functionArn,
    });
    const strandsAgent = new MyAgent(this, 'MyAgent');
    new cdk.CfnOutput(this, 'StrandsAgentArn', {
      value: strandsAgent.agentCoreRuntime.arn,
    });
    const pyMcp = new MyMcpServer(this, 'MyMcpServer');
    new cdk.CfnOutput(this, 'PyMcpServerArn', {
      value: pyMcp.agentCoreRuntime.arn,
    });
    const tsMcp = new HostedMcpServer(this, 'HostedMcpServer');
    new cdk.CfnOutput(this, 'TsMcpServerArn', {
      value: tsMcp.agentCoreRuntime.arn,
    });
  }
}
