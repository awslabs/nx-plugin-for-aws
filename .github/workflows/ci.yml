name: CI

concurrency:
  group: 'ci'

on:
  push:
    branches: [main]
  workflow_dispatch:

env:
  CI: 'true'

permissions:
  pull-requests: write
  issues: write
  statuses: write
  checks: write
  contents: write
  actions: read
  pages: write
  id-token: write

jobs:
  build:
    name: Build
    runs-on: codebuild-nx-plugin-for-aws-runner-${{ github.run_id }}-${{ github.run_attempt }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: ./.github/actions/init-monorepo
      - name: Build
        run: pnpm nx run-many --target build --all --output-style=stream
      - name: Check for mutations
        run: git diff --ignore-space-at-eol --exit-code -- ':!**/LICENSE-THIRD-PARTY'
      - name: Upload artifact
        uses: actions/upload-artifact@v4.4.0
        with:
          name: build-artifact
          path: dist
  smoke_tests:
    name: Smoke Tests - ${{matrix.package_manager}}
    runs-on: codebuild-nx-plugin-for-aws-runner-${{ github.run_id }}-${{ github.run_attempt }}
    needs: build
    strategy:
      matrix:
        package_manager: [npm, yarn, pnpm, bun]
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifact
          path: dist
      - uses: ./.github/actions/init-monorepo
      - name: Smoke Test - ${{ matrix.package_manager }}
        run: pnpm nx run @aws/nx-plugin-e2e:test -t "smoke test - ${{ matrix.package_manager }}"
  release:
    name: Release
    needs: [build, smoke_tests]
    runs-on: codebuild-nx-plugin-for-aws-runner-${{ github.run_id }}-${{ github.run_attempt }}
    outputs:
      latest_commit: ${{ steps.git_remote.outputs.latest_commit }}
      skip_release: ${{ steps.should_skip_release.outputs.skip_release }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifact
          path: dist
      - uses: ./.github/actions/init-monorepo
      - name: Check for new commits
        id: git_remote
        run: echo "latest_commit=$(git ls-remote origin -h ${{ github.ref }} | cut -f1)" >> $GITHUB_OUTPUT
      - name: Should skip release
        id: should_skip_release
        run: echo "skip_release=$(git log $(git describe --tags --abbrev=0)..HEAD --oneline | grep -qE 'feat\(?.*\)?:|fix\(?.*\)?:|revert\(?.*\)?:|perf\(?.*\)?:' && echo false || echo true)" >> $GITHUB_OUTPUT
      - name: Release
        if: ${{ steps.should_skip_release.outputs.skip_release != 'true' && github.event_name == 'push' && steps.git_remote.outputs.latest_commit == github.sha }}
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
          #   NPM_CONFIG_PROVENANCE: true
          NPM_DIST_TAG: latest
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          HUSKY: '0'
        run: |
          pnpm nx release --yes
  deploy_docs:
    name: Deploy Docs
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'push' && needs.release.outputs.latest_commit == github.sha }}
    needs: [release]
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifact
          path: dist
      - name: Setup Pages
        uses: actions/configure-pages@v5
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: 'dist/docs'
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
