/*! Copyright [Amazon.com](http://amazon.com/), Inc. or its affiliates. All Rights Reserved.
SPDX-License-Identifier: Apache-2.0 */
import {
  IdentityPool,
  UserPoolAuthenticationProvider,
} from '@aws-cdk/aws-cognito-identitypool-alpha';
import { CfnOutput, Stack } from 'aws-cdk-lib';
import { UserPool, UserPoolClient } from 'aws-cdk-lib/aws-cognito';
import { Construct } from 'constructs';
import { UserPoolWithMfa } from './userpool-with-mfa.js';
import { RuntimeConfig } from '../runtime-config/index.js';

const WEB_CLIENT_ID = 'WebClient';

/**
 * Creates a UserPool and Identity Pool with sane defaults configured intended for usage from a web client.
 */
export class UserIdentity extends Construct {
  public readonly identityPool: IdentityPool;
  public readonly userPool: UserPool;
  public readonly userPoolClient: UserPoolClient;

  constructor(scope: Construct, id: string) {
    super(scope, id);

    // Unless explicitly stated, created a default Cognito User Pool and Web Client.
    this.userPool = new UserPoolWithMfa(this, 'UserPool');

    this.identityPool = new IdentityPool(this, 'IdentityPool');

    const existingClient = this.userPool.node.children.find(
      (e) => e.node.id === WEB_CLIENT_ID && e instanceof UserPoolClient
    ) as UserPoolClient | undefined;

    this.userPoolClient =
      existingClient ??
      this.userPool.addClient(WEB_CLIENT_ID, {
        authFlows: {
          userPassword: true,
          userSrp: true,
        },
      });

    this.identityPool.addUserPoolAuthentication(
      new UserPoolAuthenticationProvider({
        userPool: this.userPool,
        userPoolClient: this.userPoolClient,
      })
    );

    new CfnOutput(this, `${id}-UserPoolId`, {
      value: this.userPool.userPoolId,
    });

    new CfnOutput(this, `${id}-IdentityPoolId`, {
      value: this.identityPool.identityPoolId,
    });

    RuntimeConfig.ensure(this).config.cognitoProps = {
      region: Stack.of(this).region,
      identityPoolId: this.identityPool.identityPoolId,
      userPoolId: this.userPool?.userPoolId,
      userPoolWebClientId: this.userPoolClient?.userPoolClientId,
    };
  }
}
