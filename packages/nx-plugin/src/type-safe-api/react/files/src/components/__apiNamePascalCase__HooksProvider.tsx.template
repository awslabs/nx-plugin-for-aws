import { DefaultApiClientProvider } from '<%= generatedHooksLibraryPackage %>';
import { QueryClient, MutationCache } from '@tanstack/react-query';
import React, { useMemo } from 'react';
import { errorTitle, isApiError, useApi } from '../hooks/<%- apiNameKebabCase %>/useApi';

export const <%= apiNamePascalCase %>HooksProvider: React.FC<any> = ({ children }) => {
  const client = useApi();

  const queryClient = useMemo(
    () =>
      new QueryClient({
        mutationCache: new MutationCache({
          onError: (e: unknown, _variables, _context, mutation) => {
            // When an error occurs for a mutation, extract its details
            const apiError = isApiError(e) ? e : undefined;
            const header = apiError ? errorTitle(apiError.status) : "Error";
            const content = apiError
              ? apiError.details.message
              : `An unexpected error occurred`;

            // Implement your own error handling logic here if needed
            // For example, you could add the error to a list of "notifications" to be displayed to the user
            console.error(header, content);
          },
        }),
      }),
    [],
  );

  return client ? (
    <DefaultApiClientProvider apiClient={client} client={queryClient}>
      {children}
    </DefaultApiClientProvider>
  ) : (
    <>Hooks provider must be instantiated inside RuntimeConfigProvider</>
  );
};

export default <%= apiNamePascalCase %>HooksProvider;
