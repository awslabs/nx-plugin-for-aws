import { useQueryClient } from '@tanstack/react-query';
import { createTRPCContext } from '@trpc/tanstack-react-query';
import {
  httpBatchLink,
  httpLink,
  HTTPBatchLinkOptions,
  HTTPLinkOptions,
  splitLink,
  createTRPCClient,
} from '@trpc/client';
import {
  FC,
  useMemo,
  PropsWithChildren,
} from 'react';
<% if(auth === 'IAM') { %> import { useSigV4 } from '../../hooks/useSigV4'; <% } %>
import { AnyTRPCRouter } from '@trpc/server';

export interface TrpcClientProviderProps extends PropsWithChildren {
  readonly apiUrl: string;
}

export const createTrpcClientProvider = <
  TAppRouter extends AnyTRPCRouter,
  TContext
>() => {
  const { TRPCProvider, useTRPC } = createTRPCContext<TAppRouter>();

  const TrpcClientProvider: FC<TrpcClientProviderProps> = ({
    apiUrl,
    children,
  }) => {
    const queryClient = useQueryClient();
    <% if(auth === 'IAM') { %> const sigv4Client = useSigV4(); <% } %>

    const trpcClient = useMemo(() => {
      const linkOptions: HTTPLinkOptions<any> & HTTPBatchLinkOptions<any> = {
        url: apiUrl,
        <% if(auth === 'IAM') { %> fetch: sigv4Client <% } %>
      };

      return createTRPCClient({
        links: [
          splitLink({
            condition(op) {
              return op.context.skipBatch === true;
            },
            true: httpLink(linkOptions),
            false: httpBatchLink(linkOptions),
          }),
        ],
      });
    }, [apiUrl<% if(auth === 'IAM') { %>, sigv4Client<% } %>]);

    return (
      <TRPCProvider trpcClient={trpcClient} queryClient={queryClient}>
        {children}
      </TRPCProvider>
    );
  };

  return {
    useTRPC,
    Provider: TrpcClientProvider,
  };
};
