// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`trpc react generator > should generate trpc react files > TrpcClients-IsolatedTrpcProvider.tsx 1`] = `
"import { QueryClient, QueryClientProvider } from '@tanstack/react-query';
import { createTRPCReact } from '@trpc/react-query';
import {
  httpBatchLink,
  httpLink,
  HTTPBatchLinkOptions,
  HTTPLinkOptions,
  splitLink,
} from '@trpc/client';
import { useState, FC, createContext, useMemo, PropsWithChildren } from 'react';

import { AnyTRPCRouter } from '@trpc/server';

export interface IsolatedTrpcClientProviderProps extends PropsWithChildren {
  readonly apiUrl: string;
}

export const createIsolatedTrpcClientProvider = <
  TAppRouter extends AnyTRPCRouter,
  TContext,
>() => {
  const isolatedTrpcContext = createContext(null as any);
  const trpc = createTRPCReact<TAppRouter, TContext>({
    context: isolatedTrpcContext,
  });

  const IsolatedTrpcClientProvider: FC<IsolatedTrpcClientProviderProps> = ({
    apiUrl,
    children,
  }) => {
    const [queryClient] = useState(() => new QueryClient());

    const trpcClient = useMemo(() => {
      const linkOptions: HTTPLinkOptions<any> & HTTPBatchLinkOptions<any> = {
        url: apiUrl,
      };

      // @ts-expect-error type errors due to unknown concrete AppRouter
      return trpc.createClient({
        links: [
          splitLink({
            condition(op) {
              return op.context.skipBatch === true;
            },
            true: httpLink(linkOptions),
            false: httpBatchLink(linkOptions),
          }),
        ],
      });
    }, [apiUrl, sigv4Client]);

    return (
      // @ts-expect-error type errors due to unknown concrete AppRouter
      <trpc.Provider client={trpcClient} queryClient={queryClient}>
        <QueryClientProvider client={queryClient}>
          {children}
        </QueryClientProvider>
        {/* @ts-expect-error type errors due to unknown concrete AppRouter */}
      </trpc.Provider>
    );
  };

  return {
    trpc,
    Provider: IsolatedTrpcClientProvider,
  };
};
"
`;

exports[`trpc react generator > should generate trpc react files > TrpcClients-TrpcApis.tsx 1`] = `
"import {
  AppRouter as TestApiAppRouter,
  Context as TestApiContext,
} from 'backend';
import { createIsolatedTrpcClientProvider } from './IsolatedTrpcProvider';
export default {
  TestApi: createIsolatedTrpcClientProvider<TestApiAppRouter, TestApiContext>(),
};
"
`;

exports[`trpc react generator > should generate trpc react files > TrpcClients-TrpcClientProviders.tsx 1`] = `
"import TrpcApis from './TrpcApis';
import { useRuntimeConfig } from '../../hooks/useRuntimeConfig';
import { FC, PropsWithChildren } from 'react';
const TrpcClientProviders: FC<PropsWithChildren> = ({ children }) => {
  const runtimeConfig = useRuntimeConfig();
  return (
    <TrpcApis.TestApi.Provider apiUrl={runtimeConfig.httpApis.TestApi}>
      {children}
    </TrpcApis.TestApi.Provider>
  );
};
export default TrpcClientProviders;
"
`;

exports[`trpc react generator > should generate trpc react files > TrpcClients-index.tsx 1`] = `
"import TrpcClientProviders from './TrpcClientProviders';
import _TrpcApis from './TrpcApis';

export const TrpcApis = _TrpcApis;
export default TrpcClientProviders;
"
`;

exports[`trpc react generator > should generate trpc react files > useTestApi.tsx 1`] = `
"import { TrpcApis } from '../components/TrpcClients';

export const useTestApi = () => TrpcApis.TestApi.trpc;
"
`;

exports[`trpc react generator > should handle IAM auth option > TRPCClientProvider-IAM.tsx 1`] = `null`;

exports[`trpc react generator > should modify main.tsx correctly > main.tsx 1`] = `
"import TrpcClientProviders from './components/TrpcClients';
import RuntimeConfigProvider from './components/RuntimeConfig';
import { App } from './app';
import { RouterProvider } from '@tanstack/react-router';
export function Main() {
  return (
    <RuntimeConfigProvider>
      <TrpcClientProviders>
        <RouterProvider router={router} />
      </TrpcClientProviders>
    </RuntimeConfigProvider>
  );
}
"
`;
