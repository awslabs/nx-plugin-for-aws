// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`trpc backend generator > should generate backend and schema projects > backend-index.ts 1`] = `
"export * from './lambdas/index.js';
"
`;

exports[`trpc backend generator > should generate backend and schema projects > schema-index.ts 1`] = `
"import { z } from 'zod';

export const EchoSchema = z.object({
  result: z.string(),
});

export type IEcho = z.TypeOf<typeof EchoSchema>;
"
`;

exports[`trpc backend generator > should set up shared constructs > shared-constructs.ts 1`] = `
"import { Construct } from 'constructs';
import { Runtime, RuntimeFamily } from 'aws-cdk-lib/aws-lambda';
import { CfnOutput, Duration } from 'aws-cdk-lib';
import * as url from 'url';
import {
  CorsHttpMethod,
  HttpApi,
  HttpMethod,
  IHttpRouteAuthorizer,
} from 'aws-cdk-lib/aws-apigatewayv2';
import { HttpLambdaIntegration } from 'aws-cdk-lib/aws-apigatewayv2-integrations';
import { NodejsFunction } from 'aws-cdk-lib/aws-lambda-nodejs';
import { Effect, IRole, PolicyStatement } from 'aws-cdk-lib/aws-iam';
import { RuntimeConfig } from '../runtime-config/index.js';

export interface TestApiProps {
  readonly defaultAuthorizer: IHttpRouteAuthorizer;
  readonly allowedOrigins?: string[];
}

export class TestApi extends Construct {
  public readonly api: HttpApi;

  constructor(scope: Construct, id: string, props: TestApiProps) {
    super(scope, id);

    const routerFunction = new NodejsFunction(this, 'TestApiHandler', {
      timeout: Duration.seconds(30),
      runtime: new Runtime('nodejs20.x', RuntimeFamily.NODEJS),
      handler: 'handler',
      entry: url.fileURLToPath(
        new URL(
          '../../../../../apps/test-api/backend/src/lambdas/router.ts',
          import.meta.url
        )
      ),
      environment: {
        AWS_CONNECTION_REUSE_ENABLED: '1'
      },
    });

    this.api = new HttpApi(this, 'TestApi', {
      corsPreflight: {
        allowOrigins: props.allowedOrigins ?? ['*'],
        allowMethods: [CorsHttpMethod.ANY],
        allowHeaders: [
          'authorization',
          'content-type',
          'x-amz-content-sha256',
          'x-amz-date',
          'x-amz-security-token',
        ],
      },
      defaultAuthorizer: props.defaultAuthorizer,
    });

    this.api.addRoutes({
      path: '/{proxy+}',
      methods: [
        HttpMethod.GET,
        HttpMethod.DELETE,
        HttpMethod.POST,
        HttpMethod.PUT,
        HttpMethod.PATCH,
        HttpMethod.HEAD,
      ],
      integration: new HttpLambdaIntegration(
        'RouterIntegration',
        routerFunction
      ),
    });

    new CfnOutput(this, 'TestApiUrl', { value: this.api.url! });

    RuntimeConfig.ensure(this).config.trpcApis = {
      'TestApi': this.api.url!
    };
  }

  public grantInvokeAccess(role: IRole) {
    role.addToPrincipalPolicy(
      new PolicyStatement({
        effect: Effect.ALLOW,
        actions: ['execute-api:Invoke'],
        resources: [this.api.arnForExecuteApi('*', '/*', '*')],
      })
    );
  }
}
"
`;
