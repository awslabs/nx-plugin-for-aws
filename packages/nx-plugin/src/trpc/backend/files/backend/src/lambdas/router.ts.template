import { initTRPC } from '@trpc/server';
import {
  awsLambdaRequestHandler,
} from '@trpc/server/adapters/aws-lambda';
import { EchoSchema } from '<%= schemaProjectAlias %>';
import {
  createErrorPlugin,
  createLoggerPlugin,
  createMetricsPlugin,
  createTracerPlugin,
  IMiddlewareContext,
} from './middleware.js';
import { z } from 'zod';

export type Context = IMiddlewareContext;

const t = initTRPC.context<Context>().create();
export const router = t.router;
export const publicProcedure = t.procedure
  .unstable_concat(createLoggerPlugin().loggerPlugin)
  .unstable_concat(createTracerPlugin().tracerPlugin)
  .unstable_concat(createMetricsPlugin().metricsPlugin)
  .unstable_concat(createErrorPlugin().errorPlugin);

const appRouter = router({
  echo: publicProcedure
    .input(z.string())
    .output(EchoSchema)
    .query((opts) => ({ result: opts.input })),
});

export const handler = awsLambdaRequestHandler({
  router: appRouter
});

export type AppRouter = typeof appRouter;
