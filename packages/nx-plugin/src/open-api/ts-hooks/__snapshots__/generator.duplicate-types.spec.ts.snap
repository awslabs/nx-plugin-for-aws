// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`openApiTsHooksGenerator - Duplicate Types > should handle duplicate type names when operation ID matches schema name 1`] = `
"import type { UseMutationOptions } from '@tanstack/react-query';
import type {
  ChatOperationRequest,
  ChatError,
  Chat200Response,
} from './types.gen.js';
import { TestApi } from './client.gen.js';

export interface TestApiOptionsProxyConfig {
  client: TestApi;
}

export class TestApiOptionsProxy {
  private $client: TestApi;

  constructor({ client }: TestApiOptionsProxyConfig) {
    this.$client = client;

    this._chatMutationKey = this._chatMutationKey.bind(this);
    this._chatMutationOptions = this._chatMutationOptions.bind(this);
  }

  public queryKey = () => ['TestApi'];

  private _chatMutationKey() {
    return [...this.queryKey(), 'chat'];
  }
  private _chatMutationOptions(
    options?: UseMutationOptions<
      Chat200Response,
      ChatError,
      ChatOperationRequest
    >,
  ): UseMutationOptions<Chat200Response, ChatError, ChatOperationRequest> {
    return {
      mutationFn: (input) => this.$client.chat(input),
      mutationKey: this._chatMutationKey(),
      ...options,
    };
  }

  public chat = {
    mutationKey: this._chatMutationKey.bind(this),
    mutationOptions: this._chatMutationOptions.bind(this),
  };
}
"
`;

exports[`openApiTsHooksGenerator - Duplicate Types > should handle multiple duplicate type names correctly 1`] = `
"import type { UseMutationOptions } from '@tanstack/react-query';
import type {
  OrderOperationRequest,
  UserOperationRequest,
  OrderError,
  UserError,
  Order201Response,
  User201Response,
} from './types.gen.js';
import { TestApi } from './client.gen.js';

export interface TestApiOptionsProxyConfig {
  client: TestApi;
}

export class TestApiOptionsProxy {
  private $client: TestApi;

  constructor({ client }: TestApiOptionsProxyConfig) {
    this.$client = client;

    this._orderMutationKey = this._orderMutationKey.bind(this);
    this._orderMutationOptions = this._orderMutationOptions.bind(this);
    this._userMutationKey = this._userMutationKey.bind(this);
    this._userMutationOptions = this._userMutationOptions.bind(this);
  }

  public queryKey = () => ['TestApi'];

  private _orderMutationKey() {
    return [...this.queryKey(), 'order'];
  }
  private _orderMutationOptions(
    options?: UseMutationOptions<
      Order201Response,
      OrderError,
      OrderOperationRequest
    >,
  ): UseMutationOptions<Order201Response, OrderError, OrderOperationRequest> {
    return {
      mutationFn: (input) => this.$client.order(input),
      mutationKey: this._orderMutationKey(),
      ...options,
    };
  }
  private _userMutationKey() {
    return [...this.queryKey(), 'user'];
  }
  private _userMutationOptions(
    options?: UseMutationOptions<
      User201Response,
      UserError,
      UserOperationRequest
    >,
  ): UseMutationOptions<User201Response, UserError, UserOperationRequest> {
    return {
      mutationFn: (input) => this.$client.user(input),
      mutationKey: this._userMutationKey(),
      ...options,
    };
  }

  public order = {
    mutationKey: this._orderMutationKey.bind(this),
    mutationOptions: this._orderMutationOptions.bind(this),
  };
  public user = {
    mutationKey: this._userMutationKey.bind(this),
    mutationOptions: this._userMutationOptions.bind(this),
  };
}
"
`;

exports[`openApiTsHooksGenerator - Duplicate Types > should handle mutation operations with duplicate type names 1`] = `
"import type { UseMutationOptions } from '@tanstack/react-query';
import type {
  UpdateOperationRequest,
  UpdateError,
  Update200Response,
} from './types.gen.js';
import { TestApi } from './client.gen.js';

export interface TestApiOptionsProxyConfig {
  client: TestApi;
}

export class TestApiOptionsProxy {
  private $client: TestApi;

  constructor({ client }: TestApiOptionsProxyConfig) {
    this.$client = client;

    this._updateMutationKey = this._updateMutationKey.bind(this);
    this._updateMutationOptions = this._updateMutationOptions.bind(this);
  }

  public queryKey = () => ['TestApi'];

  private _updateMutationKey() {
    return [...this.queryKey(), 'update'];
  }
  private _updateMutationOptions(
    options?: UseMutationOptions<
      Update200Response,
      UpdateError,
      UpdateOperationRequest
    >,
  ): UseMutationOptions<
    Update200Response,
    UpdateError,
    UpdateOperationRequest
  > {
    return {
      mutationFn: (input) => this.$client.update(input),
      mutationKey: this._updateMutationKey(),
      ...options,
    };
  }

  public update = {
    mutationKey: this._updateMutationKey.bind(this),
    mutationOptions: this._updateMutationOptions.bind(this),
  };
}
"
`;

exports[`openApiTsHooksGenerator - Duplicate Types > should handle query operations with duplicate type names 1`] = `
"import type { QueryFilters, UseQueryOptions } from '@tanstack/react-query';
import type {
  SearchOperationRequest,
  SearchError,
  Search200Response,
} from './types.gen.js';
import { TestApi } from './client.gen.js';

export interface TestApiOptionsProxyConfig {
  client: TestApi;
}

export class TestApiOptionsProxy {
  private $client: TestApi;

  constructor({ client }: TestApiOptionsProxyConfig) {
    this.$client = client;

    this._searchQueryKey = this._searchQueryKey.bind(this);
    this._searchQueryOptions = this._searchQueryOptions.bind(this);
    this._searchQueryFilter = this._searchQueryFilter.bind(this);
  }

  public queryKey = () => ['TestApi'];

  private _searchQueryKey(input: SearchOperationRequest) {
    return [...this.queryKey(), 'search', input];
  }
  private _searchQueryOptions(
    input: SearchOperationRequest,
    options?: Omit<
      UseQueryOptions<Search200Response, SearchError>,
      'queryFn' | 'queryKey'
    > &
      Partial<
        Pick<
          UseQueryOptions<Search200Response, SearchError>,
          'queryFn' | 'queryKey'
        >
      >,
  ): UseQueryOptions<Search200Response, SearchError> {
    return {
      queryFn: () => this.$client.search(input),
      queryKey: this._searchQueryKey(input),
      ...options,
    };
  }
  private _searchQueryFilter(
    input: SearchOperationRequest,
    filter?: QueryFilters,
  ): QueryFilters {
    return {
      queryKey: this._searchQueryKey(input),
      ...filter,
    };
  }

  public search = {
    queryKey: this._searchQueryKey.bind(this),
    queryOptions: this._searchQueryOptions.bind(this),
    queryFilter: this._searchQueryFilter.bind(this),
  };
}
"
`;
