<%_
const docString = (model, padding) => {
  if (model.description || model.deprecated) {
    return `${padding}/**${model.description ? `\n${padding} * ${model.description}` : ''}${model.deprecated ? `\n${padding} * @deprecated` : ''}\n${padding} */\n`;
  }
  return undefined;
}
const upperFirst = (str) => str.charAt(0).toUpperCase() + str.slice(1);
const uniqStrings = (strings) => {
  const set = new Set();
  return strings.filter((str) => {
    if (set.has(str)) {
      return false;
    }
    set.add(str);
    return true;
  });
};
_%>
<%_ if ((models.length + allOperations.filter(p => p.parameters.length > 0).length) > 0) { _%>
import type {
<%_ models.forEach((model) => { _%>
  <%- model.name %>,
<%_ }) _%>
<%_ allOperations.filter(p => p.parameters.length > 0).forEach((op) => { _%>
  <%- op.operationIdPascalCase %>Request,
<%_ }); _%>
} from './types.gen.js';
<%_ } _%>
<%_
// Nested arrays of primitives (besides dates) don't need to have .map(...) called to convert them as the base case will be a noop
// eg. an array of arrays of strings doesn't need to be rendered as `value.map(item0 => item0.map(item1 => item1))`
const canShortCircuitConversion = (property) => {
  if (["array", "dictionary"].includes(property.export)) {
    return canShortCircuitConversion(property.link);
  }
  return property.isPrimitive && !["date", "date-time"].includes(property.format);
};
// Render code to convert a date to its string representation
const renderToJsonDateValue = (identifier, format) => {
  return `${identifier}.toISOString()${format === 'date' ? '.slice(0,10)' : ''}`;
};
// Renders the appropriate nested function for .map() or $mapValues() for arrays and dictionaries for the given type
const renderNestedToJsonValue = (type, depth = 0) => {
  const itemIdentifier = `item${depth}`;
  if (type.isPrimitive || type.typescriptType === 'unknown' || type.export === 'enum' || type.isEnum) {
    return `(${itemIdentifier}) => ${["date", "date-time"].includes(type.format) ? renderToJsonDateValue(itemIdentifier, type.format) : itemIdentifier}`;
  } else if (type.export === "array") {
    return `(${itemIdentifier}) => ${itemIdentifier}.map(${renderNestedToJsonValue(type.link, depth + 1)})`;
  } else if (type.export === "dictionary") {
    return `(${itemIdentifier}) => $IO.$mapValues(${itemIdentifier}, ${renderNestedToJsonValue(type.link, depth + 1)})`;
  }
  return `$IO.${type.name || type.type}.toJson`;
};
// Renders the code to transform a property of the model to its json representation from the model types
const renderToJsonValue = (property, value) => {
  let rendered = '';

  if (canShortCircuitConversion(property)) {
    rendered = value;
  } else if (property.isPrimitive || property.typescriptType === 'unknown' || property.export === 'enum' || property.isEnum) {
    rendered = ["date", "date-time"].includes(property.format) ? `(${renderToJsonDateValue(value, property.format)})` : value;
  } else if (property.export === "array") {
    const prefix = property.uniqueItems ? `Array.from(${value})` : `${value}`;
    rendered = `(${prefix}.map(${renderNestedToJsonValue(property.link)}))`;
  } else if (property.export === "dictionary") {
    rendered = `($IO.$mapValues(${value}, ${renderNestedToJsonValue(property.link)}))`;
  } else if (property.type !== "any") {
    rendered = `$IO.${property.type}.toJson(${value})`;
  } else {
    rendered = value;
  }

  if ((property.isPrimitive && ["date", "date-time"].includes(property.format)) || (!property.isPrimitive && ["array", "dictionary"].includes(property.export))) {
    rendered = property.isNullable ? `${value} === null ? null : ${rendered}` : rendered;
  }
  return rendered;
};
// Renders the appropriate nested function for .map() or $mapValues() for arrays and dictionaries for the given type
const renderNestedFromJsonValue = (type, depth = 0) => {
    const itemIdentifier = `item${depth}`;
    if (type.isPrimitive || type.typescriptType === 'unknown' || type.export === 'enum' || type.isEnum) {
        return `(${itemIdentifier}) => ${["date", "date-time"].includes(type.format) ? `new Date(${itemIdentifier})` : itemIdentifier}`;
    } else if (type.export === "array") {
        return `(${itemIdentifier}) => ${itemIdentifier}.map(${renderNestedFromJsonValue(type.link, depth + 1)})`;
    } else if (type.export === "dictionary") {
        return `(${itemIdentifier}) => $IO.$mapValues(${itemIdentifier}, ${renderNestedFromJsonValue(type.link, depth + 1)})`;
    }
    return `$IO.${type.name || type.type}.fromJson`;
};
// Renders the code to transform a property of the model from its json representation into the model types
const renderFromJsonValue = (property, value) => {
    let rendered = '';
    if (canShortCircuitConversion(property)) {
        rendered = value;
    } else if (property.isPrimitive || property.typescriptType === 'unknown' || property.export === 'enum' || property.isEnum) {
        rendered = ["date", "date-time"].includes(property.format) ? `(new Date(${value}))` : value;
    } else if (property.export === "array") {
        rendered = `((${value} as Array<any>).map(${renderNestedFromJsonValue(property.link)}))`;
        rendered = property.uniqueItems ? `new Set(${rendered})` : rendered;
    } else if (property.export === "dictionary") {
        rendered = `($IO.$mapValues(${value}, ${renderNestedFromJsonValue(property.link)}))`;
    } else {
        rendered = `$IO.${property.type}.fromJson(${value})`;
    }
    rendered = property.isNullable ? `${value} === null ? null : ${rendered}` : rendered;
    return rendered;
};
// Renders a condition to check for a particular response
const renderResponseCondition = (code) => {
  if (typeof code === 'string' && code.endsWith('XX')) {
    const min = Number(code.charAt(0)) * 100;
    const max = min + 100;
    return `response.status >= ${min} && response.status < ${max}`;
  }
  return `response.status === ${code}`;
};
// Renders the code which handles deserialising the response from a fetch call
const renderResponse = (response, options) => {
  let opts = options || {
    asText: 'await response.text()',
    asJson: 'await response.json()',
    asBlob: 'await response.blob()',
  };
  if (response.type === 'binary') {
    return opts.asBlob;
  }
  if ((response.isPrimitive || ['unknown', 'any'].includes(response.type)) && !['array', 'dictionary'].includes(response.export)) {
    if (response.type === 'number') {
      return `Number(${opts.asText})`;
    } else if (response.type === 'boolean') {
      return `(${opts.asText}) === 'true' ? true : false`;
    } else if (['date', 'date-time'].includes(response.format)) {
      return `new Date(${opts.asText})`;
    }
    return `${opts.asText}${['unknown', 'any'].includes(response.type) ? ' as any' : ''}`;
  }
  if (response.isEnum || response.export === 'enum') {
    return `(${opts.asText}) as ${response.typescriptType}`;
  }
  return renderFromJsonValue(response, `(${opts.asJson})`);
};
const renderStreamingResponseChunk = (response) => {
  return renderResponse(response, {
    asJson: 'JSON.parse(value)',
    asText: 'value',
    asBlob: 'new Blob([value])',
  });
};
_%>

/**
 * Utility for serialisation and deserialisation of API types.
 */
class $IO {
  protected static $mapValues = (data: any, fn: (item: any) => any) =>
    Object.fromEntries(Object.entries(data).map(([k, v]) => [k, fn(v)]));
<%_ models.filter(m => m.export !== 'enum').forEach((model) => { _%>
<%_ const isComposite = model.export === "one-of" || model.export === "any-of" || model.export === "all-of"; _%>

  public static <%- model.name %> = {
    toJson: (model: <%- model.name %>): any => {
      if (model === undefined || model === null) {
        return model;
      }
      <%_ if (isComposite) { _%>
      <%_ model.composedPrimitives.filter(p => !['array', 'dictionary'].includes(p.export)).forEach((primitive) => { _%>
      if (typeof model === "<%- primitive.typescriptType %>") {
          return model;
      }
      <%_ }); _%>
      <%_ const arrayOfPrimitives = [...model.composedPrimitives, ...model.composedModels].find(p => p.export === 'array' && canShortCircuitConversion(p)); _%>
      <%_ if (arrayOfPrimitives) { _%>
      if (Array.isArray(model) && (model.length === 0 || typeof model[0] !== 'object')) {
          return model;
      }
      <%_ } _%>
      <%_ /* There will only be 1 array of non primitives (as we throw an error for specs with more) so we can safely convert to that type */ _%>
      <%_ const arrayOfNonPrimitives = [...model.composedPrimitives, ...model.composedModels].find(p => p.export === 'array' && !canShortCircuitConversion(p)); _%>
      <%_ if (arrayOfNonPrimitives) { _%>
      if (Array.isArray(model) && (model.length === 0 || typeof model[0] === 'object')) {
          return <%- renderToJsonValue(arrayOfNonPrimitives, 'model') %>;
      }
      <%_ } _%>
      <%_ if (model.composedModels.length > 0) { _%>
      return {
        <%_ model.properties.filter(p => !p.isPrimitive && p.export !== 'array').forEach((property, i) => { _%>
        ...<%- renderToJsonValue(property, `model${(model.export !== 'all-of' && property.export !== 'dictionary') ? ` as ${property.typescriptType}` : ''}`) %>,
        <%_ }); _%>
      };
      <%_ } else { _%>
      return model;
      <%_ } _%>
      <%_ } else { /* !isComposite */ _%>
      return {
        <%_ if (model.export === 'dictionary') { _%>
        ...<%- renderToJsonValue(model, 'model') %>,
        <%_ } _%>
        <%_ model.properties.forEach((property) => { _%>
        ...(model.<%- property.typescriptName %> === undefined ? {} : {
          '<%= property.name %>': <%- renderToJsonValue(property, `model.${property.typescriptName}`) %>,
        }),
        <%_ }); _%>
      };
      <%_ } _%>
    },
    fromJson: (json: any): <%- model.name %> => {
      if (json === undefined || json === null) {
        return json;
      }
      <%_ if (isComposite) { _%>
      <%_ model.composedPrimitives.filter(p => !['array', 'dictionary'].includes(p.export)).forEach((primitive) => { _%>
      if (typeof json === "<%- primitive.typescriptType %>") {
          return json;
      }
      <%_ }); _%>
      <%_ const arrayOfPrimitives = [...model.composedPrimitives, ...model.composedModels].find(p => p.export === 'array' && canShortCircuitConversion(p)); _%>
      <%_ if (arrayOfPrimitives) { _%>
      if (Array.isArray(json) && (json.length === 0 || typeof json[0] !== 'object')) {
          return json;
      }
      <%_ } _%>
      <%_ const arrayOfNonPrimitives = [...model.composedPrimitives, ...model.composedModels].find(p => p.export === 'array' && !canShortCircuitConversion(p)); _%>
      <%_ if (arrayOfNonPrimitives) { _%>
      if (Array.isArray(json) && (json.length === 0 || typeof json[0] === 'object')) {
          return <%- renderFromJsonValue(arrayOfNonPrimitives, 'json') %>;
      }
      <%_ } _%>
      <%_ if (model.composedModels.length > 0) { _%>
      return {
        <%_ model.properties.filter(p => !p.isPrimitive && p.export !== 'array').forEach((composedType) => { _%>
        ...<%- renderFromJsonValue(composedType, 'json') %>,
        <%_ }); _%>
      };
      <%_ } else { _%>
      return json;
      <%_ } _%>
      <%_ } else { /* !isComposite */ _%>
      return {
        <%_ if (model.export === 'dictionary') { _%>
        ...<%- renderFromJsonValue(model, 'json') %>,
        <%_ } _%>
        <%_ model.properties.forEach((property) => { _%>
        <%_ if (!property.isRequired) { _%>
        ...(json['<%- property.name %>'] === undefined ? {} : {
          <%= property.typescriptName %>: <%- renderFromJsonValue(property, `json['${property.name}']`) %>,
        }),
        <%_ } else { _%>
        <%= property.typescriptName %>: <%- renderFromJsonValue(property, `json['${property.name}']`) %>,
        <%_ } _%>
        <%_ }); _%>
      };
      <%_ } _%>
    },
  };
<%_ }) _%>
}

/**
 * Client configuration for <%- className %>
 */
export interface <%- className %>Config {
  /**
   * Base URL for the API
   */
  url: string;
  /**
   * Custom instance of fetch. By default the global 'fetch' is used.
   * You can override this to add custom middleware for use cases such as adding authentication headers.
   */
  fetch?: typeof fetch;
  /**
   * Additional configuration
   */
  options?: {
    /**
     * By default, the client will add a Content-Type header, set to the media type defined for
     * the request in the OpenAPI specification.
     * Set this to false to omit this header.
     */
    omitContentTypeHeader?: boolean;
  };
}

/**
 * API Client for <%- className %>
 */
export class <%- className %> {
  private $config: <%- className %>Config;

  constructor(config: <%- className %>Config) {
    this.$config = config;

    <%_ allOperations.forEach((op) => { _%>
    <%_ const hasTag = op.tags && op.tags.length > 0; _%>
    this.<% if (hasTag) { %>_<% } %><%- op.uniqueName %> = this.<% if (hasTag) { %>_<% } %><%- op.uniqueName %>.bind(this);
    <%_ }); _%>
  }

  private $url = (path: string, pathParameters: { [key: string]: any }, queryParameters: { [key: string]: any }, collectionFormats?: { [key: string]: 'multi' | 'csv' }): string => {
    const baseUrl = this.$config.url.endsWith('/') ? this.$config.url.slice(0, -1) : this.$config.url;
    const pathWithParameters = Object.entries(pathParameters).reduce((withParams, [key, value]) =>
      withParams.replace(`{${key}}`, encodeURIComponent(`${value}`))
    , path);
    const queryString = Object.entries(queryParameters).map(([key, value]) => {
      if (Array.isArray(value) && collectionFormats?.[key] === 'multi') {
        return value.map(v => `${encodeURIComponent(key)}=${encodeURIComponent(`${v}`)}`).join('&');
      }
      return `${encodeURIComponent(key)}=${encodeURIComponent(Array.isArray(value) ? value.map(String).join(',') : String(value))}`;
    }).join('&');
    return baseUrl + pathWithParameters + (queryString ? `?${queryString}` : '');
  };

  private $headers = (headerParameters: { [key: string]: any }, collectionFormats?: { [key: string]: 'multi' | 'csv' }): [string, string][] => {
    return Object.entries(headerParameters).flatMap(([key, value]) => {
      if (Array.isArray(value) && collectionFormats?.[key] === 'multi') {
        return value.map(v => [key, String(v)]) as [string, string][];
      }
      return [[key, String(value)]];
    });
  };

  private $fetch: typeof fetch = (...args) => (this.$config.fetch ?? fetch)(...args);
  <%_ allOperations.forEach((op) => { _%>
  <%_ const hasTag = op.tags && op.tags.length > 0; _%>
  <%_ const isStreaming = (op.vendorExtensions ?? {})['x-streaming']; _%>
  <%_ const isInputOptional = (op.parameters.length === 1 && op.parametersBody && !op.parametersBody.isRequired) || op.parameters.length === 0; _%>

<%- docString(op, '  ') %>  <%- hasTag ? 'private' : 'public' %> async <% if (isStreaming) { %>*<% } %><%- hasTag ? '_' : '' %><%- op.uniqueName %>(<% if (op.parameters.length > 0) { %>input<%- isInputOptional ? '?' : '' %>: <%- op.operationIdPascalCase %>Request<% } %>): <%- isStreaming ? 'AsyncIterableIterator' : 'Promise' %><<%- op.result ? op.result.typescriptType : 'void' %>> {
    <%_ ['path', 'query', 'header'].forEach((position) => { _%>
    <%_ if (op.parameters.map(p => p.in).includes(position)) { _%>
    const <%- position %>Parameters: {[key: string]: any} = $IO.<%- op.operationIdPascalCase %>Request<%- upperFirst(position) %>Parameters.toJson(input);
    <%_ } else { _%>
    const <%- position %>Parameters: {[key: string]: any} = {};
    <%_ } _%>
    <%_ }); _%>
    <%_ if (op.parametersBody && op.parametersBody.mediaTypes) { _%>
    if (!this.$config.options?.omitContentTypeHeader) {
      headerParameters['Content-Type'] = '<%- op.parametersBody.mediaTypes %>';
    }
    <%_ } _%>
    <%_ if (op.parameters.filter(p => p.collectionFormat).length > 0) { _%>
    const collectionFormats = {
      <%_ op.parameters.filter(p => p.collectionFormat).forEach((parameter) => { _%>
      '<%- parameter.prop %>': '<%- parameter.collectionFormat %>',
      <%_ }); _%>
    } as const;
    <%_ } _%>
    <%_ if (op.parametersBody) { _%>
    <%_ if (op.parametersBody.isPrimitive && ['number', 'boolean', 'string'].includes(op.parametersBody.type) && !['array', 'dictionary'].includes(op.parametersBody.export) && !["date", "date-time"].includes(op.parametersBody.format)) { _%>
    const body = <% if (!op.parametersBody.isRequired) { %>input === undefined ? undefined : <% } %>String(input<%- op.explicitRequestBodyParameter ? `.${op.explicitRequestBodyParameter.typescriptName}` : '' %>);
    <%_ } else if (op.parametersBody.isPrimitive && ["date", "date-time"].includes(op.parametersBody.format)) { _%>
    const body = <%- renderToJsonDateValue('input', op.parametersBody.format) %>;
    <%_ } else if (op.parametersBody.isPrimitive || ["binary", "any", "unknown"].includes(op.parametersBody.type) || op.parametersBody.isEnum || op.parametersBody.export === 'enum') { _%>
    const body = <% if (!op.parametersBody.isRequired) { %>input === undefined ? undefined : <% } %>input<%- op.explicitRequestBodyParameter ? `.${op.explicitRequestBodyParameter.typescriptName}` : '' %><%- op.parametersBody.type === 'unknown' ? ' as any' : '' %>;
    <%_ } else if (op.explicitRequestBodyParameter) { _%>
    const body = <% if (!op.explicitRequestBodyParameter.isRequired) { %>input === undefined ? undefined : <% } %>(typeof input === 'object' ? JSON.stringify($IO.<%- op.operationIdPascalCase %>RequestBodyParameters.toJson(input).<%- op.explicitRequestBodyParameter.prop %>) : String($IO.<%- op.operationIdPascalCase %>RequestBodyParameters.toJson(input).<%- op.explicitRequestBodyParameter.prop %>));
    <%_ } else { _%>
    const body = <% if (!op.parametersBody.isRequired) { %>input === undefined ? undefined : <% } %>(typeof input === 'object' ? JSON.stringify(<%- renderToJsonValue(op.parametersBody, 'input') %>) : String(<%- renderToJsonValue(op.parametersBody, 'input') %>));
    <%_ } _%>
    <%_ } else { %>
    const body = undefined;
    <%_ } _%>

    const response = await this.$fetch(this.$url('<%- op.path %>', pathParameters, queryParameters<% if (op.parameters.filter(p => p.collectionFormat).length > 0) { %>, collectionFormats<% } %>), {
      headers: this.$headers(headerParameters<% if (op.parameters.filter(p => p.collectionFormat).length > 0) { %>, collectionFormats<% } %>),
      method: '<%- op.method %>',
      body,
    });

    <%_ op.responses.forEach((response) => { _%>
    <%_ const isResultResponse = op.result && op.result.code === response.code; _%>
    <%_ if (response.code !== 'default') { _%>
    if (<%- renderResponseCondition(response.code) %>) {
    <%_ } _%>
    <%_ if (isResultResponse) { _%>
    <%_ if (isStreaming) { _%>
    <%_ if (response.type === 'void') { _%>
    return;
    <%_ } else { _%>
    const reader = response.body?<% if (response.type !== 'binary') { %>.pipeThrough(new TextDecoderStream())<% } %>.getReader();
    while (reader) {
      const { value, done } = await reader.read();
      if (done) return;
      yield <%- renderStreamingResponseChunk(response) %>;
    }
    return;
    <%_ } _%>
    <%_ } else { _%>
    return <%- response.type === 'void' ? 'undefined' : renderResponse(response) _%>
    <%_ } _%>
<% } else { %>throw {
      status: response.status,
      <%_ if (response.type !== 'void') { _%>
      error: <%- renderResponse(response) %>,
      <%_ } _%>
    }<% } %>;
    <%_ if (response.code !== 'default') { _%>
    }
    <%_ } _%>
    <%_ }); _%>
    <%_ if (!op.responses.find(response => response.code === 'default')) { _%>
    throw new Error(`Unknown response status ${response.status} returned by API`);
    <%_ } _%>
  }
  <%_ }); _%>
  <%_ Object.entries(operationsByTag).forEach(([tag, operations]) => { _%>

<%- docString({ description: `${tag} operations` }, '  ') %>  public <%- tag %> = {
    <%_ operations.forEach((op) => { _%>
<%- docString(op, '    ') %>    <%- op.name %>: this._<%- op.uniqueName %>.bind(this),
    <%_ }); _%>
  };
  <%_ }); _%>
}
