// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`openApiTsClientGenerator - duplicate types > should handle duplicated model names 1`] = `
"export type Clash = {
  anotherProperty: string;
};
export type Clash1 = {
  message: string;
};
export type MyModel = Clash1 | string;

export type OperationRequest = MyModel;
export type OperationError = never;
"
`;

exports[`openApiTsClientGenerator - duplicate types > should handle duplicated model names 2`] = `
"import type { Clash, Clash1, MyModel, OperationRequest } from './types.gen.js';

/**
 * Utility for serialisation and deserialisation of API types.
 */
export class $IO {
  protected static $mapValues = (data: any, fn: (item: any) => any) =>
    Object.fromEntries(Object.entries(data).map(([k, v]) => [k, fn(v)]));

  public static Clash = {
    toJson: (model: Clash): any => {
      if (model === undefined || model === null) {
        return model;
      }
      return {
        ...(model.anotherProperty === undefined
          ? {}
          : {
              anotherProperty: model.anotherProperty,
            }),
      };
    },
    fromJson: (json: any): Clash => {
      if (json === undefined || json === null) {
        return json;
      }
      return {
        anotherProperty: json['anotherProperty'],
      };
    },
  };

  public static Clash1 = {
    toJson: (model: Clash1): any => {
      if (model === undefined || model === null) {
        return model;
      }
      return {
        ...(model.message === undefined
          ? {}
          : {
              message: model.message,
            }),
      };
    },
    fromJson: (json: any): Clash1 => {
      if (json === undefined || json === null) {
        return json;
      }
      return {
        message: json['message'],
      };
    },
  };

  public static MyModel = {
    toJson: (model: MyModel): any => {
      if (model === undefined || model === null) {
        return model;
      }
      if (typeof model === 'string') {
        return model;
      }
      return {
        ...$IO.Clash1.toJson(model as Clash1),
      };
    },
    fromJson: (json: any): MyModel => {
      if (json === undefined || json === null) {
        return json;
      }
      if (typeof json === 'string') {
        return json;
      }
      return {
        ...$IO.Clash1.fromJson(json),
      };
    },
  };
}

/**
 * Client configuration for TestApi
 */
export interface TestApiConfig {
  /**
   * Base URL for the API
   */
  url: string;
  /**
   * Custom instance of fetch. By default the global 'fetch' is used.
   * You can override this to add custom middleware for use cases such as adding authentication headers.
   */
  fetch?: typeof fetch;
  /**
   * Additional configuration
   */
  options?: {
    /**
     * By default, the client will add a Content-Type header, set to the media type defined for
     * the request in the OpenAPI specification.
     * Set this to false to omit this header.
     */
    omitContentTypeHeader?: boolean;
  };
}

/**
 * API Client for TestApi
 */
export class TestApi {
  private $config: TestApiConfig;

  constructor(config: TestApiConfig) {
    this.$config = config;

    this.operation = this.operation.bind(this);
  }

  private $url = (
    path: string,
    pathParameters: { [key: string]: any },
    queryParameters: { [key: string]: any },
    collectionFormats?: { [key: string]: 'multi' | 'csv' },
  ): string => {
    const baseUrl = this.$config.url.endsWith('/')
      ? this.$config.url.slice(0, -1)
      : this.$config.url;
    const pathWithParameters = Object.entries(pathParameters).reduce(
      (withParams, [key, value]) =>
        withParams.replace(\`{\${key}}\`, encodeURIComponent(\`\${value}\`)),
      path,
    );
    const queryString = Object.entries(queryParameters)
      .map(([key, value]) => {
        if (Array.isArray(value) && collectionFormats?.[key] === 'multi') {
          return value
            .map(
              (v) => \`\${encodeURIComponent(key)}=\${encodeURIComponent(\`\${v}\`)}\`,
            )
            .join('&');
        }
        return \`\${encodeURIComponent(key)}=\${encodeURIComponent(Array.isArray(value) ? value.map(String).join(',') : String(value))}\`;
      })
      .join('&');
    return (
      baseUrl + pathWithParameters + (queryString ? \`?\${queryString}\` : '')
    );
  };

  private $headers = (
    headerParameters: { [key: string]: any },
    collectionFormats?: { [key: string]: 'multi' | 'csv' },
  ): [string, string][] => {
    return Object.entries(headerParameters).flatMap(([key, value]) => {
      if (Array.isArray(value) && collectionFormats?.[key] === 'multi') {
        return value.map((v) => [key, String(v)]) as [string, string][];
      }
      return [[key, String(value)]];
    });
  };

  private $fetch: typeof fetch = (...args) =>
    (this.$config.fetch ?? fetch)(...args);

  public async operation(input: OperationRequest): Promise<Clash> {
    const pathParameters: { [key: string]: any } = {};
    const queryParameters: { [key: string]: any } = {};
    const headerParameters: { [key: string]: any } = {};
    if (!this.$config.options?.omitContentTypeHeader) {
      headerParameters['Content-Type'] = 'application/json';
    }
    const body =
      typeof input === 'object'
        ? JSON.stringify($IO.MyModel.toJson(input))
        : String($IO.MyModel.toJson(input));

    const response = await this.$fetch(
      this.$url('/operation', pathParameters, queryParameters),
      {
        headers: this.$headers(headerParameters),
        method: 'POST',
        body,
      },
    );

    if (response.status === 200) {
      return $IO.Clash.fromJson(await response.json());
    }
    throw new Error(
      \`Unknown response status \${response.status} returned by API\`,
    );
  }
}
"
`;

exports[`openApiTsClientGenerator - duplicate types > should handle many duplicated model names 1`] = `
"export type AnotherModel = Clash3 | Clash4;
export type Clash = {
  prop3: string;
};
export type Clash1 = {
  prop1: string;
};
export type Clash2 = {
  prop2: string;
};
export type Clash3 = {
  prop4: string;
};
export type Clash4 = {
  prop5: string;
};
export type MyModel = Clash1 | Clash2;

export type OperationRequest = MyModel;
export type OperationError = never;
"
`;

exports[`openApiTsClientGenerator - duplicate types > should handle many duplicated model names 2`] = `
"import type {
  AnotherModel,
  Clash,
  Clash1,
  Clash2,
  Clash3,
  Clash4,
  MyModel,
  OperationRequest,
} from './types.gen.js';

/**
 * Utility for serialisation and deserialisation of API types.
 */
export class $IO {
  protected static $mapValues = (data: any, fn: (item: any) => any) =>
    Object.fromEntries(Object.entries(data).map(([k, v]) => [k, fn(v)]));

  public static AnotherModel = {
    toJson: (model: AnotherModel): any => {
      if (model === undefined || model === null) {
        return model;
      }
      return {
        ...$IO.Clash3.toJson(model as Clash3),
        ...$IO.Clash4.toJson(model as Clash4),
      };
    },
    fromJson: (json: any): AnotherModel => {
      if (json === undefined || json === null) {
        return json;
      }
      return {
        ...$IO.Clash3.fromJson(json),
        ...$IO.Clash4.fromJson(json),
      };
    },
  };

  public static Clash = {
    toJson: (model: Clash): any => {
      if (model === undefined || model === null) {
        return model;
      }
      return {
        ...(model.prop3 === undefined
          ? {}
          : {
              prop3: model.prop3,
            }),
      };
    },
    fromJson: (json: any): Clash => {
      if (json === undefined || json === null) {
        return json;
      }
      return {
        prop3: json['prop3'],
      };
    },
  };

  public static Clash1 = {
    toJson: (model: Clash1): any => {
      if (model === undefined || model === null) {
        return model;
      }
      return {
        ...(model.prop1 === undefined
          ? {}
          : {
              prop1: model.prop1,
            }),
      };
    },
    fromJson: (json: any): Clash1 => {
      if (json === undefined || json === null) {
        return json;
      }
      return {
        prop1: json['prop1'],
      };
    },
  };

  public static Clash2 = {
    toJson: (model: Clash2): any => {
      if (model === undefined || model === null) {
        return model;
      }
      return {
        ...(model.prop2 === undefined
          ? {}
          : {
              prop2: model.prop2,
            }),
      };
    },
    fromJson: (json: any): Clash2 => {
      if (json === undefined || json === null) {
        return json;
      }
      return {
        prop2: json['prop2'],
      };
    },
  };

  public static Clash3 = {
    toJson: (model: Clash3): any => {
      if (model === undefined || model === null) {
        return model;
      }
      return {
        ...(model.prop4 === undefined
          ? {}
          : {
              prop4: model.prop4,
            }),
      };
    },
    fromJson: (json: any): Clash3 => {
      if (json === undefined || json === null) {
        return json;
      }
      return {
        prop4: json['prop4'],
      };
    },
  };

  public static Clash4 = {
    toJson: (model: Clash4): any => {
      if (model === undefined || model === null) {
        return model;
      }
      return {
        ...(model.prop5 === undefined
          ? {}
          : {
              prop5: model.prop5,
            }),
      };
    },
    fromJson: (json: any): Clash4 => {
      if (json === undefined || json === null) {
        return json;
      }
      return {
        prop5: json['prop5'],
      };
    },
  };

  public static MyModel = {
    toJson: (model: MyModel): any => {
      if (model === undefined || model === null) {
        return model;
      }
      return {
        ...$IO.Clash1.toJson(model as Clash1),
        ...$IO.Clash2.toJson(model as Clash2),
      };
    },
    fromJson: (json: any): MyModel => {
      if (json === undefined || json === null) {
        return json;
      }
      return {
        ...$IO.Clash1.fromJson(json),
        ...$IO.Clash2.fromJson(json),
      };
    },
  };
}

/**
 * Client configuration for TestApi
 */
export interface TestApiConfig {
  /**
   * Base URL for the API
   */
  url: string;
  /**
   * Custom instance of fetch. By default the global 'fetch' is used.
   * You can override this to add custom middleware for use cases such as adding authentication headers.
   */
  fetch?: typeof fetch;
  /**
   * Additional configuration
   */
  options?: {
    /**
     * By default, the client will add a Content-Type header, set to the media type defined for
     * the request in the OpenAPI specification.
     * Set this to false to omit this header.
     */
    omitContentTypeHeader?: boolean;
  };
}

/**
 * API Client for TestApi
 */
export class TestApi {
  private $config: TestApiConfig;

  constructor(config: TestApiConfig) {
    this.$config = config;

    this.operation = this.operation.bind(this);
  }

  private $url = (
    path: string,
    pathParameters: { [key: string]: any },
    queryParameters: { [key: string]: any },
    collectionFormats?: { [key: string]: 'multi' | 'csv' },
  ): string => {
    const baseUrl = this.$config.url.endsWith('/')
      ? this.$config.url.slice(0, -1)
      : this.$config.url;
    const pathWithParameters = Object.entries(pathParameters).reduce(
      (withParams, [key, value]) =>
        withParams.replace(\`{\${key}}\`, encodeURIComponent(\`\${value}\`)),
      path,
    );
    const queryString = Object.entries(queryParameters)
      .map(([key, value]) => {
        if (Array.isArray(value) && collectionFormats?.[key] === 'multi') {
          return value
            .map(
              (v) => \`\${encodeURIComponent(key)}=\${encodeURIComponent(\`\${v}\`)}\`,
            )
            .join('&');
        }
        return \`\${encodeURIComponent(key)}=\${encodeURIComponent(Array.isArray(value) ? value.map(String).join(',') : String(value))}\`;
      })
      .join('&');
    return (
      baseUrl + pathWithParameters + (queryString ? \`?\${queryString}\` : '')
    );
  };

  private $headers = (
    headerParameters: { [key: string]: any },
    collectionFormats?: { [key: string]: 'multi' | 'csv' },
  ): [string, string][] => {
    return Object.entries(headerParameters).flatMap(([key, value]) => {
      if (Array.isArray(value) && collectionFormats?.[key] === 'multi') {
        return value.map((v) => [key, String(v)]) as [string, string][];
      }
      return [[key, String(value)]];
    });
  };

  private $fetch: typeof fetch = (...args) =>
    (this.$config.fetch ?? fetch)(...args);

  public async operation(input: OperationRequest): Promise<Clash> {
    const pathParameters: { [key: string]: any } = {};
    const queryParameters: { [key: string]: any } = {};
    const headerParameters: { [key: string]: any } = {};
    if (!this.$config.options?.omitContentTypeHeader) {
      headerParameters['Content-Type'] = 'application/json';
    }
    const body =
      typeof input === 'object'
        ? JSON.stringify($IO.MyModel.toJson(input))
        : String($IO.MyModel.toJson(input));

    const response = await this.$fetch(
      this.$url('/operation', pathParameters, queryParameters),
      {
        headers: this.$headers(headerParameters),
        method: 'POST',
        body,
      },
    );

    if (response.status === 200) {
      return $IO.Clash.fromJson(await response.json());
    }
    throw new Error(
      \`Unknown response status \${response.status} returned by API\`,
    );
  }
}
"
`;

exports[`openApiTsClientGenerator - duplicate types > should handle multiple operation ID conflicts 1`] = `
"export type OrderRequest = {
  item: string;
};
export type UserRequest = {
  name: string;
};

export type OrderOperationRequest = OrderRequest;
export type OrderError = never;

export type UserOperationRequest = UserRequest;
export type UserError = never;
"
`;

exports[`openApiTsClientGenerator - duplicate types > should handle multiple operation ID conflicts 2`] = `
"import type {
  OrderRequest,
  UserRequest,
  OrderOperationRequest,
  UserOperationRequest,
} from './types.gen.js';

/**
 * Utility for serialisation and deserialisation of API types.
 */
export class $IO {
  protected static $mapValues = (data: any, fn: (item: any) => any) =>
    Object.fromEntries(Object.entries(data).map(([k, v]) => [k, fn(v)]));

  public static OrderRequest = {
    toJson: (model: OrderRequest): any => {
      if (model === undefined || model === null) {
        return model;
      }
      return {
        ...(model.item === undefined
          ? {}
          : {
              item: model.item,
            }),
      };
    },
    fromJson: (json: any): OrderRequest => {
      if (json === undefined || json === null) {
        return json;
      }
      return {
        item: json['item'],
      };
    },
  };

  public static UserRequest = {
    toJson: (model: UserRequest): any => {
      if (model === undefined || model === null) {
        return model;
      }
      return {
        ...(model.name === undefined
          ? {}
          : {
              name: model.name,
            }),
      };
    },
    fromJson: (json: any): UserRequest => {
      if (json === undefined || json === null) {
        return json;
      }
      return {
        name: json['name'],
      };
    },
  };
}

/**
 * Client configuration for TestApi
 */
export interface TestApiConfig {
  /**
   * Base URL for the API
   */
  url: string;
  /**
   * Custom instance of fetch. By default the global 'fetch' is used.
   * You can override this to add custom middleware for use cases such as adding authentication headers.
   */
  fetch?: typeof fetch;
  /**
   * Additional configuration
   */
  options?: {
    /**
     * By default, the client will add a Content-Type header, set to the media type defined for
     * the request in the OpenAPI specification.
     * Set this to false to omit this header.
     */
    omitContentTypeHeader?: boolean;
  };
}

/**
 * API Client for TestApi
 */
export class TestApi {
  private $config: TestApiConfig;

  constructor(config: TestApiConfig) {
    this.$config = config;

    this.order = this.order.bind(this);
    this.user = this.user.bind(this);
  }

  private $url = (
    path: string,
    pathParameters: { [key: string]: any },
    queryParameters: { [key: string]: any },
    collectionFormats?: { [key: string]: 'multi' | 'csv' },
  ): string => {
    const baseUrl = this.$config.url.endsWith('/')
      ? this.$config.url.slice(0, -1)
      : this.$config.url;
    const pathWithParameters = Object.entries(pathParameters).reduce(
      (withParams, [key, value]) =>
        withParams.replace(\`{\${key}}\`, encodeURIComponent(\`\${value}\`)),
      path,
    );
    const queryString = Object.entries(queryParameters)
      .map(([key, value]) => {
        if (Array.isArray(value) && collectionFormats?.[key] === 'multi') {
          return value
            .map(
              (v) => \`\${encodeURIComponent(key)}=\${encodeURIComponent(\`\${v}\`)}\`,
            )
            .join('&');
        }
        return \`\${encodeURIComponent(key)}=\${encodeURIComponent(Array.isArray(value) ? value.map(String).join(',') : String(value))}\`;
      })
      .join('&');
    return (
      baseUrl + pathWithParameters + (queryString ? \`?\${queryString}\` : '')
    );
  };

  private $headers = (
    headerParameters: { [key: string]: any },
    collectionFormats?: { [key: string]: 'multi' | 'csv' },
  ): [string, string][] => {
    return Object.entries(headerParameters).flatMap(([key, value]) => {
      if (Array.isArray(value) && collectionFormats?.[key] === 'multi') {
        return value.map((v) => [key, String(v)]) as [string, string][];
      }
      return [[key, String(value)]];
    });
  };

  private $fetch: typeof fetch = (...args) =>
    (this.$config.fetch ?? fetch)(...args);

  public async order(input: OrderOperationRequest): Promise<string> {
    const pathParameters: { [key: string]: any } = {};
    const queryParameters: { [key: string]: any } = {};
    const headerParameters: { [key: string]: any } = {};
    if (!this.$config.options?.omitContentTypeHeader) {
      headerParameters['Content-Type'] = 'application/json';
    }
    const body =
      typeof input === 'object'
        ? JSON.stringify($IO.OrderRequest.toJson(input))
        : String($IO.OrderRequest.toJson(input));

    const response = await this.$fetch(
      this.$url('/order', pathParameters, queryParameters),
      {
        headers: this.$headers(headerParameters),
        method: 'POST',
        body,
      },
    );

    if (response.status === 200) {
      return await response.text();
    }
    throw new Error(
      \`Unknown response status \${response.status} returned by API\`,
    );
  }

  public async user(input: UserOperationRequest): Promise<string> {
    const pathParameters: { [key: string]: any } = {};
    const queryParameters: { [key: string]: any } = {};
    const headerParameters: { [key: string]: any } = {};
    if (!this.$config.options?.omitContentTypeHeader) {
      headerParameters['Content-Type'] = 'application/json';
    }
    const body =
      typeof input === 'object'
        ? JSON.stringify($IO.UserRequest.toJson(input))
        : String($IO.UserRequest.toJson(input));

    const response = await this.$fetch(
      this.$url('/user', pathParameters, queryParameters),
      {
        headers: this.$headers(headerParameters),
        method: 'POST',
        body,
      },
    );

    if (response.status === 200) {
      return await response.text();
    }
    throw new Error(
      \`Unknown response status \${response.status} returned by API\`,
    );
  }
}
"
`;

exports[`openApiTsClientGenerator - duplicate types > should handle operation ID matching schema name conflict 1`] = `
"export type ChatRequest = {
  message: string;
};

export type ChatOperationRequest = ChatRequest;
export type ChatError = never;
"
`;

exports[`openApiTsClientGenerator - duplicate types > should handle operation ID matching schema name conflict 2`] = `
"import type { ChatRequest, ChatOperationRequest } from './types.gen.js';

/**
 * Utility for serialisation and deserialisation of API types.
 */
export class $IO {
  protected static $mapValues = (data: any, fn: (item: any) => any) =>
    Object.fromEntries(Object.entries(data).map(([k, v]) => [k, fn(v)]));

  public static ChatRequest = {
    toJson: (model: ChatRequest): any => {
      if (model === undefined || model === null) {
        return model;
      }
      return {
        ...(model.message === undefined
          ? {}
          : {
              message: model.message,
            }),
      };
    },
    fromJson: (json: any): ChatRequest => {
      if (json === undefined || json === null) {
        return json;
      }
      return {
        message: json['message'],
      };
    },
  };
}

/**
 * Client configuration for TestApi
 */
export interface TestApiConfig {
  /**
   * Base URL for the API
   */
  url: string;
  /**
   * Custom instance of fetch. By default the global 'fetch' is used.
   * You can override this to add custom middleware for use cases such as adding authentication headers.
   */
  fetch?: typeof fetch;
  /**
   * Additional configuration
   */
  options?: {
    /**
     * By default, the client will add a Content-Type header, set to the media type defined for
     * the request in the OpenAPI specification.
     * Set this to false to omit this header.
     */
    omitContentTypeHeader?: boolean;
  };
}

/**
 * API Client for TestApi
 */
export class TestApi {
  private $config: TestApiConfig;

  constructor(config: TestApiConfig) {
    this.$config = config;

    this.chat = this.chat.bind(this);
  }

  private $url = (
    path: string,
    pathParameters: { [key: string]: any },
    queryParameters: { [key: string]: any },
    collectionFormats?: { [key: string]: 'multi' | 'csv' },
  ): string => {
    const baseUrl = this.$config.url.endsWith('/')
      ? this.$config.url.slice(0, -1)
      : this.$config.url;
    const pathWithParameters = Object.entries(pathParameters).reduce(
      (withParams, [key, value]) =>
        withParams.replace(\`{\${key}}\`, encodeURIComponent(\`\${value}\`)),
      path,
    );
    const queryString = Object.entries(queryParameters)
      .map(([key, value]) => {
        if (Array.isArray(value) && collectionFormats?.[key] === 'multi') {
          return value
            .map(
              (v) => \`\${encodeURIComponent(key)}=\${encodeURIComponent(\`\${v}\`)}\`,
            )
            .join('&');
        }
        return \`\${encodeURIComponent(key)}=\${encodeURIComponent(Array.isArray(value) ? value.map(String).join(',') : String(value))}\`;
      })
      .join('&');
    return (
      baseUrl + pathWithParameters + (queryString ? \`?\${queryString}\` : '')
    );
  };

  private $headers = (
    headerParameters: { [key: string]: any },
    collectionFormats?: { [key: string]: 'multi' | 'csv' },
  ): [string, string][] => {
    return Object.entries(headerParameters).flatMap(([key, value]) => {
      if (Array.isArray(value) && collectionFormats?.[key] === 'multi') {
        return value.map((v) => [key, String(v)]) as [string, string][];
      }
      return [[key, String(value)]];
    });
  };

  private $fetch: typeof fetch = (...args) =>
    (this.$config.fetch ?? fetch)(...args);

  public async chat(input: ChatOperationRequest): Promise<string> {
    const pathParameters: { [key: string]: any } = {};
    const queryParameters: { [key: string]: any } = {};
    const headerParameters: { [key: string]: any } = {};
    if (!this.$config.options?.omitContentTypeHeader) {
      headerParameters['Content-Type'] = 'application/json';
    }
    const body =
      typeof input === 'object'
        ? JSON.stringify($IO.ChatRequest.toJson(input))
        : String($IO.ChatRequest.toJson(input));

    const response = await this.$fetch(
      this.$url('/chat', pathParameters, queryParameters),
      {
        headers: this.$headers(headerParameters),
        method: 'POST',
        body,
      },
    );

    if (response.status === 200) {
      return await response.text();
    }
    throw new Error(
      \`Unknown response status \${response.status} returned by API\`,
    );
  }
}
"
`;
