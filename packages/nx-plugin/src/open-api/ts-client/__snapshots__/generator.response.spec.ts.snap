// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`openApiTsClientGenerator - responses > should handle default responses 1`] = `
"export type GetTest200Response = {
  message: string;
};
export type GetTestdefaultResponse = {
  error: string;
};
export type GetTestDefaultError = {
  status: number;
  error: GetTestdefaultResponse;
};
export type GetTestError = GetTestDefaultError;
"
`;

exports[`openApiTsClientGenerator - responses > should handle default responses 2`] = `
"import type {
  GetTest200Response,
  GetTestdefaultResponse,
} from './types.gen.js';

/**
 * Utility for serialisation and deserialisation of API types.
 */
export class $IO {
  protected static $mapValues = (data: any, fn: (item: any) => any) =>
    Object.fromEntries(Object.entries(data).map(([k, v]) => [k, fn(v)]));

  public static GetTest200Response = {
    toJson: (model: GetTest200Response): any => {
      if (model === undefined || model === null) {
        return model;
      }
      return {
        ...(model.message === undefined
          ? {}
          : {
              message: model.message,
            }),
      };
    },
    fromJson: (json: any): GetTest200Response => {
      if (json === undefined || json === null) {
        return json;
      }
      return {
        message: json['message'],
      };
    },
  };

  public static GetTestdefaultResponse = {
    toJson: (model: GetTestdefaultResponse): any => {
      if (model === undefined || model === null) {
        return model;
      }
      return {
        ...(model.error === undefined
          ? {}
          : {
              error: model.error,
            }),
      };
    },
    fromJson: (json: any): GetTestdefaultResponse => {
      if (json === undefined || json === null) {
        return json;
      }
      return {
        error: json['error'],
      };
    },
  };
}

/**
 * Client configuration for TestApi
 */
export interface TestApiConfig {
  /**
   * Base URL for the API
   */
  url: string;
  /**
   * Custom instance of fetch. By default the global 'fetch' is used.
   * You can override this to add custom middleware for use cases such as adding authentication headers.
   */
  fetch?: typeof fetch;
  /**
   * Additional configuration
   */
  options?: {
    /**
     * By default, the client will add a Content-Type header, set to the media type defined for
     * the request in the OpenAPI specification.
     * Set this to false to omit this header.
     */
    omitContentTypeHeader?: boolean;
  };
}

/**
 * API Client for TestApi
 */
export class TestApi {
  private $config: TestApiConfig;

  constructor(config: TestApiConfig) {
    this.$config = config;

    this.getTest = this.getTest.bind(this);
  }

  private $url = (
    path: string,
    pathParameters: { [key: string]: any },
    queryParameters: { [key: string]: any },
    collectionFormats?: { [key: string]: 'multi' | 'csv' },
  ): string => {
    const baseUrl = this.$config.url.endsWith('/')
      ? this.$config.url.slice(0, -1)
      : this.$config.url;
    const pathWithParameters = Object.entries(pathParameters).reduce(
      (withParams, [key, value]) =>
        withParams.replace(\`{\${key}}\`, encodeURIComponent(\`\${value}\`)),
      path,
    );
    const queryString = Object.entries(queryParameters)
      .map(([key, value]) => {
        if (Array.isArray(value) && collectionFormats?.[key] === 'multi') {
          return value
            .map(
              (v) => \`\${encodeURIComponent(key)}=\${encodeURIComponent(\`\${v}\`)}\`,
            )
            .join('&');
        }
        return \`\${encodeURIComponent(key)}=\${encodeURIComponent(Array.isArray(value) ? value.map(String).join(',') : String(value))}\`;
      })
      .join('&');
    return (
      baseUrl + pathWithParameters + (queryString ? \`?\${queryString}\` : '')
    );
  };

  private $headers = (
    headerParameters: { [key: string]: any },
    collectionFormats?: { [key: string]: 'multi' | 'csv' },
  ): [string, string][] => {
    return Object.entries(headerParameters).flatMap(([key, value]) => {
      if (Array.isArray(value) && collectionFormats?.[key] === 'multi') {
        return value.map((v) => [key, String(v)]) as [string, string][];
      }
      return [[key, String(value)]];
    });
  };

  private $fetch: typeof fetch = (...args) =>
    (this.$config.fetch ?? fetch)(...args);

  public async getTest(): Promise<GetTest200Response> {
    const pathParameters: { [key: string]: any } = {};
    const queryParameters: { [key: string]: any } = {};
    const headerParameters: { [key: string]: any } = {};

    const body = undefined;

    const response = await this.$fetch(
      this.$url('/test', pathParameters, queryParameters),
      {
        headers: this.$headers(headerParameters),
        method: 'GET',
        body,
      },
    );

    if (response.status === 200) {
      return $IO.GetTest200Response.fromJson(await response.json());
    }
    throw {
      status: response.status,
      error: $IO.GetTestdefaultResponse.fromJson(await response.json()),
    };
  }
}
"
`;

exports[`openApiTsClientGenerator - responses > should handle multiple response status codes 1`] = `
"export type TestResponses2XXResponse = {
  result?: string;
};
export type TestResponses500Response = {
  reason?: string;
};
export type TestResponses5XXResponse = {
  error?: string;
  trace?: string;
};
export type TestResponsesRequestContent = {
  data?: string;
};

export type TestResponsesRequest = TestResponsesRequestContent | undefined;
export type TestResponses500Error = {
  status: 500;
  error: TestResponses500Response;
};
export type TestResponses5XXError = {
  status: _5XX;
  error: TestResponses5XXResponse;
};
export type TestResponsesError = TestResponses500Error | TestResponses5XXError;
export type _5XX =
  | 500
  | 501
  | 502
  | 503
  | 504
  | 505
  | 506
  | 507
  | 508
  | 509
  | 510
  | 511
  | 512
  | 513
  | 514
  | 515
  | 516
  | 517
  | 518
  | 519
  | 520
  | 521
  | 522
  | 523
  | 524
  | 525
  | 526
  | 527
  | 528
  | 529
  | 530
  | 531
  | 532
  | 533
  | 534
  | 535
  | 536
  | 537
  | 538
  | 539
  | 540
  | 541
  | 542
  | 543
  | 544
  | 545
  | 546
  | 547
  | 548
  | 549
  | 550
  | 551
  | 552
  | 553
  | 554
  | 555
  | 556
  | 557
  | 558
  | 559
  | 560
  | 561
  | 562
  | 563
  | 564
  | 565
  | 566
  | 567
  | 568
  | 569
  | 570
  | 571
  | 572
  | 573
  | 574
  | 575
  | 576
  | 577
  | 578
  | 579
  | 580
  | 581
  | 582
  | 583
  | 584
  | 585
  | 586
  | 587
  | 588
  | 589
  | 590
  | 591
  | 592
  | 593
  | 594
  | 595
  | 596
  | 597
  | 598
  | 599;
"
`;

exports[`openApiTsClientGenerator - responses > should handle multiple response status codes 2`] = `
"import type {
  TestResponses2XXResponse,
  TestResponses500Response,
  TestResponses5XXResponse,
  TestResponsesRequestContent,
  TestResponsesRequest,
} from './types.gen.js';

/**
 * Utility for serialisation and deserialisation of API types.
 */
export class $IO {
  protected static $mapValues = (data: any, fn: (item: any) => any) =>
    Object.fromEntries(Object.entries(data).map(([k, v]) => [k, fn(v)]));

  public static TestResponses2XXResponse = {
    toJson: (model: TestResponses2XXResponse): any => {
      if (model === undefined || model === null) {
        return model;
      }
      return {
        ...(model.result === undefined
          ? {}
          : {
              result: model.result,
            }),
      };
    },
    fromJson: (json: any): TestResponses2XXResponse => {
      if (json === undefined || json === null) {
        return json;
      }
      return {
        ...(json['result'] === undefined
          ? {}
          : {
              result: json['result'],
            }),
      };
    },
  };

  public static TestResponses500Response = {
    toJson: (model: TestResponses500Response): any => {
      if (model === undefined || model === null) {
        return model;
      }
      return {
        ...(model.reason === undefined
          ? {}
          : {
              reason: model.reason,
            }),
      };
    },
    fromJson: (json: any): TestResponses500Response => {
      if (json === undefined || json === null) {
        return json;
      }
      return {
        ...(json['reason'] === undefined
          ? {}
          : {
              reason: json['reason'],
            }),
      };
    },
  };

  public static TestResponses5XXResponse = {
    toJson: (model: TestResponses5XXResponse): any => {
      if (model === undefined || model === null) {
        return model;
      }
      return {
        ...(model.error === undefined
          ? {}
          : {
              error: model.error,
            }),
        ...(model.trace === undefined
          ? {}
          : {
              trace: model.trace,
            }),
      };
    },
    fromJson: (json: any): TestResponses5XXResponse => {
      if (json === undefined || json === null) {
        return json;
      }
      return {
        ...(json['error'] === undefined
          ? {}
          : {
              error: json['error'],
            }),
        ...(json['trace'] === undefined
          ? {}
          : {
              trace: json['trace'],
            }),
      };
    },
  };

  public static TestResponsesRequestContent = {
    toJson: (model: TestResponsesRequestContent): any => {
      if (model === undefined || model === null) {
        return model;
      }
      return {
        ...(model.data === undefined
          ? {}
          : {
              data: model.data,
            }),
      };
    },
    fromJson: (json: any): TestResponsesRequestContent => {
      if (json === undefined || json === null) {
        return json;
      }
      return {
        ...(json['data'] === undefined
          ? {}
          : {
              data: json['data'],
            }),
      };
    },
  };
}

/**
 * Client configuration for TestApi
 */
export interface TestApiConfig {
  /**
   * Base URL for the API
   */
  url: string;
  /**
   * Custom instance of fetch. By default the global 'fetch' is used.
   * You can override this to add custom middleware for use cases such as adding authentication headers.
   */
  fetch?: typeof fetch;
  /**
   * Additional configuration
   */
  options?: {
    /**
     * By default, the client will add a Content-Type header, set to the media type defined for
     * the request in the OpenAPI specification.
     * Set this to false to omit this header.
     */
    omitContentTypeHeader?: boolean;
  };
}

/**
 * API Client for TestApi
 */
export class TestApi {
  private $config: TestApiConfig;

  constructor(config: TestApiConfig) {
    this.$config = config;

    this.testResponses = this.testResponses.bind(this);
  }

  private $url = (
    path: string,
    pathParameters: { [key: string]: any },
    queryParameters: { [key: string]: any },
    collectionFormats?: { [key: string]: 'multi' | 'csv' },
  ): string => {
    const baseUrl = this.$config.url.endsWith('/')
      ? this.$config.url.slice(0, -1)
      : this.$config.url;
    const pathWithParameters = Object.entries(pathParameters).reduce(
      (withParams, [key, value]) =>
        withParams.replace(\`{\${key}}\`, encodeURIComponent(\`\${value}\`)),
      path,
    );
    const queryString = Object.entries(queryParameters)
      .map(([key, value]) => {
        if (Array.isArray(value) && collectionFormats?.[key] === 'multi') {
          return value
            .map(
              (v) => \`\${encodeURIComponent(key)}=\${encodeURIComponent(\`\${v}\`)}\`,
            )
            .join('&');
        }
        return \`\${encodeURIComponent(key)}=\${encodeURIComponent(Array.isArray(value) ? value.map(String).join(',') : String(value))}\`;
      })
      .join('&');
    return (
      baseUrl + pathWithParameters + (queryString ? \`?\${queryString}\` : '')
    );
  };

  private $headers = (
    headerParameters: { [key: string]: any },
    collectionFormats?: { [key: string]: 'multi' | 'csv' },
  ): [string, string][] => {
    return Object.entries(headerParameters).flatMap(([key, value]) => {
      if (Array.isArray(value) && collectionFormats?.[key] === 'multi') {
        return value.map((v) => [key, String(v)]) as [string, string][];
      }
      return [[key, String(value)]];
    });
  };

  private $fetch: typeof fetch = (...args) =>
    (this.$config.fetch ?? fetch)(...args);

  public async testResponses(
    input?: TestResponsesRequest,
  ): Promise<TestResponses2XXResponse> {
    const pathParameters: { [key: string]: any } = {};
    const queryParameters: { [key: string]: any } = {};
    const headerParameters: { [key: string]: any } = {};
    if (!this.$config.options?.omitContentTypeHeader) {
      headerParameters['Content-Type'] = 'application/json';
    }
    const body =
      input === undefined
        ? undefined
        : typeof input === 'object'
          ? JSON.stringify($IO.TestResponsesRequestContent.toJson(input))
          : String($IO.TestResponsesRequestContent.toJson(input));

    const response = await this.$fetch(
      this.$url('/test', pathParameters, queryParameters),
      {
        headers: this.$headers(headerParameters),
        method: 'POST',
        body,
      },
    );

    if (response.status === 500) {
      throw {
        status: response.status,
        error: $IO.TestResponses500Response.fromJson(await response.json()),
      };
    }
    if (response.status >= 200 && response.status < 300) {
      return $IO.TestResponses2XXResponse.fromJson(await response.json());
    }
    if (response.status >= 500 && response.status < 600) {
      throw {
        status: response.status,
        error: $IO.TestResponses5XXResponse.fromJson(await response.json()),
      };
    }
    throw new Error(
      \`Unknown response status \${response.status} returned by API\`,
    );
  }
}
"
`;

exports[`openApiTsClientGenerator - responses > should handle only default response 1`] = `
"export type GetTestdefaultResponse = {
  message: string;
};
export type GetTestError = never;
"
`;

exports[`openApiTsClientGenerator - responses > should handle only default response 2`] = `
"import type { GetTestdefaultResponse } from './types.gen.js';

/**
 * Utility for serialisation and deserialisation of API types.
 */
export class $IO {
  protected static $mapValues = (data: any, fn: (item: any) => any) =>
    Object.fromEntries(Object.entries(data).map(([k, v]) => [k, fn(v)]));

  public static GetTestdefaultResponse = {
    toJson: (model: GetTestdefaultResponse): any => {
      if (model === undefined || model === null) {
        return model;
      }
      return {
        ...(model.message === undefined
          ? {}
          : {
              message: model.message,
            }),
      };
    },
    fromJson: (json: any): GetTestdefaultResponse => {
      if (json === undefined || json === null) {
        return json;
      }
      return {
        message: json['message'],
      };
    },
  };
}

/**
 * Client configuration for TestApi
 */
export interface TestApiConfig {
  /**
   * Base URL for the API
   */
  url: string;
  /**
   * Custom instance of fetch. By default the global 'fetch' is used.
   * You can override this to add custom middleware for use cases such as adding authentication headers.
   */
  fetch?: typeof fetch;
  /**
   * Additional configuration
   */
  options?: {
    /**
     * By default, the client will add a Content-Type header, set to the media type defined for
     * the request in the OpenAPI specification.
     * Set this to false to omit this header.
     */
    omitContentTypeHeader?: boolean;
  };
}

/**
 * API Client for TestApi
 */
export class TestApi {
  private $config: TestApiConfig;

  constructor(config: TestApiConfig) {
    this.$config = config;

    this.getTest = this.getTest.bind(this);
  }

  private $url = (
    path: string,
    pathParameters: { [key: string]: any },
    queryParameters: { [key: string]: any },
    collectionFormats?: { [key: string]: 'multi' | 'csv' },
  ): string => {
    const baseUrl = this.$config.url.endsWith('/')
      ? this.$config.url.slice(0, -1)
      : this.$config.url;
    const pathWithParameters = Object.entries(pathParameters).reduce(
      (withParams, [key, value]) =>
        withParams.replace(\`{\${key}}\`, encodeURIComponent(\`\${value}\`)),
      path,
    );
    const queryString = Object.entries(queryParameters)
      .map(([key, value]) => {
        if (Array.isArray(value) && collectionFormats?.[key] === 'multi') {
          return value
            .map(
              (v) => \`\${encodeURIComponent(key)}=\${encodeURIComponent(\`\${v}\`)}\`,
            )
            .join('&');
        }
        return \`\${encodeURIComponent(key)}=\${encodeURIComponent(Array.isArray(value) ? value.map(String).join(',') : String(value))}\`;
      })
      .join('&');
    return (
      baseUrl + pathWithParameters + (queryString ? \`?\${queryString}\` : '')
    );
  };

  private $headers = (
    headerParameters: { [key: string]: any },
    collectionFormats?: { [key: string]: 'multi' | 'csv' },
  ): [string, string][] => {
    return Object.entries(headerParameters).flatMap(([key, value]) => {
      if (Array.isArray(value) && collectionFormats?.[key] === 'multi') {
        return value.map((v) => [key, String(v)]) as [string, string][];
      }
      return [[key, String(value)]];
    });
  };

  private $fetch: typeof fetch = (...args) =>
    (this.$config.fetch ?? fetch)(...args);

  public async getTest(): Promise<GetTestdefaultResponse> {
    const pathParameters: { [key: string]: any } = {};
    const queryParameters: { [key: string]: any } = {};
    const headerParameters: { [key: string]: any } = {};

    const body = undefined;

    const response = await this.$fetch(
      this.$url('/test', pathParameters, queryParameters),
      {
        headers: this.$headers(headerParameters),
        method: 'GET',
        body,
      },
    );

    return $IO.GetTestdefaultResponse.fromJson(await response.json());
  }
}
"
`;
