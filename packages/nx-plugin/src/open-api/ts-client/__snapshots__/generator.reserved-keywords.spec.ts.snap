// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`openApiTsClientGenerator - reserved keywords > should handle reserved TypeScript object built-ins 1`] = `
"export type _Array = {
  items: Array<string>;
};
export type _Blob = {
  data: string;
};
export type _Boolean = {
  flag: boolean;
};
export type _Date = {
  timestamp: string;
};
export type _Error = {
  message: string;
};
export type _Function = {
  name: string;
};
export type _JSON = {
  data: string;
};
export type _Map = {
  entries: { [key: string]: unknown };
};
export type _Number = {
  value: number;
};
export type _Object = {
  value: string;
};
export type _Promise = {
  result: string;
};
export type _RegExp = {
  pattern: string;
};
export type _Set = {
  values: Array<string>;
};
export type _String = {
  content: string;
};
export type _Symbol = {
  description: string;
};
export type TestReservedModelsRequestContent = {
  dateModel?: _Date;
  blobModel?: _Blob;
  objectModel?: _Object;
  stringModel?: _String;
  booleanModel?: _Boolean;
  numberModel?: _Number;
  arrayModel?: _Array;
  functionModel?: _Function;
  promiseModel?: _Promise;
  errorModel?: _Error;
  mapModel?: _Map;
  setModel?: _Set;
  symbolModel?: _Symbol;
  regexpModel?: _RegExp;
  jsonModel?: _JSON;
};

export type TestReservedModelsRequest = TestReservedModelsRequestContent;
export type TestReservedModelsError = never;
"
`;

exports[`openApiTsClientGenerator - reserved keywords > should handle reserved TypeScript object built-ins 2`] = `
"import type {
  _Array,
  _Blob,
  _Boolean,
  _Date,
  _Error,
  _Function,
  _JSON,
  _Map,
  _Number,
  _Object,
  _Promise,
  _RegExp,
  _Set,
  _String,
  _Symbol,
  TestReservedModelsRequestContent,
  TestReservedModelsRequest,
} from './types.gen.js';

/**
 * Utility for serialisation and deserialisation of API types.
 */
export class $IO {
  protected static $mapValues = (data: any, fn: (item: any) => any) =>
    Object.fromEntries(Object.entries(data).map(([k, v]) => [k, fn(v)]));

  public static _Array = {
    toJson: (model: _Array): any => {
      if (model === undefined || model === null) {
        return model;
      }
      return {
        ...(model.items === undefined
          ? {}
          : {
              items: model.items,
            }),
      };
    },
    fromJson: (json: any): _Array => {
      if (json === undefined || json === null) {
        return json;
      }
      return {
        items: json['items'],
      };
    },
  };

  public static _Blob = {
    toJson: (model: _Blob): any => {
      if (model === undefined || model === null) {
        return model;
      }
      return {
        ...(model.data === undefined
          ? {}
          : {
              data: model.data,
            }),
      };
    },
    fromJson: (json: any): _Blob => {
      if (json === undefined || json === null) {
        return json;
      }
      return {
        data: json['data'],
      };
    },
  };

  public static _Boolean = {
    toJson: (model: _Boolean): any => {
      if (model === undefined || model === null) {
        return model;
      }
      return {
        ...(model.flag === undefined
          ? {}
          : {
              flag: model.flag,
            }),
      };
    },
    fromJson: (json: any): _Boolean => {
      if (json === undefined || json === null) {
        return json;
      }
      return {
        flag: json['flag'],
      };
    },
  };

  public static _Date = {
    toJson: (model: _Date): any => {
      if (model === undefined || model === null) {
        return model;
      }
      return {
        ...(model.timestamp === undefined
          ? {}
          : {
              timestamp: model.timestamp,
            }),
      };
    },
    fromJson: (json: any): _Date => {
      if (json === undefined || json === null) {
        return json;
      }
      return {
        timestamp: json['timestamp'],
      };
    },
  };

  public static _Error = {
    toJson: (model: _Error): any => {
      if (model === undefined || model === null) {
        return model;
      }
      return {
        ...(model.message === undefined
          ? {}
          : {
              message: model.message,
            }),
      };
    },
    fromJson: (json: any): _Error => {
      if (json === undefined || json === null) {
        return json;
      }
      return {
        message: json['message'],
      };
    },
  };

  public static _Function = {
    toJson: (model: _Function): any => {
      if (model === undefined || model === null) {
        return model;
      }
      return {
        ...(model.name === undefined
          ? {}
          : {
              name: model.name,
            }),
      };
    },
    fromJson: (json: any): _Function => {
      if (json === undefined || json === null) {
        return json;
      }
      return {
        name: json['name'],
      };
    },
  };

  public static _JSON = {
    toJson: (model: _JSON): any => {
      if (model === undefined || model === null) {
        return model;
      }
      return {
        ...(model.data === undefined
          ? {}
          : {
              data: model.data,
            }),
      };
    },
    fromJson: (json: any): _JSON => {
      if (json === undefined || json === null) {
        return json;
      }
      return {
        data: json['data'],
      };
    },
  };

  public static _Map = {
    toJson: (model: _Map): any => {
      if (model === undefined || model === null) {
        return model;
      }
      return {
        ...(model.entries === undefined
          ? {}
          : {
              entries: $IO.$mapValues(model.entries, (item0) => item0),
            }),
      };
    },
    fromJson: (json: any): _Map => {
      if (json === undefined || json === null) {
        return json;
      }
      return {
        entries: $IO.$mapValues(json['entries'], (item0) => item0),
      };
    },
  };

  public static _Number = {
    toJson: (model: _Number): any => {
      if (model === undefined || model === null) {
        return model;
      }
      return {
        ...(model.value === undefined
          ? {}
          : {
              value: model.value,
            }),
      };
    },
    fromJson: (json: any): _Number => {
      if (json === undefined || json === null) {
        return json;
      }
      return {
        value: json['value'],
      };
    },
  };

  public static _Object = {
    toJson: (model: _Object): any => {
      if (model === undefined || model === null) {
        return model;
      }
      return {
        ...(model.value === undefined
          ? {}
          : {
              value: model.value,
            }),
      };
    },
    fromJson: (json: any): _Object => {
      if (json === undefined || json === null) {
        return json;
      }
      return {
        value: json['value'],
      };
    },
  };

  public static _Promise = {
    toJson: (model: _Promise): any => {
      if (model === undefined || model === null) {
        return model;
      }
      return {
        ...(model.result === undefined
          ? {}
          : {
              result: model.result,
            }),
      };
    },
    fromJson: (json: any): _Promise => {
      if (json === undefined || json === null) {
        return json;
      }
      return {
        result: json['result'],
      };
    },
  };

  public static _RegExp = {
    toJson: (model: _RegExp): any => {
      if (model === undefined || model === null) {
        return model;
      }
      return {
        ...(model.pattern === undefined
          ? {}
          : {
              pattern: model.pattern,
            }),
      };
    },
    fromJson: (json: any): _RegExp => {
      if (json === undefined || json === null) {
        return json;
      }
      return {
        pattern: json['pattern'],
      };
    },
  };

  public static _Set = {
    toJson: (model: _Set): any => {
      if (model === undefined || model === null) {
        return model;
      }
      return {
        ...(model.values === undefined
          ? {}
          : {
              values: model.values,
            }),
      };
    },
    fromJson: (json: any): _Set => {
      if (json === undefined || json === null) {
        return json;
      }
      return {
        values: json['values'],
      };
    },
  };

  public static _String = {
    toJson: (model: _String): any => {
      if (model === undefined || model === null) {
        return model;
      }
      return {
        ...(model.content === undefined
          ? {}
          : {
              content: model.content,
            }),
      };
    },
    fromJson: (json: any): _String => {
      if (json === undefined || json === null) {
        return json;
      }
      return {
        content: json['content'],
      };
    },
  };

  public static _Symbol = {
    toJson: (model: _Symbol): any => {
      if (model === undefined || model === null) {
        return model;
      }
      return {
        ...(model.description === undefined
          ? {}
          : {
              description: model.description,
            }),
      };
    },
    fromJson: (json: any): _Symbol => {
      if (json === undefined || json === null) {
        return json;
      }
      return {
        description: json['description'],
      };
    },
  };

  public static TestReservedModelsRequestContent = {
    toJson: (model: TestReservedModelsRequestContent): any => {
      if (model === undefined || model === null) {
        return model;
      }
      return {
        ...(model.dateModel === undefined
          ? {}
          : {
              dateModel: $IO._Date.toJson(model.dateModel),
            }),
        ...(model.blobModel === undefined
          ? {}
          : {
              blobModel: $IO._Blob.toJson(model.blobModel),
            }),
        ...(model.objectModel === undefined
          ? {}
          : {
              objectModel: $IO._Object.toJson(model.objectModel),
            }),
        ...(model.stringModel === undefined
          ? {}
          : {
              stringModel: $IO._String.toJson(model.stringModel),
            }),
        ...(model.booleanModel === undefined
          ? {}
          : {
              booleanModel: $IO._Boolean.toJson(model.booleanModel),
            }),
        ...(model.numberModel === undefined
          ? {}
          : {
              numberModel: $IO._Number.toJson(model.numberModel),
            }),
        ...(model.arrayModel === undefined
          ? {}
          : {
              arrayModel: $IO._Array.toJson(model.arrayModel),
            }),
        ...(model.functionModel === undefined
          ? {}
          : {
              functionModel: $IO._Function.toJson(model.functionModel),
            }),
        ...(model.promiseModel === undefined
          ? {}
          : {
              promiseModel: $IO._Promise.toJson(model.promiseModel),
            }),
        ...(model.errorModel === undefined
          ? {}
          : {
              errorModel: $IO._Error.toJson(model.errorModel),
            }),
        ...(model.mapModel === undefined
          ? {}
          : {
              mapModel: $IO._Map.toJson(model.mapModel),
            }),
        ...(model.setModel === undefined
          ? {}
          : {
              setModel: $IO._Set.toJson(model.setModel),
            }),
        ...(model.symbolModel === undefined
          ? {}
          : {
              symbolModel: $IO._Symbol.toJson(model.symbolModel),
            }),
        ...(model.regexpModel === undefined
          ? {}
          : {
              regexpModel: $IO._RegExp.toJson(model.regexpModel),
            }),
        ...(model.jsonModel === undefined
          ? {}
          : {
              jsonModel: $IO._JSON.toJson(model.jsonModel),
            }),
      };
    },
    fromJson: (json: any): TestReservedModelsRequestContent => {
      if (json === undefined || json === null) {
        return json;
      }
      return {
        ...(json['dateModel'] === undefined
          ? {}
          : {
              dateModel: $IO._Date.fromJson(json['dateModel']),
            }),
        ...(json['blobModel'] === undefined
          ? {}
          : {
              blobModel: $IO._Blob.fromJson(json['blobModel']),
            }),
        ...(json['objectModel'] === undefined
          ? {}
          : {
              objectModel: $IO._Object.fromJson(json['objectModel']),
            }),
        ...(json['stringModel'] === undefined
          ? {}
          : {
              stringModel: $IO._String.fromJson(json['stringModel']),
            }),
        ...(json['booleanModel'] === undefined
          ? {}
          : {
              booleanModel: $IO._Boolean.fromJson(json['booleanModel']),
            }),
        ...(json['numberModel'] === undefined
          ? {}
          : {
              numberModel: $IO._Number.fromJson(json['numberModel']),
            }),
        ...(json['arrayModel'] === undefined
          ? {}
          : {
              arrayModel: $IO._Array.fromJson(json['arrayModel']),
            }),
        ...(json['functionModel'] === undefined
          ? {}
          : {
              functionModel: $IO._Function.fromJson(json['functionModel']),
            }),
        ...(json['promiseModel'] === undefined
          ? {}
          : {
              promiseModel: $IO._Promise.fromJson(json['promiseModel']),
            }),
        ...(json['errorModel'] === undefined
          ? {}
          : {
              errorModel: $IO._Error.fromJson(json['errorModel']),
            }),
        ...(json['mapModel'] === undefined
          ? {}
          : {
              mapModel: $IO._Map.fromJson(json['mapModel']),
            }),
        ...(json['setModel'] === undefined
          ? {}
          : {
              setModel: $IO._Set.fromJson(json['setModel']),
            }),
        ...(json['symbolModel'] === undefined
          ? {}
          : {
              symbolModel: $IO._Symbol.fromJson(json['symbolModel']),
            }),
        ...(json['regexpModel'] === undefined
          ? {}
          : {
              regexpModel: $IO._RegExp.fromJson(json['regexpModel']),
            }),
        ...(json['jsonModel'] === undefined
          ? {}
          : {
              jsonModel: $IO._JSON.fromJson(json['jsonModel']),
            }),
      };
    },
  };
}

/**
 * Client configuration for TestApi
 */
export interface TestApiConfig {
  /**
   * Base URL for the API
   */
  url: string;
  /**
   * Custom instance of fetch. By default the global 'fetch' is used.
   * You can override this to add custom middleware for use cases such as adding authentication headers.
   */
  fetch?: typeof fetch;
  /**
   * Additional configuration
   */
  options?: {
    /**
     * By default, the client will add a Content-Type header, set to the media type defined for
     * the request in the OpenAPI specification.
     * Set this to false to omit this header.
     */
    omitContentTypeHeader?: boolean;
  };
}

/**
 * API Client for TestApi
 */
export class TestApi {
  private $config: TestApiConfig;

  constructor(config: TestApiConfig) {
    this.$config = config;

    this.testReservedModels = this.testReservedModels.bind(this);
  }

  private $url = (
    path: string,
    pathParameters: { [key: string]: any },
    queryParameters: { [key: string]: any },
    collectionFormats?: { [key: string]: 'multi' | 'csv' },
  ): string => {
    const baseUrl = this.$config.url.endsWith('/')
      ? this.$config.url.slice(0, -1)
      : this.$config.url;
    const pathWithParameters = Object.entries(pathParameters).reduce(
      (withParams, [key, value]) =>
        withParams.replace(\`{\${key}}\`, encodeURIComponent(\`\${value}\`)),
      path,
    );
    const queryString = Object.entries(queryParameters)
      .map(([key, value]) => {
        if (Array.isArray(value) && collectionFormats?.[key] === 'multi') {
          return value
            .map(
              (v) => \`\${encodeURIComponent(key)}=\${encodeURIComponent(\`\${v}\`)}\`,
            )
            .join('&');
        }
        return \`\${encodeURIComponent(key)}=\${encodeURIComponent(Array.isArray(value) ? value.map(String).join(',') : String(value))}\`;
      })
      .join('&');
    return (
      baseUrl + pathWithParameters + (queryString ? \`?\${queryString}\` : '')
    );
  };

  private $headers = (
    headerParameters: { [key: string]: any },
    collectionFormats?: { [key: string]: 'multi' | 'csv' },
  ): [string, string][] => {
    return Object.entries(headerParameters).flatMap(([key, value]) => {
      if (Array.isArray(value) && collectionFormats?.[key] === 'multi') {
        return value.map((v) => [key, String(v)]) as [string, string][];
      }
      return [[key, String(value)]];
    });
  };

  private $fetch: typeof fetch = (...args) =>
    (this.$config.fetch ?? fetch)(...args);

  public async testReservedModels(
    input: TestReservedModelsRequest,
  ): Promise<string> {
    const pathParameters: { [key: string]: any } = {};
    const queryParameters: { [key: string]: any } = {};
    const headerParameters: { [key: string]: any } = {};
    if (!this.$config.options?.omitContentTypeHeader) {
      headerParameters['Content-Type'] = 'application/json';
    }
    const body =
      typeof input === 'object'
        ? JSON.stringify($IO.TestReservedModelsRequestContent.toJson(input))
        : String($IO.TestReservedModelsRequestContent.toJson(input));

    const response = await this.$fetch(
      this.$url('/reserved-models', pathParameters, queryParameters),
      {
        headers: this.$headers(headerParameters),
        method: 'POST',
        body,
      },
    );

    if (response.status === 200) {
      return await response.text();
    }
    throw new Error(
      \`Unknown response status \${response.status} returned by API\`,
    );
  }
}
"
`;

exports[`openApiTsClientGenerator - reserved keywords > should handle reserved language keywords 1`] = `
"export type As = {};
export type Async = {};
export type Await = {};
export type Break = {};
export type Case = {};
export type Catch = {};
export type Class = {};
export type Const = {};
export type Continue = {};
export type Default = {};
export type Do = {};
export type Else = {};
export type Enum = {};
export type Export = {};
export type Extends = {};
export type False = {};
export type Finally = {};
export type For = {};
export type From = {};
export type _Function = {};
export type If = {};
export type Implements = {};
export type Import = {};
export type In = {};
export type Instanceof = {};
export type Interface = {};
export type Let = {};
export type Module = {};
export type Namespace = {};
export type New = {};
export type Null = {};
export type Of = {};
export type ReservedProperties = {
  for?: string;
  while: string;
  if: string;
  else: number;
  function: boolean;
  var?: string;
  let?: string;
  const?: string;
  return?: string;
  break?: string;
  continue?: string;
  switch?: string;
  case?: string;
  default?: string;
  try?: string;
  catch?: string;
  finally?: string;
  throw?: string;
  new?: string;
  this?: string;
  super?: string;
  class?: string;
  extends?: string;
  implements?: string;
  interface?: string;
  enum?: string;
  type?: string;
  namespace?: string;
  module?: string;
  import?: string;
  export?: string;
  from?: string;
  as?: string;
  async?: string;
  await?: string;
  yield?: string;
  typeof?: string;
  instanceof?: string;
  in?: string;
  of?: string;
  with?: string;
  do?: string;
  null?: string;
  undefined?: string;
  true?: string;
  false?: string;
};
export type Return = {};
export type Super = {};
export type Switch = {};
export type This = {};
export type Throw = {};
export type True = {};
export type Try = {};
export type Type = {};
export type Typeof = {};
export type Undefined = {};
export type Var = {};
export type While = {};
export type With = {};
export type Yield = {};

export type OpRequest = ReservedProperties;
export type OpError = never;
"
`;

exports[`openApiTsClientGenerator - reserved keywords > should handle reserved language keywords 2`] = `
"import type {
  As,
  Async,
  Await,
  Break,
  Case,
  Catch,
  Class,
  Const,
  Continue,
  Default,
  Do,
  Else,
  Enum,
  Export,
  Extends,
  False,
  Finally,
  For,
  From,
  _Function,
  If,
  Implements,
  Import,
  In,
  Instanceof,
  Interface,
  Let,
  Module,
  Namespace,
  New,
  Null,
  Of,
  ReservedProperties,
  Return,
  Super,
  Switch,
  This,
  Throw,
  True,
  Try,
  Type,
  Typeof,
  Undefined,
  Var,
  While,
  With,
  Yield,
  OpRequest,
} from './types.gen.js';

/**
 * Utility for serialisation and deserialisation of API types.
 */
export class $IO {
  protected static $mapValues = (data: any, fn: (item: any) => any) =>
    Object.fromEntries(Object.entries(data).map(([k, v]) => [k, fn(v)]));

  public static As = {
    toJson: (model: As): any => {
      if (model === undefined || model === null) {
        return model;
      }
      return {};
    },
    fromJson: (json: any): As => {
      if (json === undefined || json === null) {
        return json;
      }
      return {};
    },
  };

  public static Async = {
    toJson: (model: Async): any => {
      if (model === undefined || model === null) {
        return model;
      }
      return {};
    },
    fromJson: (json: any): Async => {
      if (json === undefined || json === null) {
        return json;
      }
      return {};
    },
  };

  public static Await = {
    toJson: (model: Await): any => {
      if (model === undefined || model === null) {
        return model;
      }
      return {};
    },
    fromJson: (json: any): Await => {
      if (json === undefined || json === null) {
        return json;
      }
      return {};
    },
  };

  public static Break = {
    toJson: (model: Break): any => {
      if (model === undefined || model === null) {
        return model;
      }
      return {};
    },
    fromJson: (json: any): Break => {
      if (json === undefined || json === null) {
        return json;
      }
      return {};
    },
  };

  public static Case = {
    toJson: (model: Case): any => {
      if (model === undefined || model === null) {
        return model;
      }
      return {};
    },
    fromJson: (json: any): Case => {
      if (json === undefined || json === null) {
        return json;
      }
      return {};
    },
  };

  public static Catch = {
    toJson: (model: Catch): any => {
      if (model === undefined || model === null) {
        return model;
      }
      return {};
    },
    fromJson: (json: any): Catch => {
      if (json === undefined || json === null) {
        return json;
      }
      return {};
    },
  };

  public static Class = {
    toJson: (model: Class): any => {
      if (model === undefined || model === null) {
        return model;
      }
      return {};
    },
    fromJson: (json: any): Class => {
      if (json === undefined || json === null) {
        return json;
      }
      return {};
    },
  };

  public static Const = {
    toJson: (model: Const): any => {
      if (model === undefined || model === null) {
        return model;
      }
      return {};
    },
    fromJson: (json: any): Const => {
      if (json === undefined || json === null) {
        return json;
      }
      return {};
    },
  };

  public static Continue = {
    toJson: (model: Continue): any => {
      if (model === undefined || model === null) {
        return model;
      }
      return {};
    },
    fromJson: (json: any): Continue => {
      if (json === undefined || json === null) {
        return json;
      }
      return {};
    },
  };

  public static Default = {
    toJson: (model: Default): any => {
      if (model === undefined || model === null) {
        return model;
      }
      return {};
    },
    fromJson: (json: any): Default => {
      if (json === undefined || json === null) {
        return json;
      }
      return {};
    },
  };

  public static Do = {
    toJson: (model: Do): any => {
      if (model === undefined || model === null) {
        return model;
      }
      return {};
    },
    fromJson: (json: any): Do => {
      if (json === undefined || json === null) {
        return json;
      }
      return {};
    },
  };

  public static Else = {
    toJson: (model: Else): any => {
      if (model === undefined || model === null) {
        return model;
      }
      return {};
    },
    fromJson: (json: any): Else => {
      if (json === undefined || json === null) {
        return json;
      }
      return {};
    },
  };

  public static Enum = {
    toJson: (model: Enum): any => {
      if (model === undefined || model === null) {
        return model;
      }
      return {};
    },
    fromJson: (json: any): Enum => {
      if (json === undefined || json === null) {
        return json;
      }
      return {};
    },
  };

  public static Export = {
    toJson: (model: Export): any => {
      if (model === undefined || model === null) {
        return model;
      }
      return {};
    },
    fromJson: (json: any): Export => {
      if (json === undefined || json === null) {
        return json;
      }
      return {};
    },
  };

  public static Extends = {
    toJson: (model: Extends): any => {
      if (model === undefined || model === null) {
        return model;
      }
      return {};
    },
    fromJson: (json: any): Extends => {
      if (json === undefined || json === null) {
        return json;
      }
      return {};
    },
  };

  public static False = {
    toJson: (model: False): any => {
      if (model === undefined || model === null) {
        return model;
      }
      return {};
    },
    fromJson: (json: any): False => {
      if (json === undefined || json === null) {
        return json;
      }
      return {};
    },
  };

  public static Finally = {
    toJson: (model: Finally): any => {
      if (model === undefined || model === null) {
        return model;
      }
      return {};
    },
    fromJson: (json: any): Finally => {
      if (json === undefined || json === null) {
        return json;
      }
      return {};
    },
  };

  public static For = {
    toJson: (model: For): any => {
      if (model === undefined || model === null) {
        return model;
      }
      return {};
    },
    fromJson: (json: any): For => {
      if (json === undefined || json === null) {
        return json;
      }
      return {};
    },
  };

  public static From = {
    toJson: (model: From): any => {
      if (model === undefined || model === null) {
        return model;
      }
      return {};
    },
    fromJson: (json: any): From => {
      if (json === undefined || json === null) {
        return json;
      }
      return {};
    },
  };

  public static _Function = {
    toJson: (model: _Function): any => {
      if (model === undefined || model === null) {
        return model;
      }
      return {};
    },
    fromJson: (json: any): _Function => {
      if (json === undefined || json === null) {
        return json;
      }
      return {};
    },
  };

  public static If = {
    toJson: (model: If): any => {
      if (model === undefined || model === null) {
        return model;
      }
      return {};
    },
    fromJson: (json: any): If => {
      if (json === undefined || json === null) {
        return json;
      }
      return {};
    },
  };

  public static Implements = {
    toJson: (model: Implements): any => {
      if (model === undefined || model === null) {
        return model;
      }
      return {};
    },
    fromJson: (json: any): Implements => {
      if (json === undefined || json === null) {
        return json;
      }
      return {};
    },
  };

  public static Import = {
    toJson: (model: Import): any => {
      if (model === undefined || model === null) {
        return model;
      }
      return {};
    },
    fromJson: (json: any): Import => {
      if (json === undefined || json === null) {
        return json;
      }
      return {};
    },
  };

  public static In = {
    toJson: (model: In): any => {
      if (model === undefined || model === null) {
        return model;
      }
      return {};
    },
    fromJson: (json: any): In => {
      if (json === undefined || json === null) {
        return json;
      }
      return {};
    },
  };

  public static Instanceof = {
    toJson: (model: Instanceof): any => {
      if (model === undefined || model === null) {
        return model;
      }
      return {};
    },
    fromJson: (json: any): Instanceof => {
      if (json === undefined || json === null) {
        return json;
      }
      return {};
    },
  };

  public static Interface = {
    toJson: (model: Interface): any => {
      if (model === undefined || model === null) {
        return model;
      }
      return {};
    },
    fromJson: (json: any): Interface => {
      if (json === undefined || json === null) {
        return json;
      }
      return {};
    },
  };

  public static Let = {
    toJson: (model: Let): any => {
      if (model === undefined || model === null) {
        return model;
      }
      return {};
    },
    fromJson: (json: any): Let => {
      if (json === undefined || json === null) {
        return json;
      }
      return {};
    },
  };

  public static Module = {
    toJson: (model: Module): any => {
      if (model === undefined || model === null) {
        return model;
      }
      return {};
    },
    fromJson: (json: any): Module => {
      if (json === undefined || json === null) {
        return json;
      }
      return {};
    },
  };

  public static Namespace = {
    toJson: (model: Namespace): any => {
      if (model === undefined || model === null) {
        return model;
      }
      return {};
    },
    fromJson: (json: any): Namespace => {
      if (json === undefined || json === null) {
        return json;
      }
      return {};
    },
  };

  public static New = {
    toJson: (model: New): any => {
      if (model === undefined || model === null) {
        return model;
      }
      return {};
    },
    fromJson: (json: any): New => {
      if (json === undefined || json === null) {
        return json;
      }
      return {};
    },
  };

  public static Null = {
    toJson: (model: Null): any => {
      if (model === undefined || model === null) {
        return model;
      }
      return {};
    },
    fromJson: (json: any): Null => {
      if (json === undefined || json === null) {
        return json;
      }
      return {};
    },
  };

  public static Of = {
    toJson: (model: Of): any => {
      if (model === undefined || model === null) {
        return model;
      }
      return {};
    },
    fromJson: (json: any): Of => {
      if (json === undefined || json === null) {
        return json;
      }
      return {};
    },
  };

  public static ReservedProperties = {
    toJson: (model: ReservedProperties): any => {
      if (model === undefined || model === null) {
        return model;
      }
      return {
        ...(model.for === undefined
          ? {}
          : {
              for: model.for,
            }),
        ...(model.while === undefined
          ? {}
          : {
              while: model.while,
            }),
        ...(model.if === undefined
          ? {}
          : {
              if: model.if,
            }),
        ...(model.else === undefined
          ? {}
          : {
              else: model.else,
            }),
        ...(model.function === undefined
          ? {}
          : {
              function: model.function,
            }),
        ...(model.var === undefined
          ? {}
          : {
              var: model.var,
            }),
        ...(model.let === undefined
          ? {}
          : {
              let: model.let,
            }),
        ...(model.const === undefined
          ? {}
          : {
              const: model.const,
            }),
        ...(model.return === undefined
          ? {}
          : {
              return: model.return,
            }),
        ...(model.break === undefined
          ? {}
          : {
              break: model.break,
            }),
        ...(model.continue === undefined
          ? {}
          : {
              continue: model.continue,
            }),
        ...(model.switch === undefined
          ? {}
          : {
              switch: model.switch,
            }),
        ...(model.case === undefined
          ? {}
          : {
              case: model.case,
            }),
        ...(model.default === undefined
          ? {}
          : {
              default: model.default,
            }),
        ...(model.try === undefined
          ? {}
          : {
              try: model.try,
            }),
        ...(model.catch === undefined
          ? {}
          : {
              catch: model.catch,
            }),
        ...(model.finally === undefined
          ? {}
          : {
              finally: model.finally,
            }),
        ...(model.throw === undefined
          ? {}
          : {
              throw: model.throw,
            }),
        ...(model.new === undefined
          ? {}
          : {
              new: model.new,
            }),
        ...(model.this === undefined
          ? {}
          : {
              this: model.this,
            }),
        ...(model.super === undefined
          ? {}
          : {
              super: model.super,
            }),
        ...(model.class === undefined
          ? {}
          : {
              class: model.class,
            }),
        ...(model.extends === undefined
          ? {}
          : {
              extends: model.extends,
            }),
        ...(model.implements === undefined
          ? {}
          : {
              implements: model.implements,
            }),
        ...(model.interface === undefined
          ? {}
          : {
              interface: model.interface,
            }),
        ...(model.enum === undefined
          ? {}
          : {
              enum: model.enum,
            }),
        ...(model.type === undefined
          ? {}
          : {
              type: model.type,
            }),
        ...(model.namespace === undefined
          ? {}
          : {
              namespace: model.namespace,
            }),
        ...(model.module === undefined
          ? {}
          : {
              module: model.module,
            }),
        ...(model.import === undefined
          ? {}
          : {
              import: model.import,
            }),
        ...(model.export === undefined
          ? {}
          : {
              export: model.export,
            }),
        ...(model.from === undefined
          ? {}
          : {
              from: model.from,
            }),
        ...(model.as === undefined
          ? {}
          : {
              as: model.as,
            }),
        ...(model.async === undefined
          ? {}
          : {
              async: model.async,
            }),
        ...(model.await === undefined
          ? {}
          : {
              await: model.await,
            }),
        ...(model.yield === undefined
          ? {}
          : {
              yield: model.yield,
            }),
        ...(model.typeof === undefined
          ? {}
          : {
              typeof: model.typeof,
            }),
        ...(model.instanceof === undefined
          ? {}
          : {
              instanceof: model.instanceof,
            }),
        ...(model.in === undefined
          ? {}
          : {
              in: model.in,
            }),
        ...(model.of === undefined
          ? {}
          : {
              of: model.of,
            }),
        ...(model.with === undefined
          ? {}
          : {
              with: model.with,
            }),
        ...(model.do === undefined
          ? {}
          : {
              do: model.do,
            }),
        ...(model.null === undefined
          ? {}
          : {
              null: model.null,
            }),
        ...(model.undefined === undefined
          ? {}
          : {
              undefined: model.undefined,
            }),
        ...(model.true === undefined
          ? {}
          : {
              true: model.true,
            }),
        ...(model.false === undefined
          ? {}
          : {
              false: model.false,
            }),
      };
    },
    fromJson: (json: any): ReservedProperties => {
      if (json === undefined || json === null) {
        return json;
      }
      return {
        ...(json['for'] === undefined
          ? {}
          : {
              for: json['for'],
            }),
        while: json['while'],
        if: json['if'],
        else: json['else'],
        function: json['function'],
        ...(json['var'] === undefined
          ? {}
          : {
              var: json['var'],
            }),
        ...(json['let'] === undefined
          ? {}
          : {
              let: json['let'],
            }),
        ...(json['const'] === undefined
          ? {}
          : {
              const: json['const'],
            }),
        ...(json['return'] === undefined
          ? {}
          : {
              return: json['return'],
            }),
        ...(json['break'] === undefined
          ? {}
          : {
              break: json['break'],
            }),
        ...(json['continue'] === undefined
          ? {}
          : {
              continue: json['continue'],
            }),
        ...(json['switch'] === undefined
          ? {}
          : {
              switch: json['switch'],
            }),
        ...(json['case'] === undefined
          ? {}
          : {
              case: json['case'],
            }),
        ...(json['default'] === undefined
          ? {}
          : {
              default: json['default'],
            }),
        ...(json['try'] === undefined
          ? {}
          : {
              try: json['try'],
            }),
        ...(json['catch'] === undefined
          ? {}
          : {
              catch: json['catch'],
            }),
        ...(json['finally'] === undefined
          ? {}
          : {
              finally: json['finally'],
            }),
        ...(json['throw'] === undefined
          ? {}
          : {
              throw: json['throw'],
            }),
        ...(json['new'] === undefined
          ? {}
          : {
              new: json['new'],
            }),
        ...(json['this'] === undefined
          ? {}
          : {
              this: json['this'],
            }),
        ...(json['super'] === undefined
          ? {}
          : {
              super: json['super'],
            }),
        ...(json['class'] === undefined
          ? {}
          : {
              class: json['class'],
            }),
        ...(json['extends'] === undefined
          ? {}
          : {
              extends: json['extends'],
            }),
        ...(json['implements'] === undefined
          ? {}
          : {
              implements: json['implements'],
            }),
        ...(json['interface'] === undefined
          ? {}
          : {
              interface: json['interface'],
            }),
        ...(json['enum'] === undefined
          ? {}
          : {
              enum: json['enum'],
            }),
        ...(json['type'] === undefined
          ? {}
          : {
              type: json['type'],
            }),
        ...(json['namespace'] === undefined
          ? {}
          : {
              namespace: json['namespace'],
            }),
        ...(json['module'] === undefined
          ? {}
          : {
              module: json['module'],
            }),
        ...(json['import'] === undefined
          ? {}
          : {
              import: json['import'],
            }),
        ...(json['export'] === undefined
          ? {}
          : {
              export: json['export'],
            }),
        ...(json['from'] === undefined
          ? {}
          : {
              from: json['from'],
            }),
        ...(json['as'] === undefined
          ? {}
          : {
              as: json['as'],
            }),
        ...(json['async'] === undefined
          ? {}
          : {
              async: json['async'],
            }),
        ...(json['await'] === undefined
          ? {}
          : {
              await: json['await'],
            }),
        ...(json['yield'] === undefined
          ? {}
          : {
              yield: json['yield'],
            }),
        ...(json['typeof'] === undefined
          ? {}
          : {
              typeof: json['typeof'],
            }),
        ...(json['instanceof'] === undefined
          ? {}
          : {
              instanceof: json['instanceof'],
            }),
        ...(json['in'] === undefined
          ? {}
          : {
              in: json['in'],
            }),
        ...(json['of'] === undefined
          ? {}
          : {
              of: json['of'],
            }),
        ...(json['with'] === undefined
          ? {}
          : {
              with: json['with'],
            }),
        ...(json['do'] === undefined
          ? {}
          : {
              do: json['do'],
            }),
        ...(json['null'] === undefined
          ? {}
          : {
              null: json['null'],
            }),
        ...(json['undefined'] === undefined
          ? {}
          : {
              undefined: json['undefined'],
            }),
        ...(json['true'] === undefined
          ? {}
          : {
              true: json['true'],
            }),
        ...(json['false'] === undefined
          ? {}
          : {
              false: json['false'],
            }),
      };
    },
  };

  public static Return = {
    toJson: (model: Return): any => {
      if (model === undefined || model === null) {
        return model;
      }
      return {};
    },
    fromJson: (json: any): Return => {
      if (json === undefined || json === null) {
        return json;
      }
      return {};
    },
  };

  public static Super = {
    toJson: (model: Super): any => {
      if (model === undefined || model === null) {
        return model;
      }
      return {};
    },
    fromJson: (json: any): Super => {
      if (json === undefined || json === null) {
        return json;
      }
      return {};
    },
  };

  public static Switch = {
    toJson: (model: Switch): any => {
      if (model === undefined || model === null) {
        return model;
      }
      return {};
    },
    fromJson: (json: any): Switch => {
      if (json === undefined || json === null) {
        return json;
      }
      return {};
    },
  };

  public static This = {
    toJson: (model: This): any => {
      if (model === undefined || model === null) {
        return model;
      }
      return {};
    },
    fromJson: (json: any): This => {
      if (json === undefined || json === null) {
        return json;
      }
      return {};
    },
  };

  public static Throw = {
    toJson: (model: Throw): any => {
      if (model === undefined || model === null) {
        return model;
      }
      return {};
    },
    fromJson: (json: any): Throw => {
      if (json === undefined || json === null) {
        return json;
      }
      return {};
    },
  };

  public static True = {
    toJson: (model: True): any => {
      if (model === undefined || model === null) {
        return model;
      }
      return {};
    },
    fromJson: (json: any): True => {
      if (json === undefined || json === null) {
        return json;
      }
      return {};
    },
  };

  public static Try = {
    toJson: (model: Try): any => {
      if (model === undefined || model === null) {
        return model;
      }
      return {};
    },
    fromJson: (json: any): Try => {
      if (json === undefined || json === null) {
        return json;
      }
      return {};
    },
  };

  public static Type = {
    toJson: (model: Type): any => {
      if (model === undefined || model === null) {
        return model;
      }
      return {};
    },
    fromJson: (json: any): Type => {
      if (json === undefined || json === null) {
        return json;
      }
      return {};
    },
  };

  public static Typeof = {
    toJson: (model: Typeof): any => {
      if (model === undefined || model === null) {
        return model;
      }
      return {};
    },
    fromJson: (json: any): Typeof => {
      if (json === undefined || json === null) {
        return json;
      }
      return {};
    },
  };

  public static Undefined = {
    toJson: (model: Undefined): any => {
      if (model === undefined || model === null) {
        return model;
      }
      return {};
    },
    fromJson: (json: any): Undefined => {
      if (json === undefined || json === null) {
        return json;
      }
      return {};
    },
  };

  public static Var = {
    toJson: (model: Var): any => {
      if (model === undefined || model === null) {
        return model;
      }
      return {};
    },
    fromJson: (json: any): Var => {
      if (json === undefined || json === null) {
        return json;
      }
      return {};
    },
  };

  public static While = {
    toJson: (model: While): any => {
      if (model === undefined || model === null) {
        return model;
      }
      return {};
    },
    fromJson: (json: any): While => {
      if (json === undefined || json === null) {
        return json;
      }
      return {};
    },
  };

  public static With = {
    toJson: (model: With): any => {
      if (model === undefined || model === null) {
        return model;
      }
      return {};
    },
    fromJson: (json: any): With => {
      if (json === undefined || json === null) {
        return json;
      }
      return {};
    },
  };

  public static Yield = {
    toJson: (model: Yield): any => {
      if (model === undefined || model === null) {
        return model;
      }
      return {};
    },
    fromJson: (json: any): Yield => {
      if (json === undefined || json === null) {
        return json;
      }
      return {};
    },
  };
}

/**
 * Client configuration for TestApi
 */
export interface TestApiConfig {
  /**
   * Base URL for the API
   */
  url: string;
  /**
   * Custom instance of fetch. By default the global 'fetch' is used.
   * You can override this to add custom middleware for use cases such as adding authentication headers.
   */
  fetch?: typeof fetch;
  /**
   * Additional configuration
   */
  options?: {
    /**
     * By default, the client will add a Content-Type header, set to the media type defined for
     * the request in the OpenAPI specification.
     * Set this to false to omit this header.
     */
    omitContentTypeHeader?: boolean;
  };
}

/**
 * API Client for TestApi
 */
export class TestApi {
  private $config: TestApiConfig;

  constructor(config: TestApiConfig) {
    this.$config = config;

    this.op = this.op.bind(this);
  }

  private $url = (
    path: string,
    pathParameters: { [key: string]: any },
    queryParameters: { [key: string]: any },
    collectionFormats?: { [key: string]: 'multi' | 'csv' },
  ): string => {
    const baseUrl = this.$config.url.endsWith('/')
      ? this.$config.url.slice(0, -1)
      : this.$config.url;
    const pathWithParameters = Object.entries(pathParameters).reduce(
      (withParams, [key, value]) =>
        withParams.replace(\`{\${key}}\`, encodeURIComponent(\`\${value}\`)),
      path,
    );
    const queryString = Object.entries(queryParameters)
      .map(([key, value]) => {
        if (Array.isArray(value) && collectionFormats?.[key] === 'multi') {
          return value
            .map(
              (v) => \`\${encodeURIComponent(key)}=\${encodeURIComponent(\`\${v}\`)}\`,
            )
            .join('&');
        }
        return \`\${encodeURIComponent(key)}=\${encodeURIComponent(Array.isArray(value) ? value.map(String).join(',') : String(value))}\`;
      })
      .join('&');
    return (
      baseUrl + pathWithParameters + (queryString ? \`?\${queryString}\` : '')
    );
  };

  private $headers = (
    headerParameters: { [key: string]: any },
    collectionFormats?: { [key: string]: 'multi' | 'csv' },
  ): [string, string][] => {
    return Object.entries(headerParameters).flatMap(([key, value]) => {
      if (Array.isArray(value) && collectionFormats?.[key] === 'multi') {
        return value.map((v) => [key, String(v)]) as [string, string][];
      }
      return [[key, String(value)]];
    });
  };

  private $fetch: typeof fetch = (...args) =>
    (this.$config.fetch ?? fetch)(...args);

  public async op(input: OpRequest): Promise<string> {
    const pathParameters: { [key: string]: any } = {};
    const queryParameters: { [key: string]: any } = {};
    const headerParameters: { [key: string]: any } = {};
    if (!this.$config.options?.omitContentTypeHeader) {
      headerParameters['Content-Type'] = 'application/json';
    }
    const body =
      typeof input === 'object'
        ? JSON.stringify($IO.ReservedProperties.toJson(input))
        : String($IO.ReservedProperties.toJson(input));

    const response = await this.$fetch(
      this.$url('/op', pathParameters, queryParameters),
      {
        headers: this.$headers(headerParameters),
        method: 'POST',
        body,
      },
    );

    if (response.status === 200) {
      return await response.text();
    }
    throw new Error(
      \`Unknown response status \${response.status} returned by API\`,
    );
  }
}
"
`;
