// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`openApiTsClientGenerator - requests > should generate valid TypeScript for parameters and responses 1`] = `
"export type GetTest200Response = {
  result?: string;
};
export type GetTest400Response = {
  error?: string;
};
export type GetTestRequestHeaderParameters = {
  xApiKey: string;
};
export type GetTestRequestPathParameters = {
  id: string;
};
export type GetTestRequestQueryParameters = {
  filter?: string;
  tags?: Array<string>;
};

export type GetTestRequest = GetTestRequestPathParameters &
  GetTestRequestHeaderParameters &
  GetTestRequestQueryParameters;
export type GetTest400Error = {
  status: 400;
  error: GetTest400Response;
};
export type GetTest404Error = {
  status: 404;
  error: void;
};
export type GetTestError = GetTest400Error | GetTest404Error;
"
`;

exports[`openApiTsClientGenerator - requests > should generate valid TypeScript for parameters and responses 2`] = `
"import type {
  GetTest200Response,
  GetTest400Response,
  GetTestRequestHeaderParameters,
  GetTestRequestPathParameters,
  GetTestRequestQueryParameters,
  GetTestRequest,
} from './types.gen.js';

/**
 * Utility for serialisation and deserialisation of API types.
 */
export class $IO {
  protected static $mapValues = (data: any, fn: (item: any) => any) =>
    Object.fromEntries(Object.entries(data).map(([k, v]) => [k, fn(v)]));

  public static GetTest200Response = {
    toJson: (model: GetTest200Response): any => {
      if (model === undefined || model === null) {
        return model;
      }
      return {
        ...(model.result === undefined
          ? {}
          : {
              result: model.result,
            }),
      };
    },
    fromJson: (json: any): GetTest200Response => {
      if (json === undefined || json === null) {
        return json;
      }
      return {
        ...(json['result'] === undefined
          ? {}
          : {
              result: json['result'],
            }),
      };
    },
  };

  public static GetTest400Response = {
    toJson: (model: GetTest400Response): any => {
      if (model === undefined || model === null) {
        return model;
      }
      return {
        ...(model.error === undefined
          ? {}
          : {
              error: model.error,
            }),
      };
    },
    fromJson: (json: any): GetTest400Response => {
      if (json === undefined || json === null) {
        return json;
      }
      return {
        ...(json['error'] === undefined
          ? {}
          : {
              error: json['error'],
            }),
      };
    },
  };

  public static GetTestRequestHeaderParameters = {
    toJson: (model: GetTestRequestHeaderParameters): any => {
      if (model === undefined || model === null) {
        return model;
      }
      return {
        ...(model.xApiKey === undefined
          ? {}
          : {
              'x-api-key': model.xApiKey,
            }),
      };
    },
    fromJson: (json: any): GetTestRequestHeaderParameters => {
      if (json === undefined || json === null) {
        return json;
      }
      return {
        xApiKey: json['x-api-key'],
      };
    },
  };

  public static GetTestRequestPathParameters = {
    toJson: (model: GetTestRequestPathParameters): any => {
      if (model === undefined || model === null) {
        return model;
      }
      return {
        ...(model.id === undefined
          ? {}
          : {
              id: model.id,
            }),
      };
    },
    fromJson: (json: any): GetTestRequestPathParameters => {
      if (json === undefined || json === null) {
        return json;
      }
      return {
        id: json['id'],
      };
    },
  };

  public static GetTestRequestQueryParameters = {
    toJson: (model: GetTestRequestQueryParameters): any => {
      if (model === undefined || model === null) {
        return model;
      }
      return {
        ...(model.filter === undefined
          ? {}
          : {
              filter: model.filter,
            }),
        ...(model.tags === undefined
          ? {}
          : {
              tags: model.tags,
            }),
      };
    },
    fromJson: (json: any): GetTestRequestQueryParameters => {
      if (json === undefined || json === null) {
        return json;
      }
      return {
        ...(json['filter'] === undefined
          ? {}
          : {
              filter: json['filter'],
            }),
        ...(json['tags'] === undefined
          ? {}
          : {
              tags: json['tags'],
            }),
      };
    },
  };
}

/**
 * Client configuration for TestApi
 */
export interface TestApiConfig {
  /**
   * Base URL for the API
   */
  url: string;
  /**
   * Custom instance of fetch. By default the global 'fetch' is used.
   * You can override this to add custom middleware for use cases such as adding authentication headers.
   */
  fetch?: typeof fetch;
  /**
   * Additional configuration
   */
  options?: {
    /**
     * By default, the client will add a Content-Type header, set to the media type defined for
     * the request in the OpenAPI specification.
     * Set this to false to omit this header.
     */
    omitContentTypeHeader?: boolean;
  };
}

/**
 * API Client for TestApi
 */
export class TestApi {
  private $config: TestApiConfig;

  constructor(config: TestApiConfig) {
    this.$config = config;

    this.getTest = this.getTest.bind(this);
  }

  private $url = (
    path: string,
    pathParameters: { [key: string]: any },
    queryParameters: { [key: string]: any },
    collectionFormats?: { [key: string]: 'multi' | 'csv' },
  ): string => {
    const baseUrl = this.$config.url.endsWith('/')
      ? this.$config.url.slice(0, -1)
      : this.$config.url;
    const pathWithParameters = Object.entries(pathParameters).reduce(
      (withParams, [key, value]) =>
        withParams.replace(\`{\${key}}\`, encodeURIComponent(\`\${value}\`)),
      path,
    );
    const queryString = Object.entries(queryParameters)
      .map(([key, value]) => {
        if (Array.isArray(value) && collectionFormats?.[key] === 'multi') {
          return value
            .map(
              (v) => \`\${encodeURIComponent(key)}=\${encodeURIComponent(\`\${v}\`)}\`,
            )
            .join('&');
        }
        return \`\${encodeURIComponent(key)}=\${encodeURIComponent(Array.isArray(value) ? value.map(String).join(',') : String(value))}\`;
      })
      .join('&');
    return (
      baseUrl + pathWithParameters + (queryString ? \`?\${queryString}\` : '')
    );
  };

  private $headers = (
    headerParameters: { [key: string]: any },
    collectionFormats?: { [key: string]: 'multi' | 'csv' },
  ): [string, string][] => {
    return Object.entries(headerParameters).flatMap(([key, value]) => {
      if (Array.isArray(value) && collectionFormats?.[key] === 'multi') {
        return value.map((v) => [key, String(v)]) as [string, string][];
      }
      return [[key, String(value)]];
    });
  };

  private $fetch: typeof fetch = (...args) =>
    (this.$config.fetch ?? fetch)(...args);

  public async getTest(input: GetTestRequest): Promise<GetTest200Response> {
    const pathParameters: { [key: string]: any } =
      $IO.GetTestRequestPathParameters.toJson(input);
    const queryParameters: { [key: string]: any } =
      $IO.GetTestRequestQueryParameters.toJson(input);
    const headerParameters: { [key: string]: any } =
      $IO.GetTestRequestHeaderParameters.toJson(input);
    const collectionFormats = {
      'x-api-key': 'csv',
      filter: 'multi',
      tags: 'multi',
    } as const;

    const body = undefined;

    const response = await this.$fetch(
      this.$url(
        '/test/{id}',
        pathParameters,
        queryParameters,
        collectionFormats,
      ),
      {
        headers: this.$headers(headerParameters, collectionFormats),
        method: 'GET',
        body,
      },
    );

    if (response.status === 200) {
      return $IO.GetTest200Response.fromJson(await response.json());
    }
    if (response.status === 400) {
      throw {
        status: response.status,
        error: $IO.GetTest400Response.fromJson(await response.json()),
      };
    }
    if (response.status === 404) {
      throw {
        status: response.status,
      };
    }
    throw new Error(
      \`Unknown response status \${response.status} returned by API\`,
    );
  }
}
"
`;

exports[`openApiTsClientGenerator - requests > should handle operations with simple request bodies and query parameters 1`] = `
"export type PostBooleanWithQueryRequestBodyParameters = {
  body?: boolean;
};
export type PostBooleanWithQueryRequestQueryParameters = {
  filter?: string;
};
export type PostNumberWithQueryRequestBodyParameters = {
  body?: number;
};
export type PostNumberWithQueryRequestQueryParameters = {
  filter?: string;
};
export type PostStringWithQueryRequestBodyParameters = {
  body?: string;
};
export type PostStringWithQueryRequestQueryParameters = {
  filter?: string;
};

export type PostBooleanRequest = boolean | undefined;
export type PostBooleanError = never;

export type PostBooleanWithQueryRequest =
  PostBooleanWithQueryRequestQueryParameters &
    PostBooleanWithQueryRequestBodyParameters;
export type PostBooleanWithQueryError = never;

export type PostNumberRequest = number | undefined;
export type PostNumberError = never;

export type PostNumberWithQueryRequest =
  PostNumberWithQueryRequestQueryParameters &
    PostNumberWithQueryRequestBodyParameters;
export type PostNumberWithQueryError = never;

export type PostStringRequest = string | undefined;
export type PostStringError = never;

export type PostStringWithQueryRequest =
  PostStringWithQueryRequestQueryParameters &
    PostStringWithQueryRequestBodyParameters;
export type PostStringWithQueryError = never;
"
`;

exports[`openApiTsClientGenerator - requests > should handle operations with simple request bodies and query parameters 2`] = `
"import type {
  PostBooleanWithQueryRequestBodyParameters,
  PostBooleanWithQueryRequestQueryParameters,
  PostNumberWithQueryRequestBodyParameters,
  PostNumberWithQueryRequestQueryParameters,
  PostStringWithQueryRequestBodyParameters,
  PostStringWithQueryRequestQueryParameters,
  PostBooleanRequest,
  PostBooleanWithQueryRequest,
  PostNumberRequest,
  PostNumberWithQueryRequest,
  PostStringRequest,
  PostStringWithQueryRequest,
} from './types.gen.js';

/**
 * Utility for serialisation and deserialisation of API types.
 */
export class $IO {
  protected static $mapValues = (data: any, fn: (item: any) => any) =>
    Object.fromEntries(Object.entries(data).map(([k, v]) => [k, fn(v)]));

  public static PostBooleanWithQueryRequestBodyParameters = {
    toJson: (model: PostBooleanWithQueryRequestBodyParameters): any => {
      if (model === undefined || model === null) {
        return model;
      }
      return {
        ...(model.body === undefined
          ? {}
          : {
              body: model.body,
            }),
      };
    },
    fromJson: (json: any): PostBooleanWithQueryRequestBodyParameters => {
      if (json === undefined || json === null) {
        return json;
      }
      return {
        ...(json['body'] === undefined
          ? {}
          : {
              body: json['body'],
            }),
      };
    },
  };

  public static PostBooleanWithQueryRequestQueryParameters = {
    toJson: (model: PostBooleanWithQueryRequestQueryParameters): any => {
      if (model === undefined || model === null) {
        return model;
      }
      return {
        ...(model.filter === undefined
          ? {}
          : {
              filter: model.filter,
            }),
      };
    },
    fromJson: (json: any): PostBooleanWithQueryRequestQueryParameters => {
      if (json === undefined || json === null) {
        return json;
      }
      return {
        ...(json['filter'] === undefined
          ? {}
          : {
              filter: json['filter'],
            }),
      };
    },
  };

  public static PostNumberWithQueryRequestBodyParameters = {
    toJson: (model: PostNumberWithQueryRequestBodyParameters): any => {
      if (model === undefined || model === null) {
        return model;
      }
      return {
        ...(model.body === undefined
          ? {}
          : {
              body: model.body,
            }),
      };
    },
    fromJson: (json: any): PostNumberWithQueryRequestBodyParameters => {
      if (json === undefined || json === null) {
        return json;
      }
      return {
        ...(json['body'] === undefined
          ? {}
          : {
              body: json['body'],
            }),
      };
    },
  };

  public static PostNumberWithQueryRequestQueryParameters = {
    toJson: (model: PostNumberWithQueryRequestQueryParameters): any => {
      if (model === undefined || model === null) {
        return model;
      }
      return {
        ...(model.filter === undefined
          ? {}
          : {
              filter: model.filter,
            }),
      };
    },
    fromJson: (json: any): PostNumberWithQueryRequestQueryParameters => {
      if (json === undefined || json === null) {
        return json;
      }
      return {
        ...(json['filter'] === undefined
          ? {}
          : {
              filter: json['filter'],
            }),
      };
    },
  };

  public static PostStringWithQueryRequestBodyParameters = {
    toJson: (model: PostStringWithQueryRequestBodyParameters): any => {
      if (model === undefined || model === null) {
        return model;
      }
      return {
        ...(model.body === undefined
          ? {}
          : {
              body: model.body,
            }),
      };
    },
    fromJson: (json: any): PostStringWithQueryRequestBodyParameters => {
      if (json === undefined || json === null) {
        return json;
      }
      return {
        ...(json['body'] === undefined
          ? {}
          : {
              body: json['body'],
            }),
      };
    },
  };

  public static PostStringWithQueryRequestQueryParameters = {
    toJson: (model: PostStringWithQueryRequestQueryParameters): any => {
      if (model === undefined || model === null) {
        return model;
      }
      return {
        ...(model.filter === undefined
          ? {}
          : {
              filter: model.filter,
            }),
      };
    },
    fromJson: (json: any): PostStringWithQueryRequestQueryParameters => {
      if (json === undefined || json === null) {
        return json;
      }
      return {
        ...(json['filter'] === undefined
          ? {}
          : {
              filter: json['filter'],
            }),
      };
    },
  };
}

/**
 * Client configuration for TestApi
 */
export interface TestApiConfig {
  /**
   * Base URL for the API
   */
  url: string;
  /**
   * Custom instance of fetch. By default the global 'fetch' is used.
   * You can override this to add custom middleware for use cases such as adding authentication headers.
   */
  fetch?: typeof fetch;
  /**
   * Additional configuration
   */
  options?: {
    /**
     * By default, the client will add a Content-Type header, set to the media type defined for
     * the request in the OpenAPI specification.
     * Set this to false to omit this header.
     */
    omitContentTypeHeader?: boolean;
  };
}

/**
 * API Client for TestApi
 */
export class TestApi {
  private $config: TestApiConfig;

  constructor(config: TestApiConfig) {
    this.$config = config;

    this.postBoolean = this.postBoolean.bind(this);
    this.postBooleanWithQuery = this.postBooleanWithQuery.bind(this);
    this.postNumber = this.postNumber.bind(this);
    this.postNumberWithQuery = this.postNumberWithQuery.bind(this);
    this.postString = this.postString.bind(this);
    this.postStringWithQuery = this.postStringWithQuery.bind(this);
  }

  private $url = (
    path: string,
    pathParameters: { [key: string]: any },
    queryParameters: { [key: string]: any },
    collectionFormats?: { [key: string]: 'multi' | 'csv' },
  ): string => {
    const baseUrl = this.$config.url.endsWith('/')
      ? this.$config.url.slice(0, -1)
      : this.$config.url;
    const pathWithParameters = Object.entries(pathParameters).reduce(
      (withParams, [key, value]) =>
        withParams.replace(\`{\${key}}\`, encodeURIComponent(\`\${value}\`)),
      path,
    );
    const queryString = Object.entries(queryParameters)
      .map(([key, value]) => {
        if (Array.isArray(value) && collectionFormats?.[key] === 'multi') {
          return value
            .map(
              (v) => \`\${encodeURIComponent(key)}=\${encodeURIComponent(\`\${v}\`)}\`,
            )
            .join('&');
        }
        return \`\${encodeURIComponent(key)}=\${encodeURIComponent(Array.isArray(value) ? value.map(String).join(',') : String(value))}\`;
      })
      .join('&');
    return (
      baseUrl + pathWithParameters + (queryString ? \`?\${queryString}\` : '')
    );
  };

  private $headers = (
    headerParameters: { [key: string]: any },
    collectionFormats?: { [key: string]: 'multi' | 'csv' },
  ): [string, string][] => {
    return Object.entries(headerParameters).flatMap(([key, value]) => {
      if (Array.isArray(value) && collectionFormats?.[key] === 'multi') {
        return value.map((v) => [key, String(v)]) as [string, string][];
      }
      return [[key, String(value)]];
    });
  };

  private $fetch: typeof fetch = (...args) =>
    (this.$config.fetch ?? fetch)(...args);

  public async postBoolean(input?: PostBooleanRequest): Promise<string> {
    const pathParameters: { [key: string]: any } = {};
    const queryParameters: { [key: string]: any } = {};
    const headerParameters: { [key: string]: any } = {};
    if (!this.$config.options?.omitContentTypeHeader) {
      headerParameters['Content-Type'] = 'application/json';
    }
    const body = input === undefined ? undefined : String(input);

    const response = await this.$fetch(
      this.$url('/boolean', pathParameters, queryParameters),
      {
        headers: this.$headers(headerParameters),
        method: 'POST',
        body,
      },
    );

    if (response.status === 200) {
      return await response.text();
    }
    throw new Error(
      \`Unknown response status \${response.status} returned by API\`,
    );
  }

  public async postBooleanWithQuery(
    input: PostBooleanWithQueryRequest,
  ): Promise<string> {
    const pathParameters: { [key: string]: any } = {};
    const queryParameters: { [key: string]: any } =
      $IO.PostBooleanWithQueryRequestQueryParameters.toJson(input);
    const headerParameters: { [key: string]: any } = {};
    if (!this.$config.options?.omitContentTypeHeader) {
      headerParameters['Content-Type'] = 'application/json';
    }
    const collectionFormats = {
      filter: 'multi',
    } as const;
    const body = input === undefined ? undefined : String(input.body);

    const response = await this.$fetch(
      this.$url(
        '/boolean-with-query',
        pathParameters,
        queryParameters,
        collectionFormats,
      ),
      {
        headers: this.$headers(headerParameters, collectionFormats),
        method: 'POST',
        body,
      },
    );

    if (response.status === 200) {
      return await response.text();
    }
    throw new Error(
      \`Unknown response status \${response.status} returned by API\`,
    );
  }

  public async postNumber(input?: PostNumberRequest): Promise<string> {
    const pathParameters: { [key: string]: any } = {};
    const queryParameters: { [key: string]: any } = {};
    const headerParameters: { [key: string]: any } = {};
    if (!this.$config.options?.omitContentTypeHeader) {
      headerParameters['Content-Type'] = 'application/json';
    }
    const body = input === undefined ? undefined : String(input);

    const response = await this.$fetch(
      this.$url('/number', pathParameters, queryParameters),
      {
        headers: this.$headers(headerParameters),
        method: 'POST',
        body,
      },
    );

    if (response.status === 200) {
      return await response.text();
    }
    throw new Error(
      \`Unknown response status \${response.status} returned by API\`,
    );
  }

  public async postNumberWithQuery(
    input: PostNumberWithQueryRequest,
  ): Promise<string> {
    const pathParameters: { [key: string]: any } = {};
    const queryParameters: { [key: string]: any } =
      $IO.PostNumberWithQueryRequestQueryParameters.toJson(input);
    const headerParameters: { [key: string]: any } = {};
    if (!this.$config.options?.omitContentTypeHeader) {
      headerParameters['Content-Type'] = 'application/json';
    }
    const collectionFormats = {
      filter: 'multi',
    } as const;
    const body = input === undefined ? undefined : String(input.body);

    const response = await this.$fetch(
      this.$url(
        '/number-with-query',
        pathParameters,
        queryParameters,
        collectionFormats,
      ),
      {
        headers: this.$headers(headerParameters, collectionFormats),
        method: 'POST',
        body,
      },
    );

    if (response.status === 200) {
      return await response.text();
    }
    throw new Error(
      \`Unknown response status \${response.status} returned by API\`,
    );
  }

  public async postString(input?: PostStringRequest): Promise<string> {
    const pathParameters: { [key: string]: any } = {};
    const queryParameters: { [key: string]: any } = {};
    const headerParameters: { [key: string]: any } = {};
    if (!this.$config.options?.omitContentTypeHeader) {
      headerParameters['Content-Type'] = 'application/json';
    }
    const body = input === undefined ? undefined : String(input);

    const response = await this.$fetch(
      this.$url('/string', pathParameters, queryParameters),
      {
        headers: this.$headers(headerParameters),
        method: 'POST',
        body,
      },
    );

    if (response.status === 200) {
      return await response.text();
    }
    throw new Error(
      \`Unknown response status \${response.status} returned by API\`,
    );
  }

  public async postStringWithQuery(
    input: PostStringWithQueryRequest,
  ): Promise<string> {
    const pathParameters: { [key: string]: any } = {};
    const queryParameters: { [key: string]: any } =
      $IO.PostStringWithQueryRequestQueryParameters.toJson(input);
    const headerParameters: { [key: string]: any } = {};
    if (!this.$config.options?.omitContentTypeHeader) {
      headerParameters['Content-Type'] = 'application/json';
    }
    const collectionFormats = {
      filter: 'multi',
    } as const;
    const body = input === undefined ? undefined : String(input.body);

    const response = await this.$fetch(
      this.$url(
        '/string-with-query',
        pathParameters,
        queryParameters,
        collectionFormats,
      ),
      {
        headers: this.$headers(headerParameters, collectionFormats),
        method: 'POST',
        body,
      },
    );

    if (response.status === 200) {
      return await response.text();
    }
    throw new Error(
      \`Unknown response status \${response.status} returned by API\`,
    );
  }
}
"
`;

exports[`openApiTsClientGenerator - requests > should handle request body property matching query parameter name 1`] = `
"export type PostTest200Response = {
  result?: string;
};
export type PostTestRequestBodyParameters = {
  body?: PostTestRequestContent;
};
export type PostTestRequestContent = {
  filter: PostTestRequestContentFilter;
  data: string;
};
export type PostTestRequestContentFilter = {
  value?: string;
};
export type PostTestRequestQueryParameters = {
  filter?: string;
};

export type PostTestRequest = PostTestRequestQueryParameters &
  PostTestRequestBodyParameters;
export type PostTestError = never;
"
`;

exports[`openApiTsClientGenerator - requests > should handle request body property matching query parameter name 2`] = `
"import type {
  PostTest200Response,
  PostTestRequestBodyParameters,
  PostTestRequestContent,
  PostTestRequestContentFilter,
  PostTestRequestQueryParameters,
  PostTestRequest,
} from './types.gen.js';

/**
 * Utility for serialisation and deserialisation of API types.
 */
export class $IO {
  protected static $mapValues = (data: any, fn: (item: any) => any) =>
    Object.fromEntries(Object.entries(data).map(([k, v]) => [k, fn(v)]));

  public static PostTest200Response = {
    toJson: (model: PostTest200Response): any => {
      if (model === undefined || model === null) {
        return model;
      }
      return {
        ...(model.result === undefined
          ? {}
          : {
              result: model.result,
            }),
      };
    },
    fromJson: (json: any): PostTest200Response => {
      if (json === undefined || json === null) {
        return json;
      }
      return {
        ...(json['result'] === undefined
          ? {}
          : {
              result: json['result'],
            }),
      };
    },
  };

  public static PostTestRequestBodyParameters = {
    toJson: (model: PostTestRequestBodyParameters): any => {
      if (model === undefined || model === null) {
        return model;
      }
      return {
        ...(model.body === undefined
          ? {}
          : {
              body: $IO.PostTestRequestContent.toJson(model.body),
            }),
      };
    },
    fromJson: (json: any): PostTestRequestBodyParameters => {
      if (json === undefined || json === null) {
        return json;
      }
      return {
        ...(json['body'] === undefined
          ? {}
          : {
              body: $IO.PostTestRequestContent.fromJson(json['body']),
            }),
      };
    },
  };

  public static PostTestRequestContent = {
    toJson: (model: PostTestRequestContent): any => {
      if (model === undefined || model === null) {
        return model;
      }
      return {
        ...(model.filter === undefined
          ? {}
          : {
              filter: $IO.PostTestRequestContentFilter.toJson(model.filter),
            }),
        ...(model.data === undefined
          ? {}
          : {
              data: model.data,
            }),
      };
    },
    fromJson: (json: any): PostTestRequestContent => {
      if (json === undefined || json === null) {
        return json;
      }
      return {
        filter: $IO.PostTestRequestContentFilter.fromJson(json['filter']),
        data: json['data'],
      };
    },
  };

  public static PostTestRequestContentFilter = {
    toJson: (model: PostTestRequestContentFilter): any => {
      if (model === undefined || model === null) {
        return model;
      }
      return {
        ...(model.value === undefined
          ? {}
          : {
              value: model.value,
            }),
      };
    },
    fromJson: (json: any): PostTestRequestContentFilter => {
      if (json === undefined || json === null) {
        return json;
      }
      return {
        ...(json['value'] === undefined
          ? {}
          : {
              value: json['value'],
            }),
      };
    },
  };

  public static PostTestRequestQueryParameters = {
    toJson: (model: PostTestRequestQueryParameters): any => {
      if (model === undefined || model === null) {
        return model;
      }
      return {
        ...(model.filter === undefined
          ? {}
          : {
              filter: model.filter,
            }),
      };
    },
    fromJson: (json: any): PostTestRequestQueryParameters => {
      if (json === undefined || json === null) {
        return json;
      }
      return {
        ...(json['filter'] === undefined
          ? {}
          : {
              filter: json['filter'],
            }),
      };
    },
  };
}

/**
 * Client configuration for TestApi
 */
export interface TestApiConfig {
  /**
   * Base URL for the API
   */
  url: string;
  /**
   * Custom instance of fetch. By default the global 'fetch' is used.
   * You can override this to add custom middleware for use cases such as adding authentication headers.
   */
  fetch?: typeof fetch;
  /**
   * Additional configuration
   */
  options?: {
    /**
     * By default, the client will add a Content-Type header, set to the media type defined for
     * the request in the OpenAPI specification.
     * Set this to false to omit this header.
     */
    omitContentTypeHeader?: boolean;
  };
}

/**
 * API Client for TestApi
 */
export class TestApi {
  private $config: TestApiConfig;

  constructor(config: TestApiConfig) {
    this.$config = config;

    this.postTest = this.postTest.bind(this);
  }

  private $url = (
    path: string,
    pathParameters: { [key: string]: any },
    queryParameters: { [key: string]: any },
    collectionFormats?: { [key: string]: 'multi' | 'csv' },
  ): string => {
    const baseUrl = this.$config.url.endsWith('/')
      ? this.$config.url.slice(0, -1)
      : this.$config.url;
    const pathWithParameters = Object.entries(pathParameters).reduce(
      (withParams, [key, value]) =>
        withParams.replace(\`{\${key}}\`, encodeURIComponent(\`\${value}\`)),
      path,
    );
    const queryString = Object.entries(queryParameters)
      .map(([key, value]) => {
        if (Array.isArray(value) && collectionFormats?.[key] === 'multi') {
          return value
            .map(
              (v) => \`\${encodeURIComponent(key)}=\${encodeURIComponent(\`\${v}\`)}\`,
            )
            .join('&');
        }
        return \`\${encodeURIComponent(key)}=\${encodeURIComponent(Array.isArray(value) ? value.map(String).join(',') : String(value))}\`;
      })
      .join('&');
    return (
      baseUrl + pathWithParameters + (queryString ? \`?\${queryString}\` : '')
    );
  };

  private $headers = (
    headerParameters: { [key: string]: any },
    collectionFormats?: { [key: string]: 'multi' | 'csv' },
  ): [string, string][] => {
    return Object.entries(headerParameters).flatMap(([key, value]) => {
      if (Array.isArray(value) && collectionFormats?.[key] === 'multi') {
        return value.map((v) => [key, String(v)]) as [string, string][];
      }
      return [[key, String(value)]];
    });
  };

  private $fetch: typeof fetch = (...args) =>
    (this.$config.fetch ?? fetch)(...args);

  public async postTest(input: PostTestRequest): Promise<PostTest200Response> {
    const pathParameters: { [key: string]: any } = {};
    const queryParameters: { [key: string]: any } =
      $IO.PostTestRequestQueryParameters.toJson(input);
    const headerParameters: { [key: string]: any } = {};
    if (!this.$config.options?.omitContentTypeHeader) {
      headerParameters['Content-Type'] = 'application/json';
    }
    const collectionFormats = {
      filter: 'multi',
    } as const;
    const body =
      input === undefined
        ? undefined
        : typeof input === 'object'
          ? JSON.stringify($IO.PostTestRequestBodyParameters.toJson(input).body)
          : String($IO.PostTestRequestBodyParameters.toJson(input).body);

    const response = await this.$fetch(
      this.$url('/test', pathParameters, queryParameters, collectionFormats),
      {
        headers: this.$headers(headerParameters, collectionFormats),
        method: 'POST',
        body,
      },
    );

    if (response.status === 200) {
      return $IO.PostTest200Response.fromJson(await response.json());
    }
    throw new Error(
      \`Unknown response status \${response.status} returned by API\`,
    );
  }
}
"
`;
