// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`openApiTsClientGenerator - complex types > should handle response objects with a mixture of properties and additionalProperties 1`] = `
"export type GetDynamicPropertiesAny200Response = {
  id: string;
  timestamp?: Date;
  [additionalProperties: string]: unknown;
};
export type GetDynamicPropertiesNested200Response = {
  id: string;
  version?: string;
  [
    additionalProperties: string
  ]: unknown /* GetDynamicPropertiesNested200ResponseValue */;
};
export type GetDynamicPropertiesNested200ResponseValue = {
  name: string;
  config?: { [key: string]: number };
};
export type GetDynamicPropertiesNumbers200Response = {
  id: string;
  name: string;
  [additionalProperties: string]: unknown /* number */;
};
export type GetDynamicPropertiesObjects200Response = {
  id: string;
  name: string;
  lastModifiedTimestamp?: Date;
  [
    additionalProperties: string
  ]: unknown /* GetDynamicPropertiesObjects200ResponseValue */;
};
export type GetDynamicPropertiesObjects200ResponseValue = {
  title: string;
  value: number;
  active?: boolean;
};
export type GetDynamicPropertyValues200Response = {
  [key: string]: GetDynamicPropertyValues200ResponseValue;
};
export type GetDynamicPropertyValues200ResponseValue = {
  value: string;
  metadata?: { [key: string]: unknown };
};
export type GetDynamicPropertiesAnyError = never;
export type GetDynamicPropertiesNestedError = never;
export type GetDynamicPropertiesNumbersError = never;
export type GetDynamicPropertiesObjectsError = never;
export type GetDynamicPropertyValuesError = never;
"
`;

exports[`openApiTsClientGenerator - complex types > should handle response objects with a mixture of properties and additionalProperties 2`] = `
"import type {
  GetDynamicPropertiesAny200Response,
  GetDynamicPropertiesNested200Response,
  GetDynamicPropertiesNested200ResponseValue,
  GetDynamicPropertiesNumbers200Response,
  GetDynamicPropertiesObjects200Response,
  GetDynamicPropertiesObjects200ResponseValue,
  GetDynamicPropertyValues200Response,
  GetDynamicPropertyValues200ResponseValue,
} from './types.gen.js';

/**
 * Utility for serialisation and deserialisation of API types.
 */
export class $IO {
  protected static $mapValues = (data: any, fn: (item: any) => any) =>
    Object.fromEntries(Object.entries(data).map(([k, v]) => [k, fn(v)]));

  public static GetDynamicPropertiesAny200Response = {
    toJson: (model: GetDynamicPropertiesAny200Response): any => {
      if (model === undefined || model === null) {
        return model;
      }
      return {
        ...$IO.$mapValues(
          Object.fromEntries(
            Object.entries(model).filter(
              ([key]) => !['id', 'timestamp'].includes(key),
            ),
          ),
          (additionalProperty) => additionalProperty,
        ),
        ...(model.id === undefined
          ? {}
          : {
              id: model.id,
            }),
        ...(model.timestamp === undefined
          ? {}
          : {
              timestamp: model.timestamp.toISOString(),
            }),
      };
    },
    fromJson: (json: any): GetDynamicPropertiesAny200Response => {
      if (json === undefined || json === null) {
        return json;
      }
      return {
        ...$IO.$mapValues(
          Object.fromEntries(
            Object.entries(json).filter(
              ([key]) => !['id', 'timestamp'].includes(key),
            ),
          ),
          (additionalProperty) => additionalProperty,
        ),
        id: json['id'],
        ...(json['timestamp'] === undefined
          ? {}
          : {
              timestamp: new Date(json['timestamp']),
            }),
      };
    },
  };

  public static GetDynamicPropertiesNested200Response = {
    toJson: (model: GetDynamicPropertiesNested200Response): any => {
      if (model === undefined || model === null) {
        return model;
      }
      return {
        ...$IO.$mapValues(
          Object.fromEntries(
            Object.entries(model).filter(
              ([key]) => !['id', 'version'].includes(key),
            ),
          ),
          (additionalProperty) =>
            $IO.GetDynamicPropertiesNested200ResponseValue.toJson(
              additionalProperty,
            ),
        ),
        ...(model.id === undefined
          ? {}
          : {
              id: model.id,
            }),
        ...(model.version === undefined
          ? {}
          : {
              version: model.version,
            }),
      };
    },
    fromJson: (json: any): GetDynamicPropertiesNested200Response => {
      if (json === undefined || json === null) {
        return json;
      }
      return {
        ...$IO.$mapValues(
          Object.fromEntries(
            Object.entries(json).filter(
              ([key]) => !['id', 'version'].includes(key),
            ),
          ),
          (additionalProperty) =>
            $IO.GetDynamicPropertiesNested200ResponseValue.fromJson(
              additionalProperty,
            ),
        ),
        id: json['id'],
        ...(json['version'] === undefined
          ? {}
          : {
              version: json['version'],
            }),
      };
    },
  };

  public static GetDynamicPropertiesNested200ResponseValue = {
    toJson: (model: GetDynamicPropertiesNested200ResponseValue): any => {
      if (model === undefined || model === null) {
        return model;
      }
      return {
        ...(model.name === undefined
          ? {}
          : {
              name: model.name,
            }),
        ...(model.config === undefined
          ? {}
          : {
              config: model.config,
            }),
      };
    },
    fromJson: (json: any): GetDynamicPropertiesNested200ResponseValue => {
      if (json === undefined || json === null) {
        return json;
      }
      return {
        name: json['name'],
        ...(json['config'] === undefined
          ? {}
          : {
              config: json['config'],
            }),
      };
    },
  };

  public static GetDynamicPropertiesNumbers200Response = {
    toJson: (model: GetDynamicPropertiesNumbers200Response): any => {
      if (model === undefined || model === null) {
        return model;
      }
      return {
        ...$IO.$mapValues(
          Object.fromEntries(
            Object.entries(model).filter(
              ([key]) => !['id', 'name'].includes(key),
            ),
          ),
          (additionalProperty) => additionalProperty,
        ),
        ...(model.id === undefined
          ? {}
          : {
              id: model.id,
            }),
        ...(model.name === undefined
          ? {}
          : {
              name: model.name,
            }),
      };
    },
    fromJson: (json: any): GetDynamicPropertiesNumbers200Response => {
      if (json === undefined || json === null) {
        return json;
      }
      return {
        ...$IO.$mapValues(
          Object.fromEntries(
            Object.entries(json).filter(
              ([key]) => !['id', 'name'].includes(key),
            ),
          ),
          (additionalProperty) => additionalProperty,
        ),
        id: json['id'],
        name: json['name'],
      };
    },
  };

  public static GetDynamicPropertiesObjects200Response = {
    toJson: (model: GetDynamicPropertiesObjects200Response): any => {
      if (model === undefined || model === null) {
        return model;
      }
      return {
        ...$IO.$mapValues(
          Object.fromEntries(
            Object.entries(model).filter(
              ([key]) => !['id', 'name', 'lastModifiedTimestamp'].includes(key),
            ),
          ),
          (additionalProperty) =>
            $IO.GetDynamicPropertiesObjects200ResponseValue.toJson(
              additionalProperty,
            ),
        ),
        ...(model.id === undefined
          ? {}
          : {
              id: model.id,
            }),
        ...(model.name === undefined
          ? {}
          : {
              name: model.name,
            }),
        ...(model.lastModifiedTimestamp === undefined
          ? {}
          : {
              last_modified_timestamp:
                model.lastModifiedTimestamp.toISOString(),
            }),
      };
    },
    fromJson: (json: any): GetDynamicPropertiesObjects200Response => {
      if (json === undefined || json === null) {
        return json;
      }
      return {
        ...$IO.$mapValues(
          Object.fromEntries(
            Object.entries(json).filter(
              ([key]) =>
                !['id', 'name', 'last_modified_timestamp'].includes(key),
            ),
          ),
          (additionalProperty) =>
            $IO.GetDynamicPropertiesObjects200ResponseValue.fromJson(
              additionalProperty,
            ),
        ),
        id: json['id'],
        name: json['name'],
        ...(json['last_modified_timestamp'] === undefined
          ? {}
          : {
              lastModifiedTimestamp: new Date(json['last_modified_timestamp']),
            }),
      };
    },
  };

  public static GetDynamicPropertiesObjects200ResponseValue = {
    toJson: (model: GetDynamicPropertiesObjects200ResponseValue): any => {
      if (model === undefined || model === null) {
        return model;
      }
      return {
        ...(model.title === undefined
          ? {}
          : {
              title: model.title,
            }),
        ...(model.value === undefined
          ? {}
          : {
              value: model.value,
            }),
        ...(model.active === undefined
          ? {}
          : {
              active: model.active,
            }),
      };
    },
    fromJson: (json: any): GetDynamicPropertiesObjects200ResponseValue => {
      if (json === undefined || json === null) {
        return json;
      }
      return {
        title: json['title'],
        value: json['value'],
        ...(json['active'] === undefined
          ? {}
          : {
              active: json['active'],
            }),
      };
    },
  };

  public static GetDynamicPropertyValues200Response = {
    toJson: (model: GetDynamicPropertyValues200Response): any => {
      if (model === undefined || model === null) {
        return model;
      }
      return {
        ...$IO.$mapValues(
          model,
          $IO.GetDynamicPropertyValues200ResponseValue.toJson,
        ),
      };
    },
    fromJson: (json: any): GetDynamicPropertyValues200Response => {
      if (json === undefined || json === null) {
        return json;
      }
      return {
        ...$IO.$mapValues(
          json,
          $IO.GetDynamicPropertyValues200ResponseValue.fromJson,
        ),
      };
    },
  };

  public static GetDynamicPropertyValues200ResponseValue = {
    toJson: (model: GetDynamicPropertyValues200ResponseValue): any => {
      if (model === undefined || model === null) {
        return model;
      }
      return {
        ...(model.value === undefined
          ? {}
          : {
              value: model.value,
            }),
        ...(model.metadata === undefined
          ? {}
          : {
              metadata: $IO.$mapValues(model.metadata, (item0) => item0),
            }),
      };
    },
    fromJson: (json: any): GetDynamicPropertyValues200ResponseValue => {
      if (json === undefined || json === null) {
        return json;
      }
      return {
        value: json['value'],
        ...(json['metadata'] === undefined
          ? {}
          : {
              metadata: $IO.$mapValues(json['metadata'], (item0) => item0),
            }),
      };
    },
  };
}

/**
 * Client configuration for TestApi
 */
export interface TestApiConfig {
  /**
   * Base URL for the API
   */
  url: string;
  /**
   * Custom instance of fetch. By default the global 'fetch' is used.
   * You can override this to add custom middleware for use cases such as adding authentication headers.
   */
  fetch?: typeof fetch;
  /**
   * Additional configuration
   */
  options?: {
    /**
     * By default, the client will add a Content-Type header, set to the media type defined for
     * the request in the OpenAPI specification.
     * Set this to false to omit this header.
     */
    omitContentTypeHeader?: boolean;
  };
}

/**
 * API Client for TestApi
 */
export class TestApi {
  private $config: TestApiConfig;

  constructor(config: TestApiConfig) {
    this.$config = config;

    this.getDynamicPropertiesAny = this.getDynamicPropertiesAny.bind(this);
    this.getDynamicPropertiesNested =
      this.getDynamicPropertiesNested.bind(this);
    this.getDynamicPropertiesNumbers =
      this.getDynamicPropertiesNumbers.bind(this);
    this.getDynamicPropertiesObjects =
      this.getDynamicPropertiesObjects.bind(this);
    this.getDynamicPropertyValues = this.getDynamicPropertyValues.bind(this);
  }

  private $url = (
    path: string,
    pathParameters: { [key: string]: any },
    queryParameters: { [key: string]: any },
    collectionFormats?: { [key: string]: 'multi' | 'csv' },
  ): string => {
    const baseUrl = this.$config.url.endsWith('/')
      ? this.$config.url.slice(0, -1)
      : this.$config.url;
    const pathWithParameters = Object.entries(pathParameters).reduce(
      (withParams, [key, value]) =>
        withParams.replace(\`{\${key}}\`, encodeURIComponent(\`\${value}\`)),
      path,
    );
    const queryString = Object.entries(queryParameters)
      .map(([key, value]) => {
        if (Array.isArray(value) && collectionFormats?.[key] === 'multi') {
          return value
            .map(
              (v) => \`\${encodeURIComponent(key)}=\${encodeURIComponent(\`\${v}\`)}\`,
            )
            .join('&');
        }
        return \`\${encodeURIComponent(key)}=\${encodeURIComponent(Array.isArray(value) ? value.map(String).join(',') : String(value))}\`;
      })
      .join('&');
    return (
      baseUrl + pathWithParameters + (queryString ? \`?\${queryString}\` : '')
    );
  };

  private $headers = (
    headerParameters: { [key: string]: any },
    collectionFormats?: { [key: string]: 'multi' | 'csv' },
  ): [string, string][] => {
    return Object.entries(headerParameters).flatMap(([key, value]) => {
      if (Array.isArray(value) && collectionFormats?.[key] === 'multi') {
        return value.map((v) => [key, String(v)]) as [string, string][];
      }
      return [[key, String(value)]];
    });
  };

  private $fetch: typeof fetch = (...args) =>
    (this.$config.fetch ?? fetch)(...args);

  public async getDynamicPropertiesAny(): Promise<GetDynamicPropertiesAny200Response> {
    const pathParameters: { [key: string]: any } = {};
    const queryParameters: { [key: string]: any } = {};
    const headerParameters: { [key: string]: any } = {};

    const body = undefined;

    const response = await this.$fetch(
      this.$url('/dynamic-properties-any', pathParameters, queryParameters),
      {
        headers: this.$headers(headerParameters),
        method: 'GET',
        body,
      },
    );

    if (response.status === 200) {
      return $IO.GetDynamicPropertiesAny200Response.fromJson(
        await response.json(),
      );
    }
    throw new Error(
      \`Unknown response status \${response.status} returned by API\`,
    );
  }

  public async getDynamicPropertiesNested(): Promise<GetDynamicPropertiesNested200Response> {
    const pathParameters: { [key: string]: any } = {};
    const queryParameters: { [key: string]: any } = {};
    const headerParameters: { [key: string]: any } = {};

    const body = undefined;

    const response = await this.$fetch(
      this.$url('/dynamic-properties-nested', pathParameters, queryParameters),
      {
        headers: this.$headers(headerParameters),
        method: 'GET',
        body,
      },
    );

    if (response.status === 200) {
      return $IO.GetDynamicPropertiesNested200Response.fromJson(
        await response.json(),
      );
    }
    throw new Error(
      \`Unknown response status \${response.status} returned by API\`,
    );
  }

  public async getDynamicPropertiesNumbers(): Promise<GetDynamicPropertiesNumbers200Response> {
    const pathParameters: { [key: string]: any } = {};
    const queryParameters: { [key: string]: any } = {};
    const headerParameters: { [key: string]: any } = {};

    const body = undefined;

    const response = await this.$fetch(
      this.$url('/dynamic-properties-numbers', pathParameters, queryParameters),
      {
        headers: this.$headers(headerParameters),
        method: 'GET',
        body,
      },
    );

    if (response.status === 200) {
      return $IO.GetDynamicPropertiesNumbers200Response.fromJson(
        await response.json(),
      );
    }
    throw new Error(
      \`Unknown response status \${response.status} returned by API\`,
    );
  }

  public async getDynamicPropertiesObjects(): Promise<GetDynamicPropertiesObjects200Response> {
    const pathParameters: { [key: string]: any } = {};
    const queryParameters: { [key: string]: any } = {};
    const headerParameters: { [key: string]: any } = {};

    const body = undefined;

    const response = await this.$fetch(
      this.$url('/dynamic-properties-objects', pathParameters, queryParameters),
      {
        headers: this.$headers(headerParameters),
        method: 'GET',
        body,
      },
    );

    if (response.status === 200) {
      return $IO.GetDynamicPropertiesObjects200Response.fromJson(
        await response.json(),
      );
    }
    throw new Error(
      \`Unknown response status \${response.status} returned by API\`,
    );
  }

  public async getDynamicPropertyValues(): Promise<GetDynamicPropertyValues200Response> {
    const pathParameters: { [key: string]: any } = {};
    const queryParameters: { [key: string]: any } = {};
    const headerParameters: { [key: string]: any } = {};

    const body = undefined;

    const response = await this.$fetch(
      this.$url('/dynamic-property-values', pathParameters, queryParameters),
      {
        headers: this.$headers(headerParameters),
        method: 'GET',
        body,
      },
    );

    if (response.status === 200) {
      return $IO.GetDynamicPropertyValues200Response.fromJson(
        await response.json(),
      );
    }
    throw new Error(
      \`Unknown response status \${response.status} returned by API\`,
    );
  }
}
"
`;

exports[`openApiTsClientGenerator - complex types > should handle response objects with patternProperties 1`] = `
"export type GetPatternPropertiesArrayArrays200Response = {
  id: string;
  matrix?: Array<Array<number>>;
  [additionalAndPatternProperties: string]: unknown;
};
export type GetPatternPropertiesArrayObjectDicts200Response = {
  id: string;
  objectDicts?: Array<{
    [
      key: string
    ]: GetPatternPropertiesArrayObjectDicts200ResponseObjectDictsItemValue;
  }>;
  [additionalAndPatternProperties: string]: unknown;
};
export type GetPatternPropertiesArrayObjectDicts200ResponseObjectDictsItemValue =
  {
    name?: string;
    value?: number;
  };
export type GetPatternPropertiesArrayObjectDicts200ResponseValueItemValue = {
  id?: string;
  count?: number;
};
export type GetPatternPropertiesArrayObjectDicts200ResponseX0ItemValue = {
  label?: string;
  enabled?: boolean;
};
export type GetPatternPropertiesArrayObjects200Response = {
  id: string;
  items?: Array<GetPatternPropertiesArrayObjects200ResponseItemsItem>;
  [additionalAndPatternProperties: string]: unknown;
};
export type GetPatternPropertiesArrayObjects200ResponseItemsItem = {
  name?: string;
  value?: number;
};
export type GetPatternPropertiesArrayObjects200ResponseValueItem = {
  id?: string;
  count?: number;
};
export type GetPatternPropertiesArrayObjects200ResponseX0Item = {
  label?: string;
  enabled?: boolean;
};
export type GetPatternPropertiesArrayPrimitives200Response = {
  id: string;
  stringArray?: Array<string>;
  numberArray?: Array<number>;
  [additionalAndPatternProperties: string]: unknown;
};
export type GetPatternPropertiesArrayStringDicts200Response = {
  id: string;
  dictionaries?: Array<{ [key: string]: string }>;
  [additionalAndPatternProperties: string]: unknown;
};
export type GetPatternPropertiesMixed200Response = {
  id: string;
  name: string;
  [additionalAndPatternProperties: string]: unknown;
};
export type GetPatternPropertiesMultiple200Response = {
  id: string;
  name: string;
  [patternProperties: string]: unknown;
};
export type GetPatternPropertiesNested200Response = {
  id: string;
  config?: GetPatternPropertiesNested200ResponseConfig;
};
export type GetPatternPropertiesNested200ResponseConfig = {
  [patternProperties: string]: unknown;
};
export type GetPatternPropertiesNested200ResponseConfigSetting0 = {
  isEnabled?: boolean;
  [patternProperties: string]: unknown;
};
export type GetPatternPropertiesNoProps200Response = {
  [additionalAndPatternProperties: string]: unknown;
};
export type GetPatternPropertiesOnly200Response = {
  [patternProperties: string]: unknown;
};
export type GetPatternPropertiesSingle200Response = {
  id: string;
  name: string;
  [patternProperties: string]: unknown;
};
export type GetPatternPropertiesArrayArraysError = never;
export type GetPatternPropertiesArrayObjectDictsError = never;
export type GetPatternPropertiesArrayObjectsError = never;
export type GetPatternPropertiesArrayPrimitivesError = never;
export type GetPatternPropertiesArrayStringDictsError = never;
export type GetPatternPropertiesMixedError = never;
export type GetPatternPropertiesMultipleError = never;
export type GetPatternPropertiesNestedError = never;
export type GetPatternPropertiesNoPropsError = never;
export type GetPatternPropertiesOnlyError = never;
export type GetPatternPropertiesSingleError = never;
"
`;

exports[`openApiTsClientGenerator - complex types > should handle response objects with patternProperties 2`] = `
"import type {
  GetPatternPropertiesArrayArrays200Response,
  GetPatternPropertiesArrayObjectDicts200Response,
  GetPatternPropertiesArrayObjectDicts200ResponseObjectDictsItemValue,
  GetPatternPropertiesArrayObjectDicts200ResponseValueItemValue,
  GetPatternPropertiesArrayObjectDicts200ResponseX0ItemValue,
  GetPatternPropertiesArrayObjects200Response,
  GetPatternPropertiesArrayObjects200ResponseItemsItem,
  GetPatternPropertiesArrayObjects200ResponseValueItem,
  GetPatternPropertiesArrayObjects200ResponseX0Item,
  GetPatternPropertiesArrayPrimitives200Response,
  GetPatternPropertiesArrayStringDicts200Response,
  GetPatternPropertiesMixed200Response,
  GetPatternPropertiesMultiple200Response,
  GetPatternPropertiesNested200Response,
  GetPatternPropertiesNested200ResponseConfig,
  GetPatternPropertiesNested200ResponseConfigSetting0,
  GetPatternPropertiesNoProps200Response,
  GetPatternPropertiesOnly200Response,
  GetPatternPropertiesSingle200Response,
} from './types.gen.js';

/**
 * Utility for serialisation and deserialisation of API types.
 */
export class $IO {
  protected static $mapValues = (data: any, fn: (item: any) => any) =>
    Object.fromEntries(Object.entries(data).map(([k, v]) => [k, fn(v)]));

  public static GetPatternPropertiesArrayArrays200Response = {
    toJson: (model: GetPatternPropertiesArrayArrays200Response): any => {
      if (model === undefined || model === null) {
        return model;
      }
      return {
        ...$IO.$mapValues(
          Object.fromEntries(
            Object.entries(model).filter(
              ([key]) => !['id', 'matrix'].includes(key) && /^x-/.test(key),
            ),
          ),
          (patternProperty) => patternProperty,
        ),
        ...$IO.$mapValues(
          Object.fromEntries(
            Object.entries(model).filter(
              ([key]) => !['id', 'matrix'].includes(key) && !/^x-/.test(key),
            ),
          ),
          (additionalProperty) => additionalProperty,
        ),
        ...(model.id === undefined
          ? {}
          : {
              id: model.id,
            }),
        ...(model.matrix === undefined
          ? {}
          : {
              matrix: model.matrix,
            }),
      };
    },
    fromJson: (json: any): GetPatternPropertiesArrayArrays200Response => {
      if (json === undefined || json === null) {
        return json;
      }
      return {
        ...$IO.$mapValues(
          Object.fromEntries(
            Object.entries(json).filter(
              ([key]) => !['id', 'matrix'].includes(key) && /^x-/.test(key),
            ),
          ),
          (patternProperty) => patternProperty,
        ),
        ...$IO.$mapValues(
          Object.fromEntries(
            Object.entries(json).filter(
              ([key]) => !['id', 'matrix'].includes(key) && !/^x-/.test(key),
            ),
          ),
          (additionalProperty) => additionalProperty,
        ),
        id: json['id'],
        ...(json['matrix'] === undefined
          ? {}
          : {
              matrix: json['matrix'],
            }),
      };
    },
  };

  public static GetPatternPropertiesArrayObjectDicts200Response = {
    toJson: (model: GetPatternPropertiesArrayObjectDicts200Response): any => {
      if (model === undefined || model === null) {
        return model;
      }
      return {
        ...$IO.$mapValues(
          Object.fromEntries(
            Object.entries(model).filter(
              ([key]) =>
                !['id', 'objectDicts'].includes(key) && /^x-/.test(key),
            ),
          ),
          (patternProperty) =>
            patternProperty.map((item0: any) =>
              $IO.$mapValues(
                item0,
                $IO.GetPatternPropertiesArrayObjectDicts200ResponseX0ItemValue
                  .toJson,
              ),
            ),
        ),
        ...$IO.$mapValues(
          Object.fromEntries(
            Object.entries(model).filter(
              ([key]) =>
                !['id', 'objectDicts'].includes(key) && !/^x-/.test(key),
            ),
          ),
          (additionalProperty) =>
            additionalProperty.map((item0: any) =>
              $IO.$mapValues(
                item0,
                $IO
                  .GetPatternPropertiesArrayObjectDicts200ResponseValueItemValue
                  .toJson,
              ),
            ),
        ),
        ...(model.id === undefined
          ? {}
          : {
              id: model.id,
            }),
        ...(model.objectDicts === undefined
          ? {}
          : {
              objectDicts: model.objectDicts.map((item0) =>
                $IO.$mapValues(
                  item0,
                  $IO
                    .GetPatternPropertiesArrayObjectDicts200ResponseObjectDictsItemValue
                    .toJson,
                ),
              ),
            }),
      };
    },
    fromJson: (json: any): GetPatternPropertiesArrayObjectDicts200Response => {
      if (json === undefined || json === null) {
        return json;
      }
      return {
        ...$IO.$mapValues(
          Object.fromEntries(
            Object.entries(json).filter(
              ([key]) =>
                !['id', 'objectDicts'].includes(key) && /^x-/.test(key),
            ),
          ),
          (patternProperty) =>
            (patternProperty as Array<any>).map((item0: any) =>
              $IO.$mapValues(
                item0,
                $IO.GetPatternPropertiesArrayObjectDicts200ResponseX0ItemValue
                  .fromJson,
              ),
            ),
        ),
        ...$IO.$mapValues(
          Object.fromEntries(
            Object.entries(json).filter(
              ([key]) =>
                !['id', 'objectDicts'].includes(key) && !/^x-/.test(key),
            ),
          ),
          (additionalProperty) =>
            (additionalProperty as Array<any>).map((item0: any) =>
              $IO.$mapValues(
                item0,
                $IO
                  .GetPatternPropertiesArrayObjectDicts200ResponseValueItemValue
                  .fromJson,
              ),
            ),
        ),
        id: json['id'],
        ...(json['objectDicts'] === undefined
          ? {}
          : {
              objectDicts: (json['objectDicts'] as Array<any>).map((item0) =>
                $IO.$mapValues(
                  item0,
                  $IO
                    .GetPatternPropertiesArrayObjectDicts200ResponseObjectDictsItemValue
                    .fromJson,
                ),
              ),
            }),
      };
    },
  };

  public static GetPatternPropertiesArrayObjectDicts200ResponseObjectDictsItemValue =
    {
      toJson: (
        model: GetPatternPropertiesArrayObjectDicts200ResponseObjectDictsItemValue,
      ): any => {
        if (model === undefined || model === null) {
          return model;
        }
        return {
          ...(model.name === undefined
            ? {}
            : {
                name: model.name,
              }),
          ...(model.value === undefined
            ? {}
            : {
                value: model.value,
              }),
        };
      },
      fromJson: (
        json: any,
      ): GetPatternPropertiesArrayObjectDicts200ResponseObjectDictsItemValue => {
        if (json === undefined || json === null) {
          return json;
        }
        return {
          ...(json['name'] === undefined
            ? {}
            : {
                name: json['name'],
              }),
          ...(json['value'] === undefined
            ? {}
            : {
                value: json['value'],
              }),
        };
      },
    };

  public static GetPatternPropertiesArrayObjectDicts200ResponseValueItemValue =
    {
      toJson: (
        model: GetPatternPropertiesArrayObjectDicts200ResponseValueItemValue,
      ): any => {
        if (model === undefined || model === null) {
          return model;
        }
        return {
          ...(model.id === undefined
            ? {}
            : {
                id: model.id,
              }),
          ...(model.count === undefined
            ? {}
            : {
                count: model.count,
              }),
        };
      },
      fromJson: (
        json: any,
      ): GetPatternPropertiesArrayObjectDicts200ResponseValueItemValue => {
        if (json === undefined || json === null) {
          return json;
        }
        return {
          ...(json['id'] === undefined
            ? {}
            : {
                id: json['id'],
              }),
          ...(json['count'] === undefined
            ? {}
            : {
                count: json['count'],
              }),
        };
      },
    };

  public static GetPatternPropertiesArrayObjectDicts200ResponseX0ItemValue = {
    toJson: (
      model: GetPatternPropertiesArrayObjectDicts200ResponseX0ItemValue,
    ): any => {
      if (model === undefined || model === null) {
        return model;
      }
      return {
        ...(model.label === undefined
          ? {}
          : {
              label: model.label,
            }),
        ...(model.enabled === undefined
          ? {}
          : {
              enabled: model.enabled,
            }),
      };
    },
    fromJson: (
      json: any,
    ): GetPatternPropertiesArrayObjectDicts200ResponseX0ItemValue => {
      if (json === undefined || json === null) {
        return json;
      }
      return {
        ...(json['label'] === undefined
          ? {}
          : {
              label: json['label'],
            }),
        ...(json['enabled'] === undefined
          ? {}
          : {
              enabled: json['enabled'],
            }),
      };
    },
  };

  public static GetPatternPropertiesArrayObjects200Response = {
    toJson: (model: GetPatternPropertiesArrayObjects200Response): any => {
      if (model === undefined || model === null) {
        return model;
      }
      return {
        ...$IO.$mapValues(
          Object.fromEntries(
            Object.entries(model).filter(
              ([key]) => !['id', 'items'].includes(key) && /^x-/.test(key),
            ),
          ),
          (patternProperty) =>
            patternProperty.map(
              $IO.GetPatternPropertiesArrayObjects200ResponseX0Item.toJson,
            ),
        ),
        ...$IO.$mapValues(
          Object.fromEntries(
            Object.entries(model).filter(
              ([key]) => !['id', 'items'].includes(key) && !/^x-/.test(key),
            ),
          ),
          (additionalProperty) =>
            additionalProperty.map(
              $IO.GetPatternPropertiesArrayObjects200ResponseValueItem.toJson,
            ),
        ),
        ...(model.id === undefined
          ? {}
          : {
              id: model.id,
            }),
        ...(model.items === undefined
          ? {}
          : {
              items: model.items.map(
                $IO.GetPatternPropertiesArrayObjects200ResponseItemsItem.toJson,
              ),
            }),
      };
    },
    fromJson: (json: any): GetPatternPropertiesArrayObjects200Response => {
      if (json === undefined || json === null) {
        return json;
      }
      return {
        ...$IO.$mapValues(
          Object.fromEntries(
            Object.entries(json).filter(
              ([key]) => !['id', 'items'].includes(key) && /^x-/.test(key),
            ),
          ),
          (patternProperty) =>
            (patternProperty as Array<any>).map(
              $IO.GetPatternPropertiesArrayObjects200ResponseX0Item.fromJson,
            ),
        ),
        ...$IO.$mapValues(
          Object.fromEntries(
            Object.entries(json).filter(
              ([key]) => !['id', 'items'].includes(key) && !/^x-/.test(key),
            ),
          ),
          (additionalProperty) =>
            (additionalProperty as Array<any>).map(
              $IO.GetPatternPropertiesArrayObjects200ResponseValueItem.fromJson,
            ),
        ),
        id: json['id'],
        ...(json['items'] === undefined
          ? {}
          : {
              items: (json['items'] as Array<any>).map(
                $IO.GetPatternPropertiesArrayObjects200ResponseItemsItem
                  .fromJson,
              ),
            }),
      };
    },
  };

  public static GetPatternPropertiesArrayObjects200ResponseItemsItem = {
    toJson: (
      model: GetPatternPropertiesArrayObjects200ResponseItemsItem,
    ): any => {
      if (model === undefined || model === null) {
        return model;
      }
      return {
        ...(model.name === undefined
          ? {}
          : {
              name: model.name,
            }),
        ...(model.value === undefined
          ? {}
          : {
              value: model.value,
            }),
      };
    },
    fromJson: (
      json: any,
    ): GetPatternPropertiesArrayObjects200ResponseItemsItem => {
      if (json === undefined || json === null) {
        return json;
      }
      return {
        ...(json['name'] === undefined
          ? {}
          : {
              name: json['name'],
            }),
        ...(json['value'] === undefined
          ? {}
          : {
              value: json['value'],
            }),
      };
    },
  };

  public static GetPatternPropertiesArrayObjects200ResponseValueItem = {
    toJson: (
      model: GetPatternPropertiesArrayObjects200ResponseValueItem,
    ): any => {
      if (model === undefined || model === null) {
        return model;
      }
      return {
        ...(model.id === undefined
          ? {}
          : {
              id: model.id,
            }),
        ...(model.count === undefined
          ? {}
          : {
              count: model.count,
            }),
      };
    },
    fromJson: (
      json: any,
    ): GetPatternPropertiesArrayObjects200ResponseValueItem => {
      if (json === undefined || json === null) {
        return json;
      }
      return {
        ...(json['id'] === undefined
          ? {}
          : {
              id: json['id'],
            }),
        ...(json['count'] === undefined
          ? {}
          : {
              count: json['count'],
            }),
      };
    },
  };

  public static GetPatternPropertiesArrayObjects200ResponseX0Item = {
    toJson: (model: GetPatternPropertiesArrayObjects200ResponseX0Item): any => {
      if (model === undefined || model === null) {
        return model;
      }
      return {
        ...(model.label === undefined
          ? {}
          : {
              label: model.label,
            }),
        ...(model.enabled === undefined
          ? {}
          : {
              enabled: model.enabled,
            }),
      };
    },
    fromJson: (
      json: any,
    ): GetPatternPropertiesArrayObjects200ResponseX0Item => {
      if (json === undefined || json === null) {
        return json;
      }
      return {
        ...(json['label'] === undefined
          ? {}
          : {
              label: json['label'],
            }),
        ...(json['enabled'] === undefined
          ? {}
          : {
              enabled: json['enabled'],
            }),
      };
    },
  };

  public static GetPatternPropertiesArrayPrimitives200Response = {
    toJson: (model: GetPatternPropertiesArrayPrimitives200Response): any => {
      if (model === undefined || model === null) {
        return model;
      }
      return {
        ...$IO.$mapValues(
          Object.fromEntries(
            Object.entries(model).filter(
              ([key]) =>
                !['id', 'stringArray', 'numberArray'].includes(key) &&
                /^x-/.test(key),
            ),
          ),
          (patternProperty) => patternProperty,
        ),
        ...$IO.$mapValues(
          Object.fromEntries(
            Object.entries(model).filter(
              ([key]) =>
                !['id', 'stringArray', 'numberArray'].includes(key) &&
                /^y-/.test(key),
            ),
          ),
          (patternProperty) => patternProperty,
        ),
        ...$IO.$mapValues(
          Object.fromEntries(
            Object.entries(model).filter(
              ([key]) =>
                !['id', 'stringArray', 'numberArray'].includes(key) &&
                !(/^x-/.test(key) || /^y-/.test(key)),
            ),
          ),
          (additionalProperty) => additionalProperty,
        ),
        ...(model.id === undefined
          ? {}
          : {
              id: model.id,
            }),
        ...(model.stringArray === undefined
          ? {}
          : {
              stringArray: model.stringArray,
            }),
        ...(model.numberArray === undefined
          ? {}
          : {
              numberArray: model.numberArray,
            }),
      };
    },
    fromJson: (json: any): GetPatternPropertiesArrayPrimitives200Response => {
      if (json === undefined || json === null) {
        return json;
      }
      return {
        ...$IO.$mapValues(
          Object.fromEntries(
            Object.entries(json).filter(
              ([key]) =>
                !['id', 'stringArray', 'numberArray'].includes(key) &&
                /^x-/.test(key),
            ),
          ),
          (patternProperty) => patternProperty,
        ),
        ...$IO.$mapValues(
          Object.fromEntries(
            Object.entries(json).filter(
              ([key]) =>
                !['id', 'stringArray', 'numberArray'].includes(key) &&
                /^y-/.test(key),
            ),
          ),
          (patternProperty) => patternProperty,
        ),
        ...$IO.$mapValues(
          Object.fromEntries(
            Object.entries(json).filter(
              ([key]) =>
                !['id', 'stringArray', 'numberArray'].includes(key) &&
                !(/^x-/.test(key) || /^y-/.test(key)),
            ),
          ),
          (additionalProperty) => additionalProperty,
        ),
        id: json['id'],
        ...(json['stringArray'] === undefined
          ? {}
          : {
              stringArray: json['stringArray'],
            }),
        ...(json['numberArray'] === undefined
          ? {}
          : {
              numberArray: json['numberArray'],
            }),
      };
    },
  };

  public static GetPatternPropertiesArrayStringDicts200Response = {
    toJson: (model: GetPatternPropertiesArrayStringDicts200Response): any => {
      if (model === undefined || model === null) {
        return model;
      }
      return {
        ...$IO.$mapValues(
          Object.fromEntries(
            Object.entries(model).filter(
              ([key]) =>
                !['id', 'dictionaries'].includes(key) && /^x-/.test(key),
            ),
          ),
          (patternProperty) => patternProperty,
        ),
        ...$IO.$mapValues(
          Object.fromEntries(
            Object.entries(model).filter(
              ([key]) =>
                !['id', 'dictionaries'].includes(key) && !/^x-/.test(key),
            ),
          ),
          (additionalProperty) => additionalProperty,
        ),
        ...(model.id === undefined
          ? {}
          : {
              id: model.id,
            }),
        ...(model.dictionaries === undefined
          ? {}
          : {
              dictionaries: model.dictionaries,
            }),
      };
    },
    fromJson: (json: any): GetPatternPropertiesArrayStringDicts200Response => {
      if (json === undefined || json === null) {
        return json;
      }
      return {
        ...$IO.$mapValues(
          Object.fromEntries(
            Object.entries(json).filter(
              ([key]) =>
                !['id', 'dictionaries'].includes(key) && /^x-/.test(key),
            ),
          ),
          (patternProperty) => patternProperty,
        ),
        ...$IO.$mapValues(
          Object.fromEntries(
            Object.entries(json).filter(
              ([key]) =>
                !['id', 'dictionaries'].includes(key) && !/^x-/.test(key),
            ),
          ),
          (additionalProperty) => additionalProperty,
        ),
        id: json['id'],
        ...(json['dictionaries'] === undefined
          ? {}
          : {
              dictionaries: json['dictionaries'],
            }),
      };
    },
  };

  public static GetPatternPropertiesMixed200Response = {
    toJson: (model: GetPatternPropertiesMixed200Response): any => {
      if (model === undefined || model === null) {
        return model;
      }
      return {
        ...$IO.$mapValues(
          Object.fromEntries(
            Object.entries(model).filter(
              ([key]) => !['id', 'name'].includes(key) && /^x-/.test(key),
            ),
          ),
          (patternProperty) => patternProperty,
        ),
        ...$IO.$mapValues(
          Object.fromEntries(
            Object.entries(model).filter(
              ([key]) => !['id', 'name'].includes(key) && !/^x-/.test(key),
            ),
          ),
          (additionalProperty) => additionalProperty,
        ),
        ...(model.id === undefined
          ? {}
          : {
              id: model.id,
            }),
        ...(model.name === undefined
          ? {}
          : {
              name: model.name,
            }),
      };
    },
    fromJson: (json: any): GetPatternPropertiesMixed200Response => {
      if (json === undefined || json === null) {
        return json;
      }
      return {
        ...$IO.$mapValues(
          Object.fromEntries(
            Object.entries(json).filter(
              ([key]) => !['id', 'name'].includes(key) && /^x-/.test(key),
            ),
          ),
          (patternProperty) => patternProperty,
        ),
        ...$IO.$mapValues(
          Object.fromEntries(
            Object.entries(json).filter(
              ([key]) => !['id', 'name'].includes(key) && !/^x-/.test(key),
            ),
          ),
          (additionalProperty) => additionalProperty,
        ),
        id: json['id'],
        name: json['name'],
      };
    },
  };

  public static GetPatternPropertiesMultiple200Response = {
    toJson: (model: GetPatternPropertiesMultiple200Response): any => {
      if (model === undefined || model === null) {
        return model;
      }
      return {
        ...$IO.$mapValues(
          Object.fromEntries(
            Object.entries(model).filter(
              ([key]) => !['id', 'name'].includes(key) && /^x-/.test(key),
            ),
          ),
          (patternProperty) => patternProperty,
        ),
        ...$IO.$mapValues(
          Object.fromEntries(
            Object.entries(model).filter(
              ([key]) => !['id', 'name'].includes(key) && /^y-/.test(key),
            ),
          ),
          (patternProperty) => patternProperty,
        ),
        ...(model.id === undefined
          ? {}
          : {
              id: model.id,
            }),
        ...(model.name === undefined
          ? {}
          : {
              name: model.name,
            }),
      };
    },
    fromJson: (json: any): GetPatternPropertiesMultiple200Response => {
      if (json === undefined || json === null) {
        return json;
      }
      return {
        ...$IO.$mapValues(
          Object.fromEntries(
            Object.entries(json).filter(
              ([key]) => !['id', 'name'].includes(key) && /^x-/.test(key),
            ),
          ),
          (patternProperty) => patternProperty,
        ),
        ...$IO.$mapValues(
          Object.fromEntries(
            Object.entries(json).filter(
              ([key]) => !['id', 'name'].includes(key) && /^y-/.test(key),
            ),
          ),
          (patternProperty) => patternProperty,
        ),
        id: json['id'],
        name: json['name'],
      };
    },
  };

  public static GetPatternPropertiesNested200Response = {
    toJson: (model: GetPatternPropertiesNested200Response): any => {
      if (model === undefined || model === null) {
        return model;
      }
      return {
        ...(model.id === undefined
          ? {}
          : {
              id: model.id,
            }),
        ...(model.config === undefined
          ? {}
          : {
              config: $IO.GetPatternPropertiesNested200ResponseConfig.toJson(
                model.config,
              ),
            }),
      };
    },
    fromJson: (json: any): GetPatternPropertiesNested200Response => {
      if (json === undefined || json === null) {
        return json;
      }
      return {
        id: json['id'],
        ...(json['config'] === undefined
          ? {}
          : {
              config: $IO.GetPatternPropertiesNested200ResponseConfig.fromJson(
                json['config'],
              ),
            }),
      };
    },
  };

  public static GetPatternPropertiesNested200ResponseConfig = {
    toJson: (model: GetPatternPropertiesNested200ResponseConfig): any => {
      if (model === undefined || model === null) {
        return model;
      }
      return {
        ...$IO.$mapValues(
          Object.fromEntries(
            Object.entries(model).filter(([key]) => /^setting-/.test(key)),
          ),
          (patternProperty) =>
            $IO.GetPatternPropertiesNested200ResponseConfigSetting0.toJson(
              patternProperty,
            ),
        ),
      };
    },
    fromJson: (json: any): GetPatternPropertiesNested200ResponseConfig => {
      if (json === undefined || json === null) {
        return json;
      }
      return {
        ...$IO.$mapValues(
          Object.fromEntries(
            Object.entries(json).filter(([key]) => /^setting-/.test(key)),
          ),
          (patternProperty) =>
            $IO.GetPatternPropertiesNested200ResponseConfigSetting0.fromJson(
              patternProperty,
            ),
        ),
      };
    },
  };

  public static GetPatternPropertiesNested200ResponseConfigSetting0 = {
    toJson: (
      model: GetPatternPropertiesNested200ResponseConfigSetting0,
    ): any => {
      if (model === undefined || model === null) {
        return model;
      }
      return {
        ...$IO.$mapValues(
          Object.fromEntries(
            Object.entries(model).filter(
              ([key]) => !['isEnabled'].includes(key) && /^option-/.test(key),
            ),
          ),
          (patternProperty) => patternProperty,
        ),
        ...(model.isEnabled === undefined
          ? {}
          : {
              is_enabled: model.isEnabled,
            }),
      };
    },
    fromJson: (
      json: any,
    ): GetPatternPropertiesNested200ResponseConfigSetting0 => {
      if (json === undefined || json === null) {
        return json;
      }
      return {
        ...$IO.$mapValues(
          Object.fromEntries(
            Object.entries(json).filter(
              ([key]) => !['is_enabled'].includes(key) && /^option-/.test(key),
            ),
          ),
          (patternProperty) => patternProperty,
        ),
        ...(json['is_enabled'] === undefined
          ? {}
          : {
              isEnabled: json['is_enabled'],
            }),
      };
    },
  };

  public static GetPatternPropertiesNoProps200Response = {
    toJson: (model: GetPatternPropertiesNoProps200Response): any => {
      if (model === undefined || model === null) {
        return model;
      }
      return {
        ...$IO.$mapValues(
          Object.fromEntries(
            Object.entries(model).filter(([key]) => /^x-/.test(key)),
          ),
          (patternProperty) => patternProperty,
        ),
        ...$IO.$mapValues(
          Object.fromEntries(
            Object.entries(model).filter(([key]) => !/^x-/.test(key)),
          ),
          (additionalProperty) => additionalProperty,
        ),
      };
    },
    fromJson: (json: any): GetPatternPropertiesNoProps200Response => {
      if (json === undefined || json === null) {
        return json;
      }
      return {
        ...$IO.$mapValues(
          Object.fromEntries(
            Object.entries(json).filter(([key]) => /^x-/.test(key)),
          ),
          (patternProperty) => patternProperty,
        ),
        ...$IO.$mapValues(
          Object.fromEntries(
            Object.entries(json).filter(([key]) => !/^x-/.test(key)),
          ),
          (additionalProperty) => additionalProperty,
        ),
      };
    },
  };

  public static GetPatternPropertiesOnly200Response = {
    toJson: (model: GetPatternPropertiesOnly200Response): any => {
      if (model === undefined || model === null) {
        return model;
      }
      return {
        ...$IO.$mapValues(
          Object.fromEntries(
            Object.entries(model).filter(([key]) => /^x-/.test(key)),
          ),
          (patternProperty) => patternProperty,
        ),
        ...$IO.$mapValues(
          Object.fromEntries(
            Object.entries(model).filter(([key]) => /^y-/.test(key)),
          ),
          (patternProperty) => patternProperty,
        ),
      };
    },
    fromJson: (json: any): GetPatternPropertiesOnly200Response => {
      if (json === undefined || json === null) {
        return json;
      }
      return {
        ...$IO.$mapValues(
          Object.fromEntries(
            Object.entries(json).filter(([key]) => /^x-/.test(key)),
          ),
          (patternProperty) => patternProperty,
        ),
        ...$IO.$mapValues(
          Object.fromEntries(
            Object.entries(json).filter(([key]) => /^y-/.test(key)),
          ),
          (patternProperty) => patternProperty,
        ),
      };
    },
  };

  public static GetPatternPropertiesSingle200Response = {
    toJson: (model: GetPatternPropertiesSingle200Response): any => {
      if (model === undefined || model === null) {
        return model;
      }
      return {
        ...$IO.$mapValues(
          Object.fromEntries(
            Object.entries(model).filter(
              ([key]) => !['id', 'name'].includes(key) && /^x-/.test(key),
            ),
          ),
          (patternProperty) => patternProperty,
        ),
        ...(model.id === undefined
          ? {}
          : {
              id: model.id,
            }),
        ...(model.name === undefined
          ? {}
          : {
              name: model.name,
            }),
      };
    },
    fromJson: (json: any): GetPatternPropertiesSingle200Response => {
      if (json === undefined || json === null) {
        return json;
      }
      return {
        ...$IO.$mapValues(
          Object.fromEntries(
            Object.entries(json).filter(
              ([key]) => !['id', 'name'].includes(key) && /^x-/.test(key),
            ),
          ),
          (patternProperty) => patternProperty,
        ),
        id: json['id'],
        name: json['name'],
      };
    },
  };
}

/**
 * Client configuration for TestApi
 */
export interface TestApiConfig {
  /**
   * Base URL for the API
   */
  url: string;
  /**
   * Custom instance of fetch. By default the global 'fetch' is used.
   * You can override this to add custom middleware for use cases such as adding authentication headers.
   */
  fetch?: typeof fetch;
  /**
   * Additional configuration
   */
  options?: {
    /**
     * By default, the client will add a Content-Type header, set to the media type defined for
     * the request in the OpenAPI specification.
     * Set this to false to omit this header.
     */
    omitContentTypeHeader?: boolean;
  };
}

/**
 * API Client for TestApi
 */
export class TestApi {
  private $config: TestApiConfig;

  constructor(config: TestApiConfig) {
    this.$config = config;

    this.getPatternPropertiesArrayArrays =
      this.getPatternPropertiesArrayArrays.bind(this);
    this.getPatternPropertiesArrayObjectDicts =
      this.getPatternPropertiesArrayObjectDicts.bind(this);
    this.getPatternPropertiesArrayObjects =
      this.getPatternPropertiesArrayObjects.bind(this);
    this.getPatternPropertiesArrayPrimitives =
      this.getPatternPropertiesArrayPrimitives.bind(this);
    this.getPatternPropertiesArrayStringDicts =
      this.getPatternPropertiesArrayStringDicts.bind(this);
    this.getPatternPropertiesMixed = this.getPatternPropertiesMixed.bind(this);
    this.getPatternPropertiesMultiple =
      this.getPatternPropertiesMultiple.bind(this);
    this.getPatternPropertiesNested =
      this.getPatternPropertiesNested.bind(this);
    this.getPatternPropertiesNoProps =
      this.getPatternPropertiesNoProps.bind(this);
    this.getPatternPropertiesOnly = this.getPatternPropertiesOnly.bind(this);
    this.getPatternPropertiesSingle =
      this.getPatternPropertiesSingle.bind(this);
  }

  private $url = (
    path: string,
    pathParameters: { [key: string]: any },
    queryParameters: { [key: string]: any },
    collectionFormats?: { [key: string]: 'multi' | 'csv' },
  ): string => {
    const baseUrl = this.$config.url.endsWith('/')
      ? this.$config.url.slice(0, -1)
      : this.$config.url;
    const pathWithParameters = Object.entries(pathParameters).reduce(
      (withParams, [key, value]) =>
        withParams.replace(\`{\${key}}\`, encodeURIComponent(\`\${value}\`)),
      path,
    );
    const queryString = Object.entries(queryParameters)
      .map(([key, value]) => {
        if (Array.isArray(value) && collectionFormats?.[key] === 'multi') {
          return value
            .map(
              (v) => \`\${encodeURIComponent(key)}=\${encodeURIComponent(\`\${v}\`)}\`,
            )
            .join('&');
        }
        return \`\${encodeURIComponent(key)}=\${encodeURIComponent(Array.isArray(value) ? value.map(String).join(',') : String(value))}\`;
      })
      .join('&');
    return (
      baseUrl + pathWithParameters + (queryString ? \`?\${queryString}\` : '')
    );
  };

  private $headers = (
    headerParameters: { [key: string]: any },
    collectionFormats?: { [key: string]: 'multi' | 'csv' },
  ): [string, string][] => {
    return Object.entries(headerParameters).flatMap(([key, value]) => {
      if (Array.isArray(value) && collectionFormats?.[key] === 'multi') {
        return value.map((v) => [key, String(v)]) as [string, string][];
      }
      return [[key, String(value)]];
    });
  };

  private $fetch: typeof fetch = (...args) =>
    (this.$config.fetch ?? fetch)(...args);

  public async getPatternPropertiesArrayArrays(): Promise<GetPatternPropertiesArrayArrays200Response> {
    const pathParameters: { [key: string]: any } = {};
    const queryParameters: { [key: string]: any } = {};
    const headerParameters: { [key: string]: any } = {};

    const body = undefined;

    const response = await this.$fetch(
      this.$url(
        '/pattern-properties-array-arrays',
        pathParameters,
        queryParameters,
      ),
      {
        headers: this.$headers(headerParameters),
        method: 'GET',
        body,
      },
    );

    if (response.status === 200) {
      return $IO.GetPatternPropertiesArrayArrays200Response.fromJson(
        await response.json(),
      );
    }
    throw new Error(
      \`Unknown response status \${response.status} returned by API\`,
    );
  }

  public async getPatternPropertiesArrayObjectDicts(): Promise<GetPatternPropertiesArrayObjectDicts200Response> {
    const pathParameters: { [key: string]: any } = {};
    const queryParameters: { [key: string]: any } = {};
    const headerParameters: { [key: string]: any } = {};

    const body = undefined;

    const response = await this.$fetch(
      this.$url(
        '/pattern-properties-array-object-dicts',
        pathParameters,
        queryParameters,
      ),
      {
        headers: this.$headers(headerParameters),
        method: 'GET',
        body,
      },
    );

    if (response.status === 200) {
      return $IO.GetPatternPropertiesArrayObjectDicts200Response.fromJson(
        await response.json(),
      );
    }
    throw new Error(
      \`Unknown response status \${response.status} returned by API\`,
    );
  }

  public async getPatternPropertiesArrayObjects(): Promise<GetPatternPropertiesArrayObjects200Response> {
    const pathParameters: { [key: string]: any } = {};
    const queryParameters: { [key: string]: any } = {};
    const headerParameters: { [key: string]: any } = {};

    const body = undefined;

    const response = await this.$fetch(
      this.$url(
        '/pattern-properties-array-objects',
        pathParameters,
        queryParameters,
      ),
      {
        headers: this.$headers(headerParameters),
        method: 'GET',
        body,
      },
    );

    if (response.status === 200) {
      return $IO.GetPatternPropertiesArrayObjects200Response.fromJson(
        await response.json(),
      );
    }
    throw new Error(
      \`Unknown response status \${response.status} returned by API\`,
    );
  }

  public async getPatternPropertiesArrayPrimitives(): Promise<GetPatternPropertiesArrayPrimitives200Response> {
    const pathParameters: { [key: string]: any } = {};
    const queryParameters: { [key: string]: any } = {};
    const headerParameters: { [key: string]: any } = {};

    const body = undefined;

    const response = await this.$fetch(
      this.$url(
        '/pattern-properties-array-primitives',
        pathParameters,
        queryParameters,
      ),
      {
        headers: this.$headers(headerParameters),
        method: 'GET',
        body,
      },
    );

    if (response.status === 200) {
      return $IO.GetPatternPropertiesArrayPrimitives200Response.fromJson(
        await response.json(),
      );
    }
    throw new Error(
      \`Unknown response status \${response.status} returned by API\`,
    );
  }

  public async getPatternPropertiesArrayStringDicts(): Promise<GetPatternPropertiesArrayStringDicts200Response> {
    const pathParameters: { [key: string]: any } = {};
    const queryParameters: { [key: string]: any } = {};
    const headerParameters: { [key: string]: any } = {};

    const body = undefined;

    const response = await this.$fetch(
      this.$url(
        '/pattern-properties-array-string-dicts',
        pathParameters,
        queryParameters,
      ),
      {
        headers: this.$headers(headerParameters),
        method: 'GET',
        body,
      },
    );

    if (response.status === 200) {
      return $IO.GetPatternPropertiesArrayStringDicts200Response.fromJson(
        await response.json(),
      );
    }
    throw new Error(
      \`Unknown response status \${response.status} returned by API\`,
    );
  }

  public async getPatternPropertiesMixed(): Promise<GetPatternPropertiesMixed200Response> {
    const pathParameters: { [key: string]: any } = {};
    const queryParameters: { [key: string]: any } = {};
    const headerParameters: { [key: string]: any } = {};

    const body = undefined;

    const response = await this.$fetch(
      this.$url('/pattern-properties-mixed', pathParameters, queryParameters),
      {
        headers: this.$headers(headerParameters),
        method: 'GET',
        body,
      },
    );

    if (response.status === 200) {
      return $IO.GetPatternPropertiesMixed200Response.fromJson(
        await response.json(),
      );
    }
    throw new Error(
      \`Unknown response status \${response.status} returned by API\`,
    );
  }

  public async getPatternPropertiesMultiple(): Promise<GetPatternPropertiesMultiple200Response> {
    const pathParameters: { [key: string]: any } = {};
    const queryParameters: { [key: string]: any } = {};
    const headerParameters: { [key: string]: any } = {};

    const body = undefined;

    const response = await this.$fetch(
      this.$url(
        '/pattern-properties-multiple',
        pathParameters,
        queryParameters,
      ),
      {
        headers: this.$headers(headerParameters),
        method: 'GET',
        body,
      },
    );

    if (response.status === 200) {
      return $IO.GetPatternPropertiesMultiple200Response.fromJson(
        await response.json(),
      );
    }
    throw new Error(
      \`Unknown response status \${response.status} returned by API\`,
    );
  }

  public async getPatternPropertiesNested(): Promise<GetPatternPropertiesNested200Response> {
    const pathParameters: { [key: string]: any } = {};
    const queryParameters: { [key: string]: any } = {};
    const headerParameters: { [key: string]: any } = {};

    const body = undefined;

    const response = await this.$fetch(
      this.$url('/pattern-properties-nested', pathParameters, queryParameters),
      {
        headers: this.$headers(headerParameters),
        method: 'GET',
        body,
      },
    );

    if (response.status === 200) {
      return $IO.GetPatternPropertiesNested200Response.fromJson(
        await response.json(),
      );
    }
    throw new Error(
      \`Unknown response status \${response.status} returned by API\`,
    );
  }

  public async getPatternPropertiesNoProps(): Promise<GetPatternPropertiesNoProps200Response> {
    const pathParameters: { [key: string]: any } = {};
    const queryParameters: { [key: string]: any } = {};
    const headerParameters: { [key: string]: any } = {};

    const body = undefined;

    const response = await this.$fetch(
      this.$url(
        '/pattern-properties-no-props',
        pathParameters,
        queryParameters,
      ),
      {
        headers: this.$headers(headerParameters),
        method: 'GET',
        body,
      },
    );

    if (response.status === 200) {
      return $IO.GetPatternPropertiesNoProps200Response.fromJson(
        await response.json(),
      );
    }
    throw new Error(
      \`Unknown response status \${response.status} returned by API\`,
    );
  }

  public async getPatternPropertiesOnly(): Promise<GetPatternPropertiesOnly200Response> {
    const pathParameters: { [key: string]: any } = {};
    const queryParameters: { [key: string]: any } = {};
    const headerParameters: { [key: string]: any } = {};

    const body = undefined;

    const response = await this.$fetch(
      this.$url('/pattern-properties-only', pathParameters, queryParameters),
      {
        headers: this.$headers(headerParameters),
        method: 'GET',
        body,
      },
    );

    if (response.status === 200) {
      return $IO.GetPatternPropertiesOnly200Response.fromJson(
        await response.json(),
      );
    }
    throw new Error(
      \`Unknown response status \${response.status} returned by API\`,
    );
  }

  public async getPatternPropertiesSingle(): Promise<GetPatternPropertiesSingle200Response> {
    const pathParameters: { [key: string]: any } = {};
    const queryParameters: { [key: string]: any } = {};
    const headerParameters: { [key: string]: any } = {};

    const body = undefined;

    const response = await this.$fetch(
      this.$url('/pattern-properties-single', pathParameters, queryParameters),
      {
        headers: this.$headers(headerParameters),
        method: 'GET',
        body,
      },
    );

    if (response.status === 200) {
      return $IO.GetPatternPropertiesSingle200Response.fromJson(
        await response.json(),
      );
    }
    throw new Error(
      \`Unknown response status \${response.status} returned by API\`,
    );
  }
}
"
`;
