import os

from aws_lambda_powertools import Logger, Metrics, Tracer
from aws_lambda_powertools.metrics import MetricUnit
<%_ if (eventSource !== 'Any') { _%>
from aws_lambda_powertools.utilities.parser import event_parser
from aws_lambda_powertools.utilities.parser.models import <%= eventSource %>
<%_ } _%>
from aws_lambda_powertools.utilities.typing import LambdaContext

os.environ["POWERTOOLS_METRICS_NAMESPACE"] = "<%= lambdaFunctionClassName %>"
os.environ["POWERTOOLS_SERVICE_NAME"] = "<%= lambdaFunctionClassName %>"

logger: Logger = Logger()
metrics: Metrics = Metrics()
tracer: Tracer = Tracer()

@tracer.capture_lambda_handler
@metrics.log_metrics
<%_ if (eventSource !== 'Any') { _%>
@event_parser(model=<%= eventSource %>)
<%_ } _%>
def lambda_handler(event: <%= eventSource === 'Any' ? 'dict' : eventSource %>, context: LambdaContext):
    logger.info("Received event", extra={"event": event<%= eventSource === 'Any' ? '' : '.model_dump()' %> })
    metrics.add_metric(name="InvocationCount", unit=MetricUnit.Count, value=1)

    try:
        # TODO: Implement
        metrics.add_metric(name="SuccessCount", unit=MetricUnit.Count, value=1)
        # TODO: Implement success response if required
    except Exception as e:
        logger.exception(e)
        metrics.add_metric(name="ErrorCount", unit=MetricUnit.Count, value=1)
        # TODO: Implement error response if required
