// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`py#strands-agent generator > should match snapshot for BedrockAgentCoreRuntime generated constructs files > agent-Dockerfile 1`] = `
"FROM public.ecr.aws/docker/library/python:3.12-slim

WORKDIR /app

# Copy bundled package
COPY --from=workspace dist/apps/test-project/bundle /app

EXPOSE 8080

ENV PYTHONPATH=/app

# Auto-instrument with AWS Distro for OpenTelemetry
# https://aws-otel.github.io/docs/getting-started/python-sdk/auto-instr
CMD ["python", "bin/opentelemetry-instrument", "python", "-m", "proj_test_project.snapshot_bedrock_agent.main"]
"
`;

exports[`py#strands-agent generator > should match snapshot for BedrockAgentCoreRuntime generated constructs files > agent-construct.ts 1`] = `null`;

exports[`py#strands-agent generator > should match snapshot for BedrockAgentCoreRuntime generated constructs files > agent-core-runtime.ts 1`] = `null`;

exports[`py#strands-agent generator > should match snapshot for BedrockAgentCoreRuntime generated constructs files > agents-index.ts 1`] = `null`;

exports[`py#strands-agent generator > should match snapshot for BedrockAgentCoreRuntime generated constructs files > app-index.ts 1`] = `""`;

exports[`py#strands-agent generator > should match snapshot for BedrockAgentCoreRuntime generated constructs files > core-index.ts 1`] = `
"export * from './app.js';
export * from './runtime-config.js';
"
`;

exports[`py#strands-agent generator > should match snapshot for generated files > strands-agent-__init__.py 1`] = `""`;

exports[`py#strands-agent generator > should match snapshot for generated files > strands-agent-agent.py 1`] = `
"from contextlib import contextmanager

from strands import Agent, tool
from strands_tools import current_time


# Define a custom tool
@tool
def add(a: int, b: int) -> int:
    return a + b


@contextmanager
def get_agent(session_id: str):
    yield Agent(
        system_prompt="""
You are an addition wizard.
Use the 'add' tool for addition tasks.
Refer to tools as your 'spellbook'.
""",
        tools=[add, current_time],
    )
"
`;

exports[`py#strands-agent generator > should match snapshot for generated files > strands-agent-main.py 1`] = `
"from bedrock_agentcore.runtime import BedrockAgentCoreApp

from .agent import get_agent

app = BedrockAgentCoreApp()


@app.entrypoint
async def invoke(payload, context):
    """Handler for agent invocation"""
    prompt = payload.get(
        "prompt", "No prompt found in input, please guide the user "
        "to create a json payload with prompt key"
    )

    with get_agent(session_id=context.session_id) as agent:
        stream = agent.stream_async(prompt)
        async for event in stream:
            print(event)
            yield (event)


if __name__ == "__main__":
    app.run()
"
`;

exports[`py#strands-agent generator > should match snapshot for generated files > updated-pyproject.toml 1`] = `
"[project]
name = "proj.test_project"
version = "0.1.0"
dependencies = [
  "aws-opentelemetry-distro==0.12.0",
  "bedrock-agentcore==0.1.2",
  "boto3==1.40.20",
  "mcp==1.13.1",
  "strands-agents==1.6.0",
  "strands-agents-tools==0.2.5"
]

[dependency-groups]
dev = [ ]

[tool.uv]
dev-dependencies = [ ]
"
`;
