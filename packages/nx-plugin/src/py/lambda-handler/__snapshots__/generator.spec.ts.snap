// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`lambda-handler project generator > should match snapshot > main-snapshot 1`] = `
{
  "apps/test_lambda_handler/test_lambda_handler/__init__.py": """"Automatically generated by Nx."""
",
  "apps/test_lambda_handler/test_lambda_handler/handler.py": "import json

from aws_lambda_powertools.utilities.typing import LambdaContext
from aws_lambda_powertools import Logger, Metrics, Tracer

from .init import lambda_handler, logger, metrics, tracer

@tracer.capture_lambda_handler
@metrics.log_metrics
def lambda_handler(event: dict, context: LambdaContext):
    logger.info("Received event", extra={"event": event})
    metrics.add_metric(name="InvocationCount", unit="Count", value=1)

    try:
        result = { "message": "Success" }
        metrics.add_metric(name="SuccessCount", unit=MetricUnit.Count, value=1)
        return {
            "statusCode": 200,
            "body": json.dumps(result)
        }
    except Exception as e:
        logger.exception("Error processing event")
        metrics.add_metric(name="ErrorCount", unit="Count", value=1)
        return {
            "statusCode": 500,
            "body": json.dumps({"message": "Internal Server Error"})
        } ",
  "apps/test_lambda_handler/test_lambda_handler/init.py": "import os

from aws_lambda_powertools import Logger, Metrics, Tracer

os.environ["POWERTOOLS_METRICS_NAMESPACE"] = "TestLambdaHandler"
os.environ["POWERTOOLS_SERVICE_NAME"] = "TestLambdaHandler"

logger: Logger = Logger()
metrics: Metrics = Metrics()
tracer: Tracer = Tracer()
",
  "apps/test_lambda_handler/tests/__init__.py": """"unit tests."""
",
  "apps/test_lambda_handler/tests/conftest.py": """"Unit tests configuration module."""
",
  "apps/test_lambda_handler/tests/test_handler.py": "# 
# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
# SPDX-License-Identifier: Apache-2.0
# 

def test_handler():
    pass
",
}
`;
