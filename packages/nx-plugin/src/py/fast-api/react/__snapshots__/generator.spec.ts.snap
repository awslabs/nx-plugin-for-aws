// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`fastapi react generator > should generate OpenAPI spec script > generate_open_api.py 1`] = `
"from src.main import app
import json, os, sys

os.makedirs(os.path.dirname(sys.argv[1]), exist_ok=True)
with open(sys.argv[1], 'w') as f:
  json.dump(app.openapi(), f)
"
`;

exports[`fastapi react generator > should generate tanstack query options proxy hook > useTestApi.tsx 1`] = `
"import { useContext } from 'react';
import { TestApiContext } from '../components/TestApiProvider';
import { TestApiOptionsProxy } from '../generated/test-api/options-proxy.gen';

export const useTestApi = (): TestApiOptionsProxy => {
  const optionsProxy = useContext(TestApiContext);

  if (!optionsProxy) {
    throw new Error('useTestApi must be used within a TestApiProvider');
  }

  return optionsProxy;
};
"
`;

exports[`fastapi react generator > should generate tanstack query options proxy provider > TestApiProvider.tsx 1`] = `
"import { createContext, FC, PropsWithChildren, useMemo } from 'react';
import { useTestApiClient } from '../hooks/useTestApiClient';
import { TestApiOptionsProxy } from '../generated/test-api/options-proxy.gen';

export const TestApiContext = createContext<TestApiOptionsProxy | undefined>(
  undefined,
);

export const TestApiProvider: FC<PropsWithChildren> = ({ children }) => {
  const client = useTestApiClient();
  const optionsProxy = useMemo(
    () => new TestApiOptionsProxy({ client }),
    [client],
  );

  return (
    <TestApiContext.Provider value={optionsProxy}>
      {children}
    </TestApiContext.Provider>
  );
};

export default TestApiProvider;
"
`;

exports[`fastapi react generator > should generate vanilla client hook > useTestApiClient.tsx 1`] = `
"import { TestApi } from '../generated/test-api/client.gen';
import { useRuntimeConfig } from './useRuntimeConfig';
import { useMemo } from 'react';

export const useTestApiClient = (): TestApi => {
  const runtimeConfig = useRuntimeConfig();
  const apiUrl = runtimeConfig.httpApis.TestApi;
  return useMemo(
    () =>
      new TestApi({
        url: apiUrl,
      }),
    [apiUrl],
  );
};
"
`;

exports[`fastapi react generator > should handle IAM auth option > useTestApi-IAM.tsx 1`] = `
"import { TestApi } from '../generated/test-api/client.gen';
import { useSigV4 } from './useSigV4';
import { useRuntimeConfig } from './useRuntimeConfig';
import { useMemo } from 'react';

export const useTestApiClient = (): TestApi => {
  const runtimeConfig = useRuntimeConfig();
  const apiUrl = runtimeConfig.httpApis.TestApi;
  const sigv4Client = useSigV4();
  return useMemo(
    () =>
      new TestApi({
        url: apiUrl,
        fetch: sigv4Client,
      }),
    [apiUrl, sigv4Client],
  );
};
"
`;

exports[`fastapi react generator > should instrument providers in main.tsx > main.tsx 1`] = `
"import TestApiProvider from './components/TestApiProvider';
import QueryClientProvider from './components/QueryClientProvider';
import RuntimeConfigProvider from './components/RuntimeConfig';
import { App } from './app';
import { RouterProvider } from '@tanstack/react-router';

export function Main() {
  return (
    <RuntimeConfigProvider>
      <QueryClientProvider>
        <TestApiProvider>
          <RouterProvider router={router} />
        </TestApiProvider>
      </QueryClientProvider>
    </RuntimeConfigProvider>
  );
}
"
`;
