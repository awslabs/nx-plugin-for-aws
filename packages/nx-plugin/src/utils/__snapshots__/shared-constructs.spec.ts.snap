// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`shared-constructs utils > sharedConstructsGenerator > should generate shared constructs when they do not exist > packages/common/constructs/src/app/index.ts 1`] = `""`;

exports[`shared-constructs utils > sharedConstructsGenerator > should generate shared constructs when they do not exist > packages/common/constructs/src/core/app.ts 1`] = `
"import { App as _App, AppProps, Aspects, IAspect, Stack } from 'aws-cdk-lib';
import { IConstruct } from 'constructs';

export class App extends _App {
  constructor(props?: AppProps) {
    super(props);

    Aspects.of(this).add(new MetricsAspect());
  }
}

/**
 * Adds information to CloudFormation stack descriptions to provide usage metrics for @aws/nx-plugin
 */
class MetricsAspect implements IAspect {
  visit(node: IConstruct): void {
    if (node instanceof Stack) {
      const id = '';
      const version = '';
      const tags: string[] = [];
      node.templateOptions.description =
        \`\${node.templateOptions.description ?? ''} (\${id}) (version:\${version}) (tags:\${tags.join(',')})\`.trim();
    }
  }
}
"
`;

exports[`shared-constructs utils > sharedConstructsGenerator > should generate shared constructs when they do not exist > packages/common/constructs/src/core/index.ts 1`] = `
"export * from './app.js';
export * from './runtime-config.js';
"
`;

exports[`shared-constructs utils > sharedConstructsGenerator > should generate shared constructs when they do not exist > packages/common/constructs/src/core/runtime-config.ts 1`] = `
"import type { IRuntimeConfig } from ':test-scope/common-types';
import { Stack } from 'aws-cdk-lib';
import { Construct } from 'constructs';

const RuntimeConfigKey = '__RuntimeConfig__';

export class RuntimeConfig extends Construct {
  private readonly _runtimeConfig: Partial<IRuntimeConfig> = {};

  static ensure(scope: Construct): RuntimeConfig {
    const stack = Stack.of(scope);
    return (
      RuntimeConfig.of(scope) ?? new RuntimeConfig(stack, RuntimeConfigKey)
    );
  }

  static of(scope: Construct): RuntimeConfig | undefined {
    const stack = Stack.of(scope);
    return stack.node.tryFindChild(RuntimeConfigKey) as
      | RuntimeConfig
      | undefined;
  }

  constructor(scope: Construct, id: string) {
    super(scope, id);
  }

  get config(): Partial<IRuntimeConfig> {
    return this._runtimeConfig;
  }
}
"
`;

exports[`shared-constructs utils > sharedConstructsGenerator > should generate shared constructs when they do not exist > packages/common/constructs/src/index.ts 1`] = `
"export * from './app/index.js';
export * from './core/index.js';
"
`;

exports[`shared-constructs utils > sharedConstructsGenerator > should generate type definitions when they do not exist > packages/common/types/src/index.ts 1`] = `
"export * from './runtime-config.js';
"
`;

exports[`shared-constructs utils > sharedConstructsGenerator > should generate type definitions when they do not exist > packages/common/types/src/runtime-config.ts 1`] = `
"// eslint-disable-next-line @typescript-eslint/no-empty-object-type, @typescript-eslint/no-empty-interface
export interface IRuntimeConfig {}
"
`;
