// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`shared-constructs utils > sharedConstructsGenerator > should generate shared constructs when they do not exist > packages/common/constructs/src/app/index.ts 1`] = `""`;

exports[`shared-constructs utils > sharedConstructsGenerator > should generate shared constructs when they do not exist > packages/common/constructs/src/core/app.ts 1`] = `
"import { App as _App, AppProps, Aspects, IAspect, Stack } from 'aws-cdk-lib';
import { IConstruct } from 'constructs';

export class App extends _App {
  constructor(props?: AppProps) {
    super(props);

    Aspects.of(this).add(new MetricsAspect());
  }
}

/**
 * Adds information to CloudFormation stack descriptions to provide usage metrics for @aws/nx-plugin
 */
class MetricsAspect implements IAspect {
  visit(node: IConstruct): void {
    if (node instanceof Stack) {
      const id = '';
      const version = '';
      const tags: string[] = [];
      node.templateOptions.description =
        \`\${node.templateOptions.description ?? ''} (\${id}) (version:\${version}) (tag:\${tags.join(',')})\`.trim();
    }
  }
}
"
`;

exports[`shared-constructs utils > sharedConstructsGenerator > should generate shared constructs when they do not exist > packages/common/constructs/src/core/checkov.ts 1`] = `
"import { IConstruct } from 'constructs';
import { CfnResource } from 'aws-cdk-lib';

/**
 * Suppresses a set of rules for a construct tree.
 *
 * @param construct The root construct to suppress the rule for.
 * @param ids The ids of the rules to suppress.
 * @param comment The reason for suppressing the rule
 * @param predicate A predicate function that determines whether the rule should be suppressed for the given construct or any of its descendants.
 *
 * @example
 * The following example suppresses the CKV_AWS_XXX rule for the given construct.
 * suppressRules(construct, ['CKV_AWS_XXX'], 'Not required for this use case')
 *
 * @example
 * The following example suppresses the CKV_AWS_XXX rule for the construct or any of its descendants if it is an instance of Bucket:
 * suppressRules(construct, ['CKV_AWS_XXX'], 'Not required for this use case', (construct) => construct instanceof Bucket)
 */
export const suppressRules = (
  construct: IConstruct,
  ids: string[],
  comment: string,
  predicate?: (construct: IConstruct) => boolean,
) => {
  const resources = (
    predicate ? construct.node.findAll().filter(predicate) : [construct]
  )
    .map((resource) => {
      if (CfnResource.isCfnResource(resource)) {
        return resource;
      } else return resource.node.defaultChild;
    })
    .filter((resource) => CfnResource.isCfnResource(resource));

  resources.forEach((resource) => {
    const metadata = resource.getMetadata('checkov') || {};
    metadata['skip'] = [
      ...(metadata['skip'] ?? []),
      ...ids.map((id) => ({ id, comment })),
    ];
    resource.addMetadata('checkov', metadata);
  });
};
"
`;

exports[`shared-constructs utils > sharedConstructsGenerator > should generate shared constructs when they do not exist > packages/common/constructs/src/core/index.ts 1`] = `
"export * from './app.js';
export * from './checkov.js';
export * from './runtime-config.js';
"
`;

exports[`shared-constructs utils > sharedConstructsGenerator > should generate shared constructs when they do not exist > packages/common/constructs/src/core/runtime-config.ts 1`] = `
"import { Stack, Stage } from 'aws-cdk-lib';
import { Construct } from 'constructs';

const RuntimeConfigKey = '__RuntimeConfig__';

export class RuntimeConfig extends Construct {
  private readonly _runtimeConfig: any = {};

  static ensure(scope: Construct): RuntimeConfig {
    const parent = Stage.of(scope) ?? Stack.of(scope);
    return (
      RuntimeConfig.of(scope) ?? new RuntimeConfig(parent, RuntimeConfigKey)
    );
  }

  static of(scope: Construct): RuntimeConfig | undefined {
    const parent = Stage.of(scope) ?? Stack.of(scope);
    return parent.node.tryFindChild(RuntimeConfigKey) as
      | RuntimeConfig
      | undefined;
  }

  constructor(scope: Construct, id: string) {
    super(scope, id);
  }

  get config(): any {
    return this._runtimeConfig;
  }
}
"
`;

exports[`shared-constructs utils > sharedConstructsGenerator > should generate shared constructs when they do not exist > packages/common/constructs/src/index.ts 1`] = `
"export * from './app/index.js';
export * from './core/index.js';
"
`;
