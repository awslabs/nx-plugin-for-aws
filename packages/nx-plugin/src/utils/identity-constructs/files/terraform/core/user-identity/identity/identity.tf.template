terraform {
  required_providers {
    aws = {
      source  = "hashicorp/aws"
      version = "~> 6.0"
    }
    random = {
      source  = "hashicorp/random"
      version = "~> 3.1"
    }
  }
}

# Variables
variable "user_pool_domain_prefix" {
  description = "Prefix for the Cognito User Pool domain"
  type        = string
}

variable "allow_signup" {
  description = "Set to true to allow users to sign themselves up"
  type        = bool
}

variable "callback_urls" {
  description = "Additional callback URLs for the user pool client"
  type        = list(string)
  default     = []
}

variable "logout_urls" {
  description = "Additional logout URLs for the user pool client"
  type        = list(string)
  default     = []
}

# Data sources
data "aws_caller_identity" "current" {}
data "aws_region" "current" {}

# Random suffix for resource names
resource "random_id" "unique_suffix" {
  byte_length = 4
}

# Generate a random external ID for SMS role security
resource "random_uuid" "sms_external_id" {}

# IAM role for SMS MFA
resource "aws_iam_role" "cognito_sms_role" {
  name = "cognito-sms-role-${random_id.unique_suffix.hex}"

  assume_role_policy = jsonencode({
    Version = "2012-10-17"
    Statement = [
      {
        Action = "sts:AssumeRole"
        Effect = "Allow"
        Principal = {
          Service = "cognito-idp.amazonaws.com"
        }
        Condition = {
          StringEquals = {
            "sts:ExternalId" = random_uuid.sms_external_id.result
            "aws:SourceAccount" = data.aws_caller_identity.current.account_id
          }
          ArnLike = {
            "aws:SourceArn" = "arn:aws:cognito-idp:${data.aws_region.current.name}:${data.aws_caller_identity.current.account_id}:userpool/*"
          }
        }
      }
    ]
  })
}

resource "aws_iam_role_policy" "cognito_sms_policy" {
  # checkov:skip=CKV_AWS_290:Cognito SMS requires sns:Publish with wildcard resource
  # checkov:skip=CKV_AWS_355:Cognito SMS requires sns:Publish with wildcard resource
  name = "cognito-sms-policy-${random_id.unique_suffix.hex}"
  role = aws_iam_role.cognito_sms_role.id

  policy = jsonencode({
    Version = "2012-10-17"
    Statement = [
      {
        Effect = "Allow"
        Action = [
          "sns:Publish"
        ]
        Resource = "*"
      }
    ]
  })
}

# Cognito User Pool
resource "aws_cognito_user_pool" "user_pool" {
  name                = "UserPool-${random_id.unique_suffix.hex}"
  deletion_protection = "ACTIVE"

  admin_create_user_config {
    allow_admin_create_user_only = !var.allow_signup
  }

  # Password policy
  password_policy {
    minimum_length                   = 8
    require_lowercase                = true
    require_uppercase                = true
    require_numbers                  = true
    require_symbols                  = true
    temporary_password_validity_days = 3
  }

  # MFA configuration
  mfa_configuration = "ON"

  # Software token MFA configuration
  software_token_mfa_configuration {
    enabled = true
  }

  # SMS MFA configuration
  sms_configuration {
    external_id    = random_uuid.sms_external_id.result
    sns_caller_arn = aws_iam_role.cognito_sms_role.arn
    sns_region     = data.aws_region.current.name
  }

  depends_on = [aws_iam_role_policy.cognito_sms_policy]

  # Sign-in configuration
  username_configuration {
    case_sensitive = false
  }

  alias_attributes = ["email"]

  # Account recovery
  account_recovery_setting {
    recovery_mechanism {
      name     = "verified_email"
      priority = 1
    }
  }

  # Auto verification
  auto_verified_attributes = ["email", "phone_number"]

  # User pool add-ons (equivalent to FeaturePlan.ESSENTIALS)
  user_pool_add_ons {
    advanced_security_mode = "ENFORCED"
  }

  # Schema attributes
  schema {
    attribute_data_type = "String"
    name                = "email"
    required            = true
    mutable             = true

    string_attribute_constraints {
      min_length = 1
      max_length = 256
    }
  }

  schema {
    attribute_data_type = "String"
    name                = "given_name"
    required            = true
    mutable             = true

    string_attribute_constraints {
      min_length = 1
      max_length = 256
    }
  }

  schema {
    attribute_data_type = "String"
    name                = "family_name"
    required            = true
    mutable             = true

    string_attribute_constraints {
      min_length = 1
      max_length = 256
    }
  }

  schema {
    attribute_data_type = "String"
    name                = "phone_number"
    required            = false
    mutable             = true

    string_attribute_constraints {
      min_length = 1
      max_length = 256
    }
  }

  # User attribute update settings - require verification before update
  user_attribute_update_settings {
    attributes_require_verification_before_update = ["email", "phone_number"]
  }

  # Verification message templates
  verification_message_template {
    default_email_option = "CONFIRM_WITH_CODE"
    email_message         = "The verification code to your new account is {####}"
    email_subject         = "Verify your new account"
    sms_message          = "The verification code to your new account is {####}"
  }

  tags = {
    Name = "UserPool-${random_id.unique_suffix.hex}"
  }
}

# User Pool Domain - temporarily commented out to resolve domain conflicts
# Will be re-enabled after User Pool Client OAuth configuration is fixed
resource "aws_cognito_user_pool_domain" "user_pool_domain" {
  domain                   = "${var.user_pool_domain_prefix}-${data.aws_caller_identity.current.account_id}-${random_id.unique_suffix.hex}"
  user_pool_id            = aws_cognito_user_pool.user_pool.id
  managed_login_version   = 2
}

# User Pool Client
resource "aws_cognito_user_pool_client" "web_client" {
  name         = "WebClient-${random_id.unique_suffix.hex}"
  user_pool_id = aws_cognito_user_pool.user_pool.id

  # Auth flows - match CDK implementation (order matches CloudFormation)
  explicit_auth_flows = [
    "ALLOW_REFRESH_TOKEN_AUTH",
    "ALLOW_USER_AUTH",
    "ALLOW_USER_PASSWORD_AUTH",
    "ALLOW_USER_SRP_AUTH"
  ]

  # Supported identity providers
  supported_identity_providers = ["COGNITO"]

  # OAuth configuration - MUST be set before callback/logout URLs
  allowed_oauth_flows_user_pool_client = true
  allowed_oauth_flows = ["code"]
  allowed_oauth_scopes = ["email", "openid", "profile"]

  # OAuth-dependent URLs - set after OAuth configuration
  callback_urls = concat([
    "http://localhost:4200",
    "http://localhost:4300",
    "https://${data.aws_region.current.name}.console.aws.amazon.com"
  ], var.callback_urls)

  logout_urls = concat([
    "http://localhost:4200",
    "http://localhost:4300",
    "https://${data.aws_region.current.name}.console.aws.amazon.com"
  ], var.logout_urls)

  # Security settings
  prevent_user_existence_errors = "ENABLED"
  enable_token_revocation = true
  enable_propagate_additional_user_context_data = false

  # Token validity - ONLY refresh token to match CloudFormation exactly
  refresh_token_validity = 30

  # Auth session validity
  auth_session_validity = 3

}

# Identity Pool
resource "aws_cognito_identity_pool" "identity_pool" {
  identity_pool_name               = "IdentityPool-${random_id.unique_suffix.hex}"
  allow_unauthenticated_identities = false

  cognito_identity_providers {
    client_id               = aws_cognito_user_pool_client.web_client.id
    provider_name           = aws_cognito_user_pool.user_pool.endpoint
    server_side_token_check = true
  }

  tags = {
    Name = "IdentityPool-${random_id.unique_suffix.hex}"
  }
}

# IAM roles for identity pool
resource "aws_iam_role" "authenticated_role" {
  name = "cognito-authenticated-role-${random_id.unique_suffix.hex}"

  assume_role_policy = jsonencode({
    Version = "2012-10-17"
    Statement = [
      {
        Effect = "Allow"
        Principal = {
          Federated = "cognito-identity.amazonaws.com"
        }
        Action = "sts:AssumeRoleWithWebIdentity"
        Condition = {
          StringEquals = {
            "cognito-identity.amazonaws.com:aud" = aws_cognito_identity_pool.identity_pool.id
          }
          "ForAnyValue:StringLike" = {
            "cognito-identity.amazonaws.com:amr" = "authenticated"
          }
        }
      }
    ]
  })
}

resource "aws_iam_role" "unauthenticated_role" {
  name = "cognito-unauthenticated-role-${random_id.unique_suffix.hex}"

  assume_role_policy = jsonencode({
    Version = "2012-10-17"
    Statement = [
      {
        Effect = "Allow"
        Principal = {
          Federated = "cognito-identity.amazonaws.com"
        }
        Action = "sts:AssumeRoleWithWebIdentity"
        Condition = {
          StringEquals = {
            "cognito-identity.amazonaws.com:aud" = aws_cognito_identity_pool.identity_pool.id
          }
          "ForAnyValue:StringLike" = {
            "cognito-identity.amazonaws.com:amr" = "unauthenticated"
          }
        }
      }
    ]
  })
}

# Attach roles to identity pool
resource "aws_cognito_identity_pool_roles_attachment" "identity_pool_roles" {
  identity_pool_id = aws_cognito_identity_pool.identity_pool.id

  roles = {
    "authenticated"   = aws_iam_role.authenticated_role.arn
    "unauthenticated" = aws_iam_role.unauthenticated_role.arn
  }
}

# Managed Login Branding - temporarily commented out to resolve state conflicts
# Will be re-enabled after User Pool Client OAuth configuration is fixed
resource "aws_cognito_managed_login_branding" "managed_login_branding" {
  user_pool_id                = aws_cognito_user_pool.user_pool.id
  client_id                   = aws_cognito_user_pool_client.web_client.id
  use_cognito_provided_values = true

  depends_on = [
    aws_cognito_user_pool.user_pool,
    aws_cognito_user_pool_client.web_client,
    aws_cognito_user_pool_domain.user_pool_domain  # commented out with domain
  ]

}

# Always add cognito props to runtime config
module "add_cognito_to_runtime_config" {
  source = "../../runtime-config/entry"

  key_path = "cognitoProps"
  value = {
    region              = data.aws_region.current.name
    identityPoolId      = aws_cognito_identity_pool.identity_pool.id
    userPoolId          = aws_cognito_user_pool.user_pool.id
    userPoolWebClientId = aws_cognito_user_pool_client.web_client.id
  }
}

# Outputs
output "region" {
  description = "AWS region"
  value       = data.aws_region.current.name
}

output "user_pool_id" {
  description = "ID of the Cognito User Pool"
  value       = aws_cognito_user_pool.user_pool.id
}

output "user_pool_arn" {
  description = "ARN of the Cognito User Pool"
  value       = aws_cognito_user_pool.user_pool.arn
}

output "user_pool_client_id" {
  description = "ID of the Cognito User Pool Client"
  value       = aws_cognito_user_pool_client.web_client.id
}

output "identity_pool_id" {
  description = "ID of the Cognito Identity Pool"
  value       = aws_cognito_identity_pool.identity_pool.id
}

output "authenticated_role_name" {
  description = "Name of the authenticated IAM role"
  value       = aws_iam_role.authenticated_role.name
}

output "authenticated_role_arn" {
  description = "ARN of the authenticated IAM role"
  value       = aws_iam_role.authenticated_role.arn
}

output "user_pool_domain" {
  description = "Domain of the Cognito User Pool"
  value       = aws_cognito_user_pool_domain.user_pool_domain.domain
}
