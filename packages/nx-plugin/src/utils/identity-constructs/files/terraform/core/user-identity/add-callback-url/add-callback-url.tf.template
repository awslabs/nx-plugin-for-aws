terraform {
  required_providers {
    aws = {
      source  = "hashicorp/aws"
      version = "~> 6.0"
    }
  }
}

# Variables
variable "callback_url" {
  description = "Callback URL to add (e.g., https://d123456789.cloudfront.net)"
  type        = string
}

# Read runtime config to get user pool client details
module "runtime_config_reader" {
  source = "../../runtime-config/read"
}

# Extract cognito details from runtime config
locals {
  cognito_props = try(module.runtime_config_reader.config.cognitoProps, null)

  user_pool_id        = local.cognito_props != null ? local.cognito_props.userPoolId : null
  user_pool_client_id = local.cognito_props != null ? local.cognito_props.userPoolWebClientId : null
}

# Validation: Ensure cognito props exist in runtime config
resource "terraform_data" "validate_cognito_props" {
  lifecycle {
    precondition {
      condition     = local.cognito_props != null
      error_message = "ERROR: cognitoProps not found in runtime config. Ensure user-identity module has been deployed first and has added cognitoProps to the runtime configuration."
    }

    precondition {
      condition     = local.user_pool_id != null && local.user_pool_id != ""
      error_message = "ERROR: cognitoProps.userPoolId is missing or empty in runtime config. Check that user-identity module completed successfully."
    }

    precondition {
      condition     = local.user_pool_client_id != null && local.user_pool_client_id != ""
      error_message = "ERROR: cognitoProps.userPoolWebClientId is missing or empty in runtime config. Check that user-identity module completed successfully."
    }
  }
}


# Update the user pool client with additional callback URL
resource "null_resource" "add_callback_url" {
  triggers = {
    callback_url        = var.callback_url
    user_pool_id        = local.user_pool_id
    user_pool_client_id = local.user_pool_client_id
  }

  provisioner "local-exec" {
    command = <<-EOT
      uv run --with boto3 python -c "
import boto3
import sys

# Configuration
user_pool_id = '${local.user_pool_id}'
client_id = '${local.user_pool_client_id}'
new_callback_url = '${var.callback_url}'

# Initialize Cognito client
cognito = boto3.client('cognito-idp')

try:
    # Get current user pool client configuration
    response = cognito.describe_user_pool_client(
        UserPoolId=user_pool_id,
        ClientId=client_id
    )

    client_config = response['UserPoolClient']
    current_callback_urls = client_config.get('CallbackURLs', [])
    current_logout_urls = client_config.get('LogoutURLs', [])

    # Check if URL already exists
    if new_callback_url in current_callback_urls:
        print(f'Callback URL {new_callback_url} already exists')
    else:
        # Add new URL to both callback and logout URLs
        updated_callback_urls = current_callback_urls + [new_callback_url]
        updated_logout_urls = current_logout_urls + [new_callback_url]

        # Update the user pool client
        # Only include valid update parameters (exclude read-only fields and ones we're setting)
        valid_update_params = [
            'ClientName', 'RefreshTokenValidity', 'AccessTokenValidity', 'IdTokenValidity',
            'TokenValidityUnits', 'ReadAttributes', 'WriteAttributes', 'ExplicitAuthFlows',
            'SupportedIdentityProviders', 'DefaultRedirectURI', 'AllowedOAuthFlows',
            'AllowedOAuthScopes', 'AllowedOAuthFlowsUserPoolClient', 'AnalyticsConfiguration',
            'PreventUserExistenceErrors', 'EnableTokenRevocation',
            'EnablePropagateAdditionalUserContextData', 'AuthSessionValidity', 'RefreshTokenRotation'
        ]

        update_config = {k: v for k, v in client_config.items() if k in valid_update_params}

        cognito.update_user_pool_client(
            UserPoolId=user_pool_id,
            ClientId=client_id,
            CallbackURLs=updated_callback_urls,
            LogoutURLs=updated_logout_urls,
            **update_config
        )

        print(f'Successfully added callback URL: {new_callback_url}')

except Exception as e:
    print(f'Error updating callback URLs: {e}')
    sys.exit(1)
"
    EOT
  }

  depends_on = [terraform_data.validate_cognito_props]
}

