// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`cognito-auth generator > should generate files > cognito-auth-component 1`] = `
"import React, { PropsWithChildren, useEffect } from 'react';
import { AuthProvider, AuthProviderProps, useAuth } from 'react-oidc-context';
import { Alert, Spinner } from '@cloudscape-design/components';
import { useRuntimeConfig } from '../../hooks/useRuntimeConfig';

/**
 * Sets up the Cognito auth.
 *
 * This assumes a runtime-config.json file is present at '/'. In order for Auth to be set up automatically,
 * the runtime-config.json must have the cognitoProps set.
 */
const CognitoAuth: React.FC<PropsWithChildren> = ({ children }) => {
  const { cognitoProps } = useRuntimeConfig();

  if (!cognitoProps) {
    if (import.meta.env.MODE === 'serve-local') {
      // In serve-local mode with no cognitoProps available, we skip login
      return <AuthProvider>{children}</AuthProvider>;
    }
    return (
      <Alert type="error" header="Runtime config configuration error">
        The cognitoProps have not been configured in the runtime-config.json.
      </Alert>
    );
  }

  const cognitoAuthConfig: AuthProviderProps = {
    authority: \`https://cognito-idp.\${cognitoProps.region}.amazonaws.com/\${cognitoProps.userPoolId}\`,
    client_id: cognitoProps.userPoolWebClientId,
    redirect_uri: window.location.origin,
    response_type: 'code',
    scope: 'email openid profile',
  };

  return (
    <AuthProvider {...cognitoAuthConfig}>
      <CognitoAuthInternal>{children}</CognitoAuthInternal>
    </AuthProvider>
  );
};

const CognitoAuthInternal: React.FC<PropsWithChildren> = ({ children }) => {
  const auth = useAuth();

  useEffect(() => {
    if (!auth.isAuthenticated && !auth.isLoading) {
      auth.signinRedirect();
    }
  }, [auth]);

  if (auth.isAuthenticated) {
    return children;
  } else if (auth.error) {
    return (
      <Alert type="error" header="Configuration error">
        Error contacting Cognito. Please check your runtime-config.json is
        configured with the correct endpoints.
      </Alert>
    );
  } else {
    return <Spinner />;
  }
};

export default CognitoAuth;
"
`;

exports[`cognito-auth generator > should generate files > identity-index 1`] = `
"export * from './user-identity.js';
export * from './app.js';
export * from './runtime-config.js';
"
`;

exports[`cognito-auth generator > should generate files > user-identity 1`] = `
"import {
  IdentityPool,
  UserPoolAuthenticationProvider,
} from 'aws-cdk-lib/aws-cognito-identitypool';
import { CfnOutput, Duration, Lazy, Stack } from 'aws-cdk-lib';
import {
  AccountRecovery,
  CfnManagedLoginBranding,
  CfnUserPoolDomain,
  FeaturePlan,
  Mfa,
  OAuthScope,
  UserPool,
  UserPoolClient,
} from 'aws-cdk-lib/aws-cognito';
import { Construct } from 'constructs';
import { RuntimeConfig } from './runtime-config.js';
import { Distribution } from 'aws-cdk-lib/aws-cloudfront';
import { suppressRules } from './checkov.js';

const WEB_CLIENT_ID = 'WebClient';
/**
 * Creates a UserPool and Identity Pool with sane defaults configured intended for usage from a web client.
 */
export class UserIdentity extends Construct {
  public readonly region: string;
  public readonly identityPool: IdentityPool;
  public readonly userPool: UserPool;
  public readonly userPoolClient: UserPoolClient;
  public readonly userPoolDomain: CfnUserPoolDomain;

  constructor(scope: Construct, id: string) {
    super(scope, id);

    this.region = Stack.of(this).region;
    this.userPool = this.createUserPool();
    this.userPoolDomain = this.createUserPoolDomain(this.userPool);
    this.userPoolClient = this.createUserPoolClient(this.userPool);
    this.identityPool = this.createIdentityPool(
      this.userPool,
      this.userPoolClient,
    );
    this.createManagedLoginBranding(
      this.userPool,
      this.userPoolClient,
      this.userPoolDomain,
    );

    RuntimeConfig.ensure(this).config.cognitoProps = {
      region: Stack.of(this).region,
      identityPoolId: this.identityPool.identityPoolId,
      userPoolId: this.userPool.userPoolId,
      userPoolWebClientId: this.userPoolClient.userPoolClientId,
    };

    suppressRules(
      this.userPool,
      ['CKV_AWS_111'],
      'SMS Role requires wildcard resource',
      (c) => c.node.path.includes('/smsRole/'),
    );

    new CfnOutput(this, \`\${id}-UserPoolId\`, {
      value: this.userPool.userPoolId,
    });

    new CfnOutput(this, \`\${id}-IdentityPoolId\`, {
      value: this.identityPool.identityPoolId,
    });
  }

  private createUserPool = () =>
    new UserPool(this, 'UserPool', {
      deletionProtection: true,
      passwordPolicy: {
        minLength: 8,
        requireLowercase: true,
        requireUppercase: true,
        requireDigits: true,
        requireSymbols: true,
        tempPasswordValidity: Duration.days(3),
      },
      mfa: Mfa.REQUIRED,
      featurePlan: FeaturePlan.ESSENTIALS,
      mfaSecondFactor: { sms: true, otp: true },
      signInCaseSensitive: false,
      signInAliases: { username: true, email: true },
      accountRecovery: AccountRecovery.EMAIL_ONLY,
      selfSignUpEnabled: true,
      standardAttributes: {
        phoneNumber: { required: false },
        email: { required: true },
        givenName: { required: true },
        familyName: { required: true },
      },
      autoVerify: {
        email: true,
        phone: true,
      },
      keepOriginal: {
        email: true,
        phone: true,
      },
    });

  private createUserPoolDomain = (userPool: UserPool) =>
    new CfnUserPoolDomain(this, 'UserPoolDomain', {
      domain: \`test-\${Stack.of(this).account}\`,
      userPoolId: userPool.userPoolId,
      managedLoginVersion: 2,
    });

  private createUserPoolClient = (userPool: UserPool) => {
    const lazilyComputedCallbackUrls = Lazy.list({
      produce: () =>
        [
          'http://localhost:4200',
          'http://localhost:4300',
          \`https://\${Stack.of(this).region}.console.aws.amazon.com\`,
        ].concat(
          this.findCloudFrontDistributions().map(
            (d) => \`https://\${d.domainName}\`,
          ),
        ),
    });

    return userPool.addClient(WEB_CLIENT_ID, {
      authFlows: {
        userPassword: true,
        userSrp: true,
        user: true,
      },
      oAuth: {
        flows: {
          authorizationCodeGrant: true,
        },
        scopes: [OAuthScope.EMAIL, OAuthScope.OPENID, OAuthScope.PROFILE],
        callbackUrls: lazilyComputedCallbackUrls,
        logoutUrls: lazilyComputedCallbackUrls,
      },
      preventUserExistenceErrors: true,
    });
  };

  private createIdentityPool = (
    userPool: UserPool,
    userPoolClient: UserPoolClient,
  ) => {
    const identityPool = new IdentityPool(this, 'IdentityPool');

    identityPool.addUserPoolAuthentication(
      new UserPoolAuthenticationProvider({
        userPool,
        userPoolClient,
      }),
    );

    return identityPool;
  };

  private createManagedLoginBranding = (
    userPool: UserPool,
    userPoolClient: UserPoolClient,
    userPoolDomain: CfnUserPoolDomain,
  ) => {
    new CfnManagedLoginBranding(this, 'ManagedLoginBranding', {
      userPoolId: userPool.userPoolId,
      clientId: userPoolClient.userPoolClientId,
      useCognitoProvidedValues: true,
    }).node.addDependency(userPoolClient, userPool, userPoolDomain);
  };

  private findCloudFrontDistributions = (): Distribution[] =>
    Stack.of(this)
      .node.findAll()
      .filter((child) => child instanceof Distribution);
}
"
`;

exports[`cognito-auth generator > should not be able to run the generator multiple times 1`] = `[Error: This generator has already been run on test-project.]`;

exports[`cognito-auth generator > should update AppLayout > app-layout-with-auth 1`] = `
"import { useAuth } from 'react-oidc-context';
import * as React from 'react';
import { createContext, useCallback, useEffect, useState } from 'react';
import { NavItems } from './navitems';
import Config from '../../config';

import {
  BreadcrumbGroup,
  BreadcrumbGroupProps,
  SideNavigation,
  TopNavigation,
} from '@cloudscape-design/components';

import CloudscapeAppLayout, {
  AppLayoutProps,
} from '@cloudscape-design/components/app-layout';

import { matchByPath, useLocation, useNavigate } from '@tanstack/react-router';
import { Outlet } from '@tanstack/react-router';

const getBreadcrumbs = (
  pathName: string,
  search: string,
  defaultBreadcrumb: string,
  availableRoutes?: string[],
) => {
  const segments = [
    defaultBreadcrumb,
    ...pathName.split('/').filter((segment) => segment !== ''),
  ];

  return segments.map((segment, i) => {
    const href =
      i === 0
        ? '/'
        : \`/\${segments
            .slice(1, i + 1)
            .join('/')
            .replace('//', '/')}\`;

    const matched =
      !availableRoutes || availableRoutes.find((r) => matchByPath(r, href, {}));

    return {
      href: matched ? \`\${href}\${search}\` : '#',
      text: segment,
    };
  });
};

export interface AppLayoutContext {
  appLayoutProps: AppLayoutProps;
  setAppLayoutProps: (props: AppLayoutProps) => void;
  displayHelpPanel: (helpContent: React.ReactNode) => void;
}

/**
 * Context for updating/retrieving the AppLayout.
 */
export const AppLayoutContext = createContext({
  appLayoutProps: {},
  // eslint-disable-next-line @typescript-eslint/no-empty-function
  setAppLayoutProps: (_: AppLayoutProps) => {},
  // eslint-disable-next-line @typescript-eslint/no-empty-function
  displayHelpPanel: (_: React.ReactNode) => {},
});

/**
 * Defines the App layout and contains logic for routing.
 */
const AppLayout: React.FC = () => {
  const { user, removeUser, signoutRedirect, clearStaleState } = useAuth();
  const navigate = useNavigate();
  const appLayout = React.useRef<AppLayoutProps.Ref>(null);
  const [activeBreadcrumbs, setActiveBreadcrumbs] = useState<
    BreadcrumbGroupProps.Item[]
  >([{ text: '/', href: '/' }]);
  const [appLayoutProps, setAppLayoutProps] = useState<AppLayoutProps>({});
  const { pathname, search } = useLocation();
  const setAppLayoutPropsSafe = useCallback(
    (props: AppLayoutProps) => {
      JSON.stringify(appLayoutProps) !== JSON.stringify(props) &&
        setAppLayoutProps(props);
    },
    [appLayoutProps],
  );
  useEffect(() => {
    const breadcrumbs = getBreadcrumbs(
      pathname,
      Object.entries(search).reduce((p, [k, v]) => p + \`\${k}=\${v}\`, ''),
      '/',
    );
    setActiveBreadcrumbs(breadcrumbs);
  }, [pathname, search]);
  const onNavigate = useCallback(
    (
      e: CustomEvent<{
        href: string;
        external?: boolean;
      }>,
    ) => {
      if (!e.detail.external) {
        e.preventDefault();
        setAppLayoutPropsSafe({
          contentType: undefined,
        });
        navigate({ to: e.detail.href });
      }
    },
    [navigate, setAppLayoutPropsSafe],
  );
  return (
    <AppLayoutContext.Provider
      value={{
        appLayoutProps,
        setAppLayoutProps: setAppLayoutPropsSafe,
        displayHelpPanel: (helpContent: React.ReactNode) => {
          setAppLayoutPropsSafe({ tools: helpContent, toolsHide: false });
          appLayout.current?.openTools();
        },
      }}
    >
      <TopNavigation
        identity={{
          href: '/',
          title: Config.applicationName,
          logo: {
            src: Config.logo,
          },
        }}
        utilities={[
          {
            type: 'menu-dropdown',
            text: \`\${user?.profile?.['cognito:username']}\`,
            iconName: 'user-profile-active',
            onItemClick: (e) => {
              if (e.detail.id === 'signout') {
                removeUser();
                signoutRedirect({
                  post_logout_redirect_uri: window.location.origin,
                  extraQueryParams: {
                    redirect_uri: window.location.origin,
                    response_type: 'code',
                  },
                });
                clearStaleState();
              }
            },
            items: [{ id: 'signout', text: 'Sign out' }],
          },
        ]}
      />
      <CloudscapeAppLayout
        ref={appLayout}
        breadcrumbs={
          <BreadcrumbGroup onFollow={onNavigate} items={activeBreadcrumbs} />
        }
        toolsHide
        navigation={
          <SideNavigation
            header={{ text: Config.applicationName, href: '/' }}
            activeHref={pathname}
            onFollow={onNavigate}
            items={NavItems}
          />
        }
        content={<Outlet />}
        {...appLayoutProps}
      />
    </AppLayoutContext.Provider>
  );
};

export default AppLayout;
"
`;

exports[`cognito-auth generator > should update main.tsx when RuntimeConfigProvider exists > main-tsx-with-runtime-config 1`] = `
"import CognitoAuth from './components/CognitoAuth';
import RuntimeConfigProvider from './components/RuntimeConfig';

import { RuntimeConfigProvider } from './components/RuntimeConfig';
import { RouterProvider, createRouter } from '@tanstack/react-router';

export function Main() {
  const App = () => <RouterProvider router={router} />;

  return (
    <RuntimeConfigProvider>
      <CognitoAuth>
        <RuntimeConfigProvider>
          <App />
        </RuntimeConfigProvider>
      </CognitoAuth>
    </RuntimeConfigProvider>
  );
}
"
`;

exports[`cognito-auth generator > should update shared constructs index.ts > common/constructs-index 1`] = `
"export * from './user-identity.js';
export * from './app.js';
export * from './runtime-config.js';
"
`;

exports[`cognito-auth generator > terraform iacProvider > should generate terraform files for cognito auth and snapshot them > terraform-cognito-auth-files 1`] = `
{
  "add-callback-url.tf": "terraform {
  required_providers {
    aws = {
      source  = "hashicorp/aws"
      version = "~> 6.0"
    }
  }
}

# Variables
variable "callback_url" {
  description = "Callback URL to add (e.g., https://d123456789.cloudfront.net)"
  type        = string
}

# Read runtime config to get user pool client details
module "runtime_config_reader" {
  source = "../../runtime-config/read"
}

# Extract cognito details from runtime config
locals {
  cognito_props = try(module.runtime_config_reader.config.cognitoProps, null)

  user_pool_id        = local.cognito_props != null ? local.cognito_props.userPoolId : null
  user_pool_client_id = local.cognito_props != null ? local.cognito_props.userPoolWebClientId : null
}

# Validation: Ensure cognito props exist in runtime config
resource "terraform_data" "validate_cognito_props" {
  lifecycle {
    precondition {
      condition     = local.cognito_props != null
      error_message = "ERROR: cognitoProps not found in runtime config. Ensure user-identity module has been deployed first and has added cognitoProps to the runtime configuration."
    }

    precondition {
      condition     = local.user_pool_id != null && local.user_pool_id != ""
      error_message = "ERROR: cognitoProps.userPoolId is missing or empty in runtime config. Check that user-identity module completed successfully."
    }

    precondition {
      condition     = local.user_pool_client_id != null && local.user_pool_client_id != ""
      error_message = "ERROR: cognitoProps.userPoolWebClientId is missing or empty in runtime config. Check that user-identity module completed successfully."
    }
  }
}


# Update the user pool client with additional callback URL
resource "null_resource" "add_callback_url" {
  triggers = {
    callback_url        = var.callback_url
    user_pool_id        = local.user_pool_id
    user_pool_client_id = local.user_pool_client_id
  }

  provisioner "local-exec" {
    command = <<-EOT
      uv run --with boto3 python -c "
import boto3
import sys

# Configuration
user_pool_id = '\${local.user_pool_id}'
client_id = '\${local.user_pool_client_id}'
new_callback_url = '\${var.callback_url}'

# Initialize Cognito client
cognito = boto3.client('cognito-idp')

try:
    # Get current user pool client configuration
    response = cognito.describe_user_pool_client(
        UserPoolId=user_pool_id,
        ClientId=client_id
    )

    client_config = response['UserPoolClient']
    current_callback_urls = client_config.get('CallbackURLs', [])
    current_logout_urls = client_config.get('LogoutURLs', [])

    # Check if URL already exists
    if new_callback_url in current_callback_urls:
        print(f'Callback URL {new_callback_url} already exists')
    else:
        # Add new URL to both callback and logout URLs
        updated_callback_urls = current_callback_urls + [new_callback_url]
        updated_logout_urls = current_logout_urls + [new_callback_url]

        # Update the user pool client
        # Only include valid update parameters (exclude read-only fields and ones we're setting)
        valid_update_params = [
            'ClientName', 'RefreshTokenValidity', 'AccessTokenValidity', 'IdTokenValidity',
            'TokenValidityUnits', 'ReadAttributes', 'WriteAttributes', 'ExplicitAuthFlows',
            'SupportedIdentityProviders', 'DefaultRedirectURI', 'AllowedOAuthFlows',
            'AllowedOAuthScopes', 'AllowedOAuthFlowsUserPoolClient', 'AnalyticsConfiguration',
            'PreventUserExistenceErrors', 'EnableTokenRevocation',
            'EnablePropagateAdditionalUserContextData', 'AuthSessionValidity', 'RefreshTokenRotation'
        ]

        update_config = {k: v for k, v in client_config.items() if k in valid_update_params}

        cognito.update_user_pool_client(
            UserPoolId=user_pool_id,
            ClientId=client_id,
            CallbackURLs=updated_callback_urls,
            LogoutURLs=updated_logout_urls,
            **update_config
        )

        print(f'Successfully added callback URL: {new_callback_url}')

except Exception as e:
    print(f'Error updating callback URLs: {e}')
    sys.exit(1)
"
    EOT
  }

  depends_on = [terraform_data.validate_cognito_props]
}

",
  "user-identity.tf": "module "identity" {
  source = "./identity"

  user_pool_domain_prefix = "test"
  allow_signup = true
}

# Outputs
output "region" {
  description = "AWS region"
  value       = module.identity.region
}

output "user_pool_id" {
  description = "ID of the Cognito User Pool"
  value       = module.identity.user_pool_id
}

output "user_pool_arn" {
  description = "ARN of the Cognito User Pool"
  value       = module.identity.user_pool_arn
}

output "user_pool_client_id" {
  description = "ID of the Cognito User Pool Client"
  value       = module.identity.user_pool_client_id
}

output "identity_pool_id" {
  description = "ID of the Cognito Identity Pool"
  value       = module.identity.identity_pool_id
}

output "authenticated_role_name" {
  description = "Name of the authenticated IAM role"
  value       = module.identity.authenticated_role_name
}

output "authenticated_role_arn" {
  description = "ARN of the authenticated IAM role"
  value       = module.identity.authenticated_role_arn
}

output "user_pool_domain" {
  description = "Domain of the Cognito User Pool"
  value       = module.identity.user_pool_domain
}
",
}
`;

exports[`cognito-auth generator > terraform iacProvider > should place add-callback-url module directly after cloudfront distribution resource > complex-static-website-with-callback-url 1`] = `
"
# Some initial resources
resource "aws_s3_bucket" "website" {
  bucket = "test-bucket"
}

resource "aws_cloudfront_distribution" "website" {
  origin {
    domain_name = aws_s3_bucket.website.bucket_regional_domain_name
    origin_id   = "S3-\${aws_s3_bucket.website.id}"
  }

  enabled             = true
  is_ipv6_enabled     = true
  default_root_object = "index.html"

  default_cache_behavior {
    allowed_methods        = ["DELETE", "GET", "HEAD", "OPTIONS", "PATCH", "POST", "PUT"]
    cached_methods         = ["GET", "HEAD"]
    target_origin_id       = "S3-\${aws_s3_bucket.website.id}"
    compress               = true
    viewer_protocol_policy = "redirect-to-https"
  }

  restrictions {
    geo_restriction {
      restriction_type = "none"
    }
  }

  viewer_certificate {
    cloudfront_default_certificate = true
  }
}

# Add CloudFront domain to user pool client callback URLs
module "add_callback_url" {
  source = "../user-identity/add-callback-url"

  callback_url = "https://\${aws_cloudfront_distribution.website.domain_name}"

  depends_on = [aws_cloudfront_distribution.website]
}

# S3 Bucket Policy for CloudFront OAC
resource "aws_s3_bucket_policy" "website_cloudfront_policy" {
  bucket = aws_s3_bucket.website.id
  policy = jsonencode({
    Version = "2012-10-17"
    Statement = [
      {
        Effect = "Allow"
        Principal = {
          Service = "cloudfront.amazonaws.com"
        }
        Action   = "s3:GetObject"
        Resource = "\${aws_s3_bucket.website.arn}/*"
      }
    ]
  })
}

# Some outputs
output "website_bucket_name" {
  value = aws_s3_bucket.website.bucket
}
        "
`;

exports[`cognito-auth generator > terraform iacProvider > should update static-website.tf with add-callback-url module > static-website-with-callback-url 1`] = `
"
module "static_website" {
  source = "../../../core/static-website"

  website_name = "test-project"
  build_path   = "dist/packages/test-project"
}
        "
`;
