<%_ const handlerImports = {
  'APIGatewayProxyHandler': { handler: 'APIGatewayProxyHandler', event: 'APIGatewayProxyEvent', result: 'APIGatewayProxyResult' },
  'APIGatewayProxyHandlerV2': { handler: 'APIGatewayProxyHandlerV2', event: 'APIGatewayProxyEventV2', result: 'APIGatewayProxyResultV2' },
  'S3Handler': { handler: 'S3Handler', event: 'S3Event', result: 'void' },
  'SQSHandler': { handler: 'SQSHandler', event: 'SQSEvent', result: 'void' },
  'SNSHandler': { handler: 'SNSHandler', event: 'SNSEvent', result: 'void' },
  'DynamoDBStreamHandler': { handler: 'DynamoDBStreamHandler', event: 'DynamoDBStreamEvent', result: 'void' },
  'KinesisStreamHandler': { handler: 'KinesisStreamHandler', event: 'KinesisStreamEvent', result: 'void' },
  'CloudWatchLogsHandler': { handler: 'CloudWatchLogsHandler', event: 'CloudWatchLogsEvent', result: 'void' },
  'ALBHandler': { handler: 'ALBHandler', event: 'ALBEvent', result: 'ALBResult' },
  'LambdaFunctionURLHandler': { handler: 'LambdaFunctionURLHandler', event: 'LambdaFunctionURLEvent', result: 'LambdaFunctionURLResult' },
  'APIGatewayAuthorizerHandler': { handler: 'APIGatewayAuthorizerHandler', event: 'APIGatewayAuthorizerEvent', result: 'APIGatewayAuthorizerResult' },
  'S3BatchHandler': { handler: 'S3BatchHandler', event: 'S3BatchEvent', result: 'S3BatchResult' },
  'SESHandler': { handler: 'SESHandler', event: 'SESEvent', result: 'void' },
  'ScheduledHandler': { handler: 'ScheduledHandler', event: 'ScheduledEvent', result: 'void' },
  'EventBridgeHandler': { handler: 'EventBridgeHandler', event: 'EventBridgeEvent', result: 'void' },
  'Handler': { handler: 'Handler', event: 'any', result: 'any' }
}; _%>
<%_ const handlerConfig = handlerImports[handlerType] || handlerImports['Handler']; _%>
import { <%= handlerConfig.handler %><%_ if (handlerConfig.event !== 'any') { _%>, <%= handlerConfig.event %><%_ } _%><%_ if (handlerConfig.result !== 'void' && handlerConfig.result !== 'any') { _%>, <%= handlerConfig.result %><%_ } _%>, Context } from 'aws-lambda';

<%_ if (handlerType === 'APIGatewayProxyHandler') { _%>
export const handler: <%= handlerConfig.handler %> = async (event: <%= handlerConfig.event %>, context: Context): Promise<APIGatewayProxyResult> => {
  console.log('Event:', JSON.stringify(event, null, 2));
  console.log('Context:', JSON.stringify(context, null, 2));

  try {
    // TODO: Implement your logic here
    const response = {
      message: 'Hello from <%= functionNamePascalCase %> Lambda function!',
      requestId: context.awsRequestId,
    };

    return {
      statusCode: 200,
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(response),
    };
  } catch (error) {
    console.error('Error:', error);
    return {
      statusCode: 500,
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        message: 'Internal Server Error',
        requestId: context.awsRequestId,
      }),
    };
  }
};
<%_ } else if (handlerType === 'APIGatewayProxyHandlerV2') { _%>
export const handler: <%= handlerConfig.handler %> = async (event: <%= handlerConfig.event %>, context: Context): Promise<APIGatewayProxyResultV2> => {
  console.log('Event:', JSON.stringify(event, null, 2));
  console.log('Context:', JSON.stringify(context, null, 2));

  try {
    // TODO: Implement your logic here
    const response = {
      message: 'Hello from <%= functionNamePascalCase %> Lambda function!',
      requestId: context.awsRequestId,
    };

    return {
      statusCode: 200,
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(response),
    };
  } catch (error) {
    console.error('Error:', error);
    return {
      statusCode: 500,
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        message: 'Internal Server Error',
        requestId: context.awsRequestId,
      }),
    };
  }
};
<%_ } else if (handlerType === 'S3Handler') { _%>
export const handler: <%= handlerConfig.handler %> = async (event: <%= handlerConfig.event %>, context: Context): Promise<void> => {
  console.log('Event:', JSON.stringify(event, null, 2));
  console.log('Context:', JSON.stringify(context, null, 2));

  try {
    for (const record of event.Records) {
      const bucket = record.s3.bucket.name;
      const key = decodeURIComponent(record.s3.object.key.replace(/\+/g, ' '));
      
      console.log(`Processing S3 object: ${key} from bucket: ${bucket}`);
      
      // TODO: Implement your S3 object processing logic here
    }
  } catch (error) {
    console.error('Error processing S3 event:', error);
    throw error;
  }
};
<%_ } else if (handlerType === 'SQSHandler') { _%>
export const handler: <%= handlerConfig.handler %> = async (event: <%= handlerConfig.event %>, context: Context): Promise<void> => {
  console.log('Event:', JSON.stringify(event, null, 2));
  console.log('Context:', JSON.stringify(context, null, 2));

  try {
    for (const record of event.Records) {
      console.log('Processing SQS message:', record.messageId);
      console.log('Message body:', record.body);
      
      // TODO: Implement your SQS message processing logic here
    }
  } catch (error) {
    console.error('Error processing SQS event:', error);
    throw error;
  }
};
<%_ } else if (handlerType === 'SNSHandler') { _%>
export const handler: <%= handlerConfig.handler %> = async (event: <%= handlerConfig.event %>, context: Context): Promise<void> => {
  console.log('Event:', JSON.stringify(event, null, 2));
  console.log('Context:', JSON.stringify(context, null, 2));

  try {
    for (const record of event.Records) {
      console.log('Processing SNS message:', record.Sns.MessageId);
      console.log('Subject:', record.Sns.Subject);
      console.log('Message:', record.Sns.Message);
      
      // TODO: Implement your SNS message processing logic here
    }
  } catch (error) {
    console.error('Error processing SNS event:', error);
    throw error;
  }
};
<%_ } else if (handlerType === 'DynamoDBStreamHandler') { _%>
export const handler: <%= handlerConfig.handler %> = async (event: <%= handlerConfig.event %>, context: Context): Promise<void> => {
  console.log('Event:', JSON.stringify(event, null, 2));
  console.log('Context:', JSON.stringify(context, null, 2));

  try {
    for (const record of event.Records) {
      console.log('Processing DynamoDB record:', record.eventID);
      console.log('Event name:', record.eventName);
      
      if (record.dynamodb && record.dynamodb.Keys) {
        console.log('DynamoDB keys:', JSON.stringify(record.dynamodb.Keys, null, 2));
      }
      
      // TODO: Implement your DynamoDB stream processing logic here
    }
  } catch (error) {
    console.error('Error processing DynamoDB stream event:', error);
    throw error;
  }
};
<%_ } else if (handlerType === 'EventBridgeHandler') { _%>
export const handler: <%= handlerConfig.handler %> = async (event: <%= handlerConfig.event %>, context: Context): Promise<void> => {
  console.log('Event:', JSON.stringify(event, null, 2));
  console.log('Context:', JSON.stringify(context, null, 2));

  try {
    console.log('Processing EventBridge event:', event['detail-type']);
    console.log('Source:', event.source);
    console.log('Detail:', JSON.stringify(event.detail, null, 2));
    
    // TODO: Implement your EventBridge event processing logic here
  } catch (error) {
    console.error('Error processing EventBridge event:', error);
    throw error;
  }
};
<%_ } else if (handlerType === 'ScheduledHandler') { _%>
export const handler: <%= handlerConfig.handler %> = async (event: <%= handlerConfig.event %>, context: Context): Promise<void> => {
  console.log('Event:', JSON.stringify(event, null, 2));
  console.log('Context:', JSON.stringify(context, null, 2));

  try {
    console.log('Processing scheduled event');
    console.log('Schedule expression:', event['detail-type']);
    
    // TODO: Implement your scheduled task logic here
  } catch (error) {
    console.error('Error processing scheduled event:', error);
    throw error;
  }
};
<%_ } else { _%>
export const handler: <%= handlerConfig.handler %> = async (event: <%= handlerConfig.event %>, context: Context)<%_ if (handlerConfig.result !== 'void' && handlerConfig.result !== 'any') { _%>: Promise<<%= handlerConfig.result %>><%_ } else if (handlerConfig.result === 'void') { _%>: Promise<void><%_ } _%> => {
  console.log('Event:', JSON.stringify(event, null, 2));
  console.log('Context:', JSON.stringify(context, null, 2));

  try {
    // TODO: Implement your logic here
    console.log('Processing <%= handlerType %> event');
    
    <%_ if (handlerConfig.result !== 'void') { _%>
    return {} as <%= handlerConfig.result %>;
    <%_ } _%>
  } catch (error) {
    console.error('Error:', error);
    throw error;
  }
};
<%_ } _%>