<% if (handlerType !== 'any') { %>import { <%= handlerType %><% if (handlerType === 'EventBridgeHandler') { %>, Context<% } %> } from 'aws-lambda';<% } else { %>import { Context } from 'aws-lambda';<% } %>

<% if (handlerType !== 'any') { %>export const handler: <%= handlerType %><% if (handlerType === 'EventBridgeHandler') { %><string, any, any><% } %> = async (event, context) => {<% } else { %>export const handler = async (event: any, context: Context) => {<% } %>
  console.log('Event:', JSON.stringify(event, null, 2));
  console.log('Context:', JSON.stringify(context, null, 2));

  try {
    // TODO: Implement your Lambda function logic here
    
<% if (handlerType === 'APIGatewayProxyHandler' || handlerType === 'APIGatewayProxyHandlerV2') { %>    return {
      statusCode: 200,
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        message: 'Hello from <%= functionNamePascalCase %>!',
        timestamp: new Date().toISOString(),
      }),
    };<% } else if (handlerType === 'S3Handler') { %>    // Process S3 event records
    for (const record of event.Records) {
      console.log('S3 Event:', record.s3);
      // TODO: Process S3 object
    }
    
    return { processed: event.Records.length };<% } else if (handlerType === 'SQSHandler') { %>    // Process SQS messages
    for (const record of event.Records) {
      console.log('SQS Message:', record.body);
      // TODO: Process SQS message
    }
    
    return { processed: event.Records.length };<% } else if (handlerType === 'EventBridgeHandler') { %>    console.log('EventBridge Detail:', event.detail);
    
    // TODO: Process EventBridge event
    
    return { processed: true };<% } else if (handlerType === 'DynamoDBStreamHandler') { %>    // Process DynamoDB stream records
    for (const record of event.Records) {
      console.log('DynamoDB Record:', record.dynamodb);
      // TODO: Process DynamoDB stream record
    }
    
    return { processed: event.Records.length };<% } else if (handlerType === 'ScheduledHandler') { %>    console.log('Scheduled Event:', event);
    
    // TODO: Handle scheduled event
    
    return { completed: true };<% } else if (handlerType === 'SNSHandler') { %>    // Process SNS messages
    for (const record of event.Records) {
      console.log('SNS Message:', record.Sns.Message);
      // TODO: Process SNS message
    }
    
    return { processed: event.Records.length };<% } else if (handlerType === 'ALBHandler') { %>    return {
      statusCode: 200,
      statusDescription: '200 OK',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        message: 'Hello from <%= functionNamePascalCase %>!',
        timestamp: new Date().toISOString(),
      }),
    };<% } else { %>    // TODO: Implement your Lambda function logic here
    
    return {
      success: true,
      message: 'Function executed successfully',
      timestamp: new Date().toISOString(),
    };<% } %>
  } catch (error) {
    console.error('Error processing event:', error);
    
<% if (handlerType === 'APIGatewayProxyHandler' || handlerType === 'APIGatewayProxyHandlerV2') { %>    return {
      statusCode: 500,
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        error: 'Internal Server Error',
        message: error instanceof Error ? error.message : 'Unknown error',
      }),
    };<% } else if (handlerType === 'ALBHandler') { %>    return {
      statusCode: 500,
      statusDescription: '500 Internal Server Error',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        error: 'Internal Server Error',
        message: error instanceof Error ? error.message : 'Unknown error',
      }),
    };<% } else { %>    throw error;<% } %>
  }
};