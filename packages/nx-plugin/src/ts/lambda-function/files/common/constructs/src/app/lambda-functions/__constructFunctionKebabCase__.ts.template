import { Function, Runtime, Code, Tracing } from 'aws-cdk-lib/aws-lambda';
import { Construct } from 'constructs';
import { Duration } from 'aws-cdk-lib';
import * as path from 'path';

export interface <%= constructFunctionClassName %>Props {
  /**
   * The name of the Lambda function
   */
  readonly functionName?: string;

  /**
   * The timeout for the Lambda function
   * @default Duration.seconds(30)
   */
  readonly timeout?: Duration;

  /**
   * Environment variables for the Lambda function
   */
  readonly environment?: Record<string, string>;

  /**
   * Memory size for the Lambda function in MB
   * @default 128
   */
  readonly memorySize?: number;
}

export class <%= constructFunctionClassName %> extends Function {
  constructor(scope: Construct, id: string, props?: <%= constructFunctionClassName %>Props) {
    super(scope, id, {
      functionName: props?.functionName,
      runtime: Runtime.NODEJS_20_X,
      handler: '<%= functionNameKebabCase %>.handler',
      code: Code.fromAsset(path.join(__dirname, '../../../../../../dist/<%= dir %>/bundle')),
      timeout: props?.timeout ?? Duration.seconds(30),
      environment: props?.environment,
      memorySize: props?.memorySize ?? 128,
      tracing: Tracing.ACTIVE,
    });
  }
}