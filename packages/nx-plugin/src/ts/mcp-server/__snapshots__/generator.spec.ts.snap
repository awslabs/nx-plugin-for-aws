// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`ts#mcp-server generator > should match snapshot for generated files > mcp-server-http.ts 1`] = `
"#!/usr/bin/env node
import { createServer } from './server';
import { StreamableHTTPServerTransport } from '@modelcontextprotocol/sdk/server/streamableHttp.js';
import express, { Request, Response } from 'express';

const PORT = 8000;

const app = express();
app.use(express.json());

app.post('/mcp', async (req: Request, res: Response) => {
  try {
    const server = createServer();
    const transport: StreamableHTTPServerTransport =
      new StreamableHTTPServerTransport({
        sessionIdGenerator: undefined,
      });
    res.on('close', () => {
      console.log('Request closed');
      transport.close();
      server.close();
    });
    await server.connect(transport);
    await transport.handleRequest(req, res, req.body);
  } catch (error) {
    console.error('Error handling MCP request:', error);
    if (!res.headersSent) {
      res.status(500).json({
        jsonrpc: '2.0',
        error: {
          code: -32603,
          message: 'Internal server error',
        },
        id: null,
      });
    }
  }
});

// SSE notifications not supported in stateless mode
app.get('/mcp', async (req: Request, res: Response) => {
  console.log('Received GET MCP request');
  res.writeHead(405).end(
    JSON.stringify({
      jsonrpc: '2.0',
      error: {
        code: -32000,
        message: 'Method not allowed.',
      },
      id: null,
    }),
  );
});

// Session termination not needed in stateless mode
app.delete('/mcp', async (req: Request, res: Response) => {
  console.log('Received DELETE MCP request');
  res.writeHead(405).end(
    JSON.stringify({
      jsonrpc: '2.0',
      error: {
        code: -32000,
        message: 'Method not allowed.',
      },
      id: null,
    }),
  );
});

// Start the server
void (async () => {
  app.listen(PORT, (error) => {
    if (error) {
      console.error('Failed to start server:', error);
      process.exit(1);
    }
    console.log(
      \`MCP Stateless Streamable HTTP Server listening on port \${PORT}\`,
    );
  });
})();
"
`;

exports[`ts#mcp-server generator > should match snapshot for generated files > mcp-server-index.ts 1`] = `
"export * from './server';
"
`;

exports[`ts#mcp-server generator > should match snapshot for generated files > mcp-server-server.ts 1`] = `
"import { McpServer } from '@modelcontextprotocol/sdk/server/mcp.js';
import { registerAddTool } from './tools/add';
import { registerSampleGuidanceResource } from './resources/sample-guidance';

/**
 * Create the MCP Server
 */
export const createServer = () => {
  const server = new McpServer({
    name: 'snapshot-server',
    version: '1.0.0',
  });

  registerAddTool(server);
  registerSampleGuidanceResource(server);

  return server;
};
"
`;

exports[`ts#mcp-server generator > should match snapshot for generated files > mcp-server-stdio.ts 1`] = `
"#!/usr/bin/env node
import { StdioServerTransport } from '@modelcontextprotocol/sdk/server/stdio.js';
import { createServer } from './server';

export const startMcpServer = async () => {
  const transport = new StdioServerTransport();
  await createServer().connect(transport);
  console.error('MCP Server listening on STDIO');
};

void (async () => {
  try {
    await startMcpServer();
  } catch (e) {
    console.error(e);
  }
})();
"
`;

exports[`ts#mcp-server generator > should match snapshot for generated files > updated-package.json 1`] = `
"{
  "name": "test-project",
  "version": "1.0.0",
  "bin": {
    "snapshot-server": "./src/snapshot-server/stdio.js"
  },
  "dependencies": {
    "@modelcontextprotocol/sdk": "^1.11.3",
    "express": "^5.1.0",
    "zod-v3": "npm:zod@^3"
  },
  "devDependencies": {
    "@types/express": "^5.0.3",
    "tsx": "4.20.1"
  }
}
"
`;
