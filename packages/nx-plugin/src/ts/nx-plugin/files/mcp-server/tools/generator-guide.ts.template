import { McpServer } from '@modelcontextprotocol/sdk/server/mcp.js';
import { z } from 'zod';
import { renderGeneratorInfo, listGenerators } from '../utils';
import { PackageManagerSchema } from '../schema';
import * as fs from 'fs';
import * as path from 'path';

/**
 * Registers a tool which provides a detailed guide for an individual generator
 */
export const registerGeneratorGuideTool = (
  server: McpServer,
) => {
  server.tool(
    'generator-guide',
    'Tool to retrieve detailed information about a specific generator.',
    {
      packageManager: PackageManagerSchema,
      generator: z.string(),
    },
    async ({ packageManager, generator: generatorId }) => {
      const generators = listGenerators();
      const generator = generators.find((g) => g.id === generatorId);
      if (!generator) {
        throw new Error(
          `No generator found with id ${generatorId}. Available generators: ${generators.map((g) => g.id).join(' ,')}`,
        );
      }

      return {
        content: [
          {
            type: 'text',
            text: `## ${renderGeneratorInfo(packageManager, generator)}

# Guide

${fs.readFileSync(path.join(generator.resolvedPath, 'README.md'))}
`,
          },
        ],
      };
    },
  );
};
