// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`nx-generator generator > within @aws/nx-plugin > should add guide page to docs > guide-page.mdx 1`] = `
"---
title: foo#bar
description: Some description
---

import { FileTree } from '@astrojs/starlight/components';
import RunGenerator from '@components/run-generator.astro';
import GeneratorParameters from '@components/generator-parameters.astro';

TODO: Add an overview of your generator here.

## Usage

### Generate a foo#bar

You can generate a foo#bar in two ways:

<RunGenerator generator="foo#bar" />

### Options

<GeneratorParameters generator="foo#bar" />

## Generator Output

The generator will create the following project files:

<FileTree>
  - todo.txt Update this section with what your generator generates!
</FileTree>

## TODO: More Docs!

Add more documentation detailing things like:

- How to work with the project/code you've generated
- What new project.json targets have been added and how to run them (using the NxCommands component)
- Best practices when working with your generated project/code

See the existing guides for concrete examples.
"
`;

exports[`nx-generator generator > within @aws/nx-plugin > should generate an example schema, generator and test > generator.spec.ts 1`] = `
"import { Tree } from '@nx/devkit';
import { fooBarGenerator, FOO_BAR_GENERATOR_INFO } from './generator';
import { createTreeUsingTsSolutionSetup } from '../utils/test';
import { expectHasMetricTags } from '../utils/metrics.spec';
import { sharedConstructsGenerator } from '../utils/shared-constructs';

describe('foo#bar generator', () => {
  let tree: Tree;

  beforeEach(() => {
    tree = createTreeUsingTsSolutionSetup();
  });

  it('should run successfully', async () => {
    await fooBarGenerator(tree, { exampleOption: 'example' });

    // TODO: check the tree is updated as expected
  });

  it('should add generator metric to app.ts', async () => {
    await sharedConstructsGenerator(tree);

    await fooBarGenerator(tree, { exampleOption: 'example' });

    expectHasMetricTags(tree, FOO_BAR_GENERATOR_INFO.metric);
  });
});
"
`;

exports[`nx-generator generator > within @aws/nx-plugin > should generate an example schema, generator and test > generator.ts 1`] = `
"import { GeneratorCallback, Tree, installPackagesTask } from '@nx/devkit';
import { FooBarGeneratorSchema } from './schema';
import { NxGeneratorInfo, getGeneratorInfo } from '../utils/nx';
import { addGeneratorMetricsIfApplicable } from '../utils/metrics';
import { formatFilesInSubtree } from '../utils/format';

export const FOO_BAR_GENERATOR_INFO: NxGeneratorInfo =
  getGeneratorInfo(__filename);

export const fooBarGenerator = async (
  tree: Tree,
  options: FooBarGeneratorSchema,
): Promise<GeneratorCallback> => {
  // TODO: implement your generator here

  await addGeneratorMetricsIfApplicable(tree, [FOO_BAR_GENERATOR_INFO]);

  await formatFilesInSubtree(tree);
  return () => {
    installPackagesTask(tree);
  };
};

export default fooBarGenerator;
"
`;

exports[`nx-generator generator > within @aws/nx-plugin > should generate an example schema, generator and test > schema.d.ts 1`] = `
"/**
 * TypeScript types for options defined in schema.json
 * Update this to match schema.json if you make changes.
 */
export interface FooBarGeneratorSchema {
  // Replace with your options
  exampleOption: string;
}
"
`;

exports[`nx-generator generator > within @aws/nx-plugin > should generate an example schema, generator and test > schema.json 1`] = `
"{
  "$schema": "https://json-schema.org/schema",
  "$id": "foo#bar",
  "title": "foo#bar",
  "description": "<Describe your generator here!>",
  "type": "object",
  "properties": {
    "exampleOption": {
      "type": "string",
      "description": "An example option. Refer to https://nx.dev/extending-nx/recipes/generator-options for more info",
      "x-priority": "important",
      "x-prompt": "This is an example option!"
    }
  },
  "required": ["exampleOption"]
}
"
`;

exports[`nx-generator generator > within @aws/nx-plugin > should update generators.json > generators.json 1`] = `
"{
  "generators": {
    "existing": {
      "factory": "./some/generator",
      "schema": "./some/schema.json",
      "description": "existing generator",
      "metric": "g40"
    },
    "another": {
      "factory": "./some/other/generator",
      "schema": "./some/other/schema.json",
      "description": "other existing generator",
      "metric": "g41"
    },
    "foo#bar": {
      "factory": "./src/foo-bar/generator",
      "schema": "./src/foo-bar/schema.json",
      "description": "Some description",
      "metric": "g42"
    }
  }
}
"
`;

exports[`nx-generator generator > within another workspace > should generate an example schema, generator and test > local-generator.spec.ts 1`] = `
"import { createTreeWithEmptyWorkspace } from '@nx/devkit/testing';
import { Tree } from '@nx/devkit';
import { fooBarGenerator } from './generator';

describe('foo#bar generator', () => {
  let tree: Tree;

  beforeEach(() => {
    tree = createTreeWithEmptyWorkspace();
  });

  it('should run successfully', async () => {
    await fooBarGenerator(tree, { exampleOption: 'example' });

    // TODO: check the tree is updated as expected
  });
});
"
`;

exports[`nx-generator generator > within another workspace > should generate an example schema, generator and test > local-generator.ts 1`] = `
"import {
  GeneratorCallback,
  Tree,
  generateFiles,
  joinPathFragments,
} from '@nx/devkit';
import { FooBarGeneratorSchema } from './schema';

export const fooBarGenerator = async (
  tree: Tree,
  options: FooBarGeneratorSchema,
): Promise<GeneratorCallback | void> => {
  // TODO: implement your generator here, for example:
  generateFiles(
    tree,
    joinPathFragments(__dirname, 'files'),
    'target/dir',
    options,
  );
};

export default fooBarGenerator;
"
`;

exports[`nx-generator generator > within another workspace > should generate an example schema, generator and test > local-schema.d.ts 1`] = `
"/**
 * TypeScript types for options defined in schema.json
 * Update this to match schema.json if you make changes.
 */
export interface FooBarGeneratorSchema {
  // Replace with your options
  exampleOption: string;
}
"
`;

exports[`nx-generator generator > within another workspace > should generate an example schema, generator and test > local-schema.json 1`] = `
"{
  "$schema": "https://json-schema.org/schema",
  "$id": "foo#bar",
  "title": "foo#bar",
  "description": "<Describe your generator here!>",
  "type": "object",
  "properties": {
    "exampleOption": {
      "type": "string",
      "description": "An example option. Refer to https://nx.dev/extending-nx/recipes/generator-options for more info",
      "x-priority": "important",
      "x-prompt": "This is an example option!"
    }
  },
  "required": ["exampleOption"]
}
"
`;

exports[`nx-generator generator > within another workspace > should generate an example template file > hello.ts.template 1`] = `
"
export const hello = () => {
  return '<%- exampleOption %>';
};
"
`;

exports[`nx-generator generator > within another workspace > should update generators.json > local-generators.json 1`] = `
"{
  "generators": {
    "foo#bar": {
      "factory": "./src/foo-bar/generator",
      "schema": "./src/foo-bar/schema.json",
      "description": "Some description"
    }
  }
}
"
`;
