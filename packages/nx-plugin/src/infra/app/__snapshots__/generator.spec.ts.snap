// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`infra generator > should add required dependencies to package.json > dependencies 1`] = `
{
  "aws-cdk": "2.1027.0",
  "aws-cdk-lib": "2.213.0",
  "constructs": "10.4.2",
  "esbuild": "0.25.9",
  "source-map-support": "0.5.21",
}
`;

exports[`infra generator > should add required dependencies to package.json > dev-dependencies 1`] = `
{
  "@eslint/js": "^9.8.0",
  "@nx/eslint": "21.4.1",
  "@nx/eslint-plugin": "21.4.1",
  "@nx/js": "21.4.1",
  "@nx/vite": "21.4.1",
  "@nx/web": "21.4.1",
  "@swc-node/register": "~1.9.1",
  "@swc/core": "~1.5.7",
  "@swc/helpers": "~0.5.11",
  "@types/node": "22.18.0",
  "@vitest/coverage-v8": "^3.0.5",
  "@vitest/ui": "^3.0.0",
  "eslint": "^9.8.0",
  "eslint-config-prettier": "^10.0.0",
  "eslint-plugin-prettier": "5.5.4",
  "jiti": "2.4.2",
  "jsdom": "~22.1.0",
  "jsonc-eslint-parser": "2.4.0",
  "prettier": "3.6.2",
  "tsx": "4.20.1",
  "typescript": "~5.8.2",
  "typescript-eslint": "^8.29.0",
  "vite": "^6.0.0",
  "vitest": "^3.0.0",
}
`;

exports[`infra generator > should add required dependencies to package.json > package-json 1`] = `
{
  "dependencies": {
    "aws-cdk": "2.1027.0",
    "aws-cdk-lib": "2.213.0",
    "constructs": "10.4.2",
    "esbuild": "0.25.9",
    "source-map-support": "0.5.21",
  },
  "devDependencies": {
    "@eslint/js": "^9.8.0",
    "@nx/eslint": "21.4.1",
    "@nx/eslint-plugin": "21.4.1",
    "@nx/js": "21.4.1",
    "@nx/vite": "21.4.1",
    "@nx/web": "21.4.1",
    "@swc-node/register": "~1.9.1",
    "@swc/core": "~1.5.7",
    "@swc/helpers": "~0.5.11",
    "@types/node": "22.18.0",
    "@vitest/coverage-v8": "^3.0.5",
    "@vitest/ui": "^3.0.0",
    "eslint": "^9.8.0",
    "eslint-config-prettier": "^10.0.0",
    "eslint-plugin-prettier": "5.5.4",
    "jiti": "2.4.2",
    "jsdom": "~22.1.0",
    "jsonc-eslint-parser": "2.4.0",
    "prettier": "3.6.2",
    "tsx": "4.20.1",
    "typescript": "~5.8.2",
    "typescript-eslint": "^8.29.0",
    "vite": "^6.0.0",
    "vitest": "^3.0.0",
  },
  "name": "@proj/source",
  "type": "module",
}
`;

exports[`infra generator > should configure Checkov target correctly > checkov-target 1`] = `
{
  "cache": true,
  "dependsOn": [
    "synth",
  ],
  "executor": "nx:run-commands",
  "inputs": [
    "{workspaceRoot}/dist/{projectRoot}/cdk.out",
  ],
  "options": {
    "command": "uvx checkov==3.2.469 --config-file packages/test/checkov.yml --file dist/packages/infra/cdk.out/**/*.template.json",
  },
  "outputs": [
    "{workspaceRoot}/dist/{projectRoot}/checkov",
  ],
}
`;

exports[`infra generator > should configure project.json with correct targets > build-target 1`] = `
{
  "dependsOn": [
    "lint",
    "compile",
    "test",
    "synth",
    "checkov",
  ],
}
`;

exports[`infra generator > should configure project.json with correct targets > deploy-target 1`] = `
{
  "executor": "nx:run-commands",
  "options": {
    "command": "cdk deploy --require-approval=never",
    "cwd": "packages/test",
  },
}
`;

exports[`infra generator > should configure project.json with correct targets > destroy-target 1`] = `
{
  "executor": "nx:run-commands",
  "options": {
    "command": "cdk destroy --require-approval=never",
    "cwd": "packages/test",
  },
}
`;

exports[`infra generator > should configure project.json with correct targets > project-configuration 1`] = `
{
  "$schema": "../../node_modules/nx/schemas/project-schema.json",
  "metadata": {
    "generator": "ts#infra",
  },
  "name": "@proj/test",
  "projectType": "application",
  "root": "packages/test",
  "sourceRoot": "packages/test/src",
  "tags": [],
  "targets": {
    "bootstrap": {
      "executor": "nx:run-commands",
      "options": {
        "command": "cdk bootstrap",
        "cwd": "packages/test",
      },
    },
    "build": {
      "dependsOn": [
        "lint",
        "compile",
        "test",
        "synth",
        "checkov",
      ],
    },
    "cdk": {
      "executor": "nx:run-commands",
      "options": {
        "command": "cdk",
        "cwd": "packages/test",
      },
    },
    "checkov": {
      "cache": true,
      "dependsOn": [
        "synth",
      ],
      "executor": "nx:run-commands",
      "inputs": [
        "{workspaceRoot}/dist/{projectRoot}/cdk.out",
      ],
      "options": {
        "command": "uvx checkov==3.2.469 --config-file packages/test/checkov.yml --file dist/packages/infra/cdk.out/**/*.template.json",
      },
      "outputs": [
        "{workspaceRoot}/dist/{projectRoot}/checkov",
      ],
    },
    "compile": {
      "executor": "nx:run-commands",
      "options": {
        "command": "tsc --build tsconfig.lib.json",
        "cwd": "{projectRoot}",
      },
      "outputs": [
        "{workspaceRoot}/dist/packages/test/tsc",
      ],
    },
    "deploy": {
      "executor": "nx:run-commands",
      "options": {
        "command": "cdk deploy --require-approval=never",
        "cwd": "packages/test",
      },
    },
    "deploy-ci": {
      "executor": "nx:run-commands",
      "options": {
        "command": "cdk deploy --require-approval=never --app ../../dist/packages/test/cdk.out",
        "cwd": "packages/test",
      },
    },
    "destroy": {
      "executor": "nx:run-commands",
      "options": {
        "command": "cdk destroy --require-approval=never",
        "cwd": "packages/test",
      },
    },
    "destroy-ci": {
      "executor": "nx:run-commands",
      "options": {
        "command": "cdk destroy --require-approval=never --app ../../dist/packages/test/cdk.out",
        "cwd": "packages/test",
      },
    },
    "synth": {
      "cache": true,
      "dependsOn": [
        "^build",
        "compile",
      ],
      "executor": "nx:run-commands",
      "inputs": [
        "default",
      ],
      "options": {
        "command": "cdk synth",
        "cwd": "packages/test",
      },
      "outputs": [
        "{workspaceRoot}/dist/packages/test/cdk.out",
      ],
    },
    "test": {
      "executor": "@nx/vite:test",
      "options": {
        "reportsDirectory": "../../coverage/packages/test",
      },
      "outputs": [
        "{options.reportsDirectory}",
      ],
    },
  },
}
`;

exports[`infra generator > should generate Checkov configuration files > checkov-ts 1`] = `
"import { IConstruct } from 'constructs';
import { CfnResource } from 'aws-cdk-lib';

/**
 * Suppresses a set of rules for a construct tree.
 *
 * @param construct The root construct to suppress the rule for.
 * @param ids The ids of the rules to suppress.
 * @param comment The reason for suppressing the rule
 * @param predicate A predicate function that determines whether the rule should be suppressed for the given construct or any of its descendants.
 *
 * @example
 * The following example suppresses the CKV_AWS_XXX rule for the given construct.
 * suppressRules(construct, ['CKV_AWS_XXX'], 'Not required for this use case')
 *
 * @example
 * The following example suppresses the CKV_AWS_XXX rule for the construct or any of its descendants if it is an instance of Bucket:
 * suppressRules(construct, ['CKV_AWS_XXX'], 'Not required for this use case', (construct) => construct instanceof Bucket)
 */
export const suppressRules = (
  construct: IConstruct,
  ids: string[],
  comment: string,
  predicate?: (construct: IConstruct) => boolean,
) => {
  const resources = (
    predicate ? construct.node.findAll().filter(predicate) : [construct]
  )
    .map((resource) => {
      if (CfnResource.isCfnResource(resource)) {
        return resource;
      } else return resource.node.defaultChild;
    })
    .filter((resource) => CfnResource.isCfnResource(resource));

  resources.forEach((resource) => {
    const metadata = resource.getMetadata('checkov') || {};
    metadata['skip'] = [
      ...(metadata['skip'] ?? []),
      ...ids.map((id) => ({ id, comment })),
    ];
    resource.addMetadata('checkov', metadata);
  });
};
"
`;

exports[`infra generator > should generate Checkov configuration files > checkov-yml 1`] = `
"# Defines the checks to skip entirely. Remove if your requirements differ.
skip-check:
  # Lambda function suppressions
  - CKV_AWS_115 # Concurrent execution limit
  - CKV_AWS_116 # Dead Letter Queue
  - CKV_AWS_117 # Lambda functions in VPC
  - CKV_AWS_173 # Encrypt Lambda environment variables
  - CKV_AWS_272 # Code signing
output:
  - cli
  - json
output-file-path: console,dist/packages/test/checkov/checkov_report.json
"
`;

exports[`infra generator > should generate consistent file content across runs > consistent-files 1`] = `
{
  "cdk.json": "{
  "app": "tsx src/main.ts",
  "output": "../../dist/packages/test/cdk.out",
  "watch": {
    "include": ["**"],
    "exclude": [
      "README.md",
      "cdk*.json",
      "**/*.d.ts",
      "**/*.js",
      "tsconfig.json",
      "package*.json",
      "yarn.lock",
      "node_modules",
      "test"
    ]
  },
  "context": {
    "@aws-cdk/aws-lambda:recognizeLayerVersion": true,
    "@aws-cdk/core:checkSecretUsage": true,
    "@aws-cdk/core:target-partitions": ["aws", "aws-cn"],
    "@aws-cdk-containers/ecs-service-extensions:enableDefaultLogDriver": true,
    "@aws-cdk/aws-ec2:uniqueImdsv2TemplateName": true,
    "@aws-cdk/aws-ecs:arnFormatIncludesClusterName": true,
    "@aws-cdk/aws-iam:minimizePolicies": true,
    "@aws-cdk/core:validateSnapshotRemovalPolicy": true,
    "@aws-cdk/aws-codepipeline:crossAccountKeyAliasStackSafeResourceName": true,
    "@aws-cdk/aws-s3:createDefaultLoggingPolicy": true,
    "@aws-cdk/aws-sns-subscriptions:restrictSqsDescryption": true,
    "@aws-cdk/aws-apigateway:disableCloudWatchRole": true,
    "@aws-cdk/core:enablePartitionLiterals": true,
    "@aws-cdk/aws-events:eventsTargetQueueSameAccount": true,
    "@aws-cdk/aws-ecs:disableExplicitDeploymentControllerForCircuitBreaker": true,
    "@aws-cdk/aws-iam:importedRoleStackSafeDefaultPolicyName": true,
    "@aws-cdk/aws-s3:serverAccessLogsUseBucketPolicy": true,
    "@aws-cdk/aws-route53-patters:useCertificate": true,
    "@aws-cdk/customresources:installLatestAwsSdkDefault": false,
    "@aws-cdk/aws-rds:databaseProxyUniqueResourceName": true,
    "@aws-cdk/aws-codedeploy:removeAlarmsFromDeploymentGroup": true,
    "@aws-cdk/aws-apigateway:authorizerChangeDeploymentLogicalId": true,
    "@aws-cdk/aws-ec2:launchTemplateDefaultUserData": true,
    "@aws-cdk/aws-secretsmanager:useAttachedSecretResourcePolicyForSecretTargetAttachments": true,
    "@aws-cdk/aws-redshift:columnId": true,
    "@aws-cdk/aws-stepfunctions-tasks:enableEmrServicePolicyV2": true,
    "@aws-cdk/aws-ec2:restrictDefaultSecurityGroup": true,
    "@aws-cdk/aws-apigateway:requestValidatorUniqueId": true,
    "@aws-cdk/aws-kms:aliasNameRef": true,
    "@aws-cdk/aws-autoscaling:generateLaunchTemplateInsteadOfLaunchConfig": true,
    "@aws-cdk/core:includePrefixInUniqueNameGeneration": true,
    "@aws-cdk/aws-efs:denyAnonymousAccess": true,
    "@aws-cdk/aws-opensearchservice:enableOpensearchMultiAzWithStandby": true,
    "@aws-cdk/aws-lambda-nodejs:useLatestRuntimeVersion": true,
    "@aws-cdk/aws-efs:mountTargetOrderInsensitiveLogicalId": true,
    "@aws-cdk/aws-rds:auroraClusterChangeScopeOfInstanceParameterGroupWithEachParameters": true,
    "@aws-cdk/aws-appsync:useArnForSourceApiAssociationIdentifier": true,
    "@aws-cdk/aws-rds:preventRenderingDeprecatedCredentials": true,
    "@aws-cdk/aws-codepipeline-actions:useNewDefaultBranchForCodeCommitSource": true,
    "@aws-cdk/aws-cloudwatch-actions:changeLambdaPermissionLogicalIdForLambdaAction": true,
    "@aws-cdk/aws-codepipeline:crossAccountKeysDefaultValueToFalse": true,
    "@aws-cdk/aws-codepipeline:defaultPipelineTypeToV2": true,
    "@aws-cdk/aws-kms:reduceCrossAccountRegionPolicyScope": true,
    "@aws-cdk/aws-eks:nodegroupNameAttribute": true,
    "@aws-cdk/aws-ec2:ebsDefaultGp3Volume": true,
    "@aws-cdk/aws-ecs:removeDefaultDeploymentAlarm": true,
    "@aws-cdk/custom-resources:logApiResponseDataPropertyTrueDefault": false
  }
}
",
  "src/main.ts": "import { ApplicationStage } from './stages/application-stage.js';
import { App } from ':proj/common-constructs';

const app = new App();

// Use this to deploy your own sandbox environment (assumes your CLI credentials)
new ApplicationStage(app, 'proj-test-sandbox', {
  env: {
    account: process.env.CDK_DEFAULT_ACCOUNT,
    region: process.env.CDK_DEFAULT_REGION,
  },
});

app.synth();
",
  "src/stacks/application-stack.ts": "import { Stack, StackProps } from 'aws-cdk-lib';
import { Construct } from 'constructs';

export class ApplicationStack extends Stack {
  constructor(scope: Construct, id: string, props?: StackProps) {
    super(scope, id, props);

    // The code that defines your stack goes here
  }
}
",
  "src/stages/application-stage.ts": "import { Stage, StageProps } from 'aws-cdk-lib';
import { Construct } from 'constructs';
import { ApplicationStack } from '../stacks/application-stack.js';

/**
 * Defines a collection of CDK Stacks which make up your application
 */
export class ApplicationStage extends Stage {
  constructor(scope: Construct, id: string, props?: StageProps) {
    super(scope, id, props);

    new ApplicationStack(this, 'Application', {
      crossRegionReferences: true,
    });
  }
}
",
}
`;

exports[`infra generator > should generate files with correct content > application-stack-ts 1`] = `
"import { Stack, StackProps } from 'aws-cdk-lib';
import { Construct } from 'constructs';

export class ApplicationStack extends Stack {
  constructor(scope: Construct, id: string, props?: StackProps) {
    super(scope, id, props);

    // The code that defines your stack goes here
  }
}
"
`;

exports[`infra generator > should generate files with correct content > application-stage-ts 1`] = `
"import { Stage, StageProps } from 'aws-cdk-lib';
import { Construct } from 'constructs';
import { ApplicationStack } from '../stacks/application-stack.js';

/**
 * Defines a collection of CDK Stacks which make up your application
 */
export class ApplicationStage extends Stage {
  constructor(scope: Construct, id: string, props?: StageProps) {
    super(scope, id, props);

    new ApplicationStack(this, 'Application', {
      crossRegionReferences: true,
    });
  }
}
"
`;

exports[`infra generator > should generate files with correct content > cdk-json 1`] = `
"{
  "app": "tsx src/main.ts",
  "output": "../../dist/packages/test/cdk.out",
  "watch": {
    "include": ["**"],
    "exclude": [
      "README.md",
      "cdk*.json",
      "**/*.d.ts",
      "**/*.js",
      "tsconfig.json",
      "package*.json",
      "yarn.lock",
      "node_modules",
      "test"
    ]
  },
  "context": {
    "@aws-cdk/aws-lambda:recognizeLayerVersion": true,
    "@aws-cdk/core:checkSecretUsage": true,
    "@aws-cdk/core:target-partitions": ["aws", "aws-cn"],
    "@aws-cdk-containers/ecs-service-extensions:enableDefaultLogDriver": true,
    "@aws-cdk/aws-ec2:uniqueImdsv2TemplateName": true,
    "@aws-cdk/aws-ecs:arnFormatIncludesClusterName": true,
    "@aws-cdk/aws-iam:minimizePolicies": true,
    "@aws-cdk/core:validateSnapshotRemovalPolicy": true,
    "@aws-cdk/aws-codepipeline:crossAccountKeyAliasStackSafeResourceName": true,
    "@aws-cdk/aws-s3:createDefaultLoggingPolicy": true,
    "@aws-cdk/aws-sns-subscriptions:restrictSqsDescryption": true,
    "@aws-cdk/aws-apigateway:disableCloudWatchRole": true,
    "@aws-cdk/core:enablePartitionLiterals": true,
    "@aws-cdk/aws-events:eventsTargetQueueSameAccount": true,
    "@aws-cdk/aws-ecs:disableExplicitDeploymentControllerForCircuitBreaker": true,
    "@aws-cdk/aws-iam:importedRoleStackSafeDefaultPolicyName": true,
    "@aws-cdk/aws-s3:serverAccessLogsUseBucketPolicy": true,
    "@aws-cdk/aws-route53-patters:useCertificate": true,
    "@aws-cdk/customresources:installLatestAwsSdkDefault": false,
    "@aws-cdk/aws-rds:databaseProxyUniqueResourceName": true,
    "@aws-cdk/aws-codedeploy:removeAlarmsFromDeploymentGroup": true,
    "@aws-cdk/aws-apigateway:authorizerChangeDeploymentLogicalId": true,
    "@aws-cdk/aws-ec2:launchTemplateDefaultUserData": true,
    "@aws-cdk/aws-secretsmanager:useAttachedSecretResourcePolicyForSecretTargetAttachments": true,
    "@aws-cdk/aws-redshift:columnId": true,
    "@aws-cdk/aws-stepfunctions-tasks:enableEmrServicePolicyV2": true,
    "@aws-cdk/aws-ec2:restrictDefaultSecurityGroup": true,
    "@aws-cdk/aws-apigateway:requestValidatorUniqueId": true,
    "@aws-cdk/aws-kms:aliasNameRef": true,
    "@aws-cdk/aws-autoscaling:generateLaunchTemplateInsteadOfLaunchConfig": true,
    "@aws-cdk/core:includePrefixInUniqueNameGeneration": true,
    "@aws-cdk/aws-efs:denyAnonymousAccess": true,
    "@aws-cdk/aws-opensearchservice:enableOpensearchMultiAzWithStandby": true,
    "@aws-cdk/aws-lambda-nodejs:useLatestRuntimeVersion": true,
    "@aws-cdk/aws-efs:mountTargetOrderInsensitiveLogicalId": true,
    "@aws-cdk/aws-rds:auroraClusterChangeScopeOfInstanceParameterGroupWithEachParameters": true,
    "@aws-cdk/aws-appsync:useArnForSourceApiAssociationIdentifier": true,
    "@aws-cdk/aws-rds:preventRenderingDeprecatedCredentials": true,
    "@aws-cdk/aws-codepipeline-actions:useNewDefaultBranchForCodeCommitSource": true,
    "@aws-cdk/aws-cloudwatch-actions:changeLambdaPermissionLogicalIdForLambdaAction": true,
    "@aws-cdk/aws-codepipeline:crossAccountKeysDefaultValueToFalse": true,
    "@aws-cdk/aws-codepipeline:defaultPipelineTypeToV2": true,
    "@aws-cdk/aws-kms:reduceCrossAccountRegionPolicyScope": true,
    "@aws-cdk/aws-eks:nodegroupNameAttribute": true,
    "@aws-cdk/aws-ec2:ebsDefaultGp3Volume": true,
    "@aws-cdk/aws-ecs:removeDefaultDeploymentAlarm": true,
    "@aws-cdk/custom-resources:logApiResponseDataPropertyTrueDefault": false
  }
}
"
`;

exports[`infra generator > should generate files with correct content > main-ts 1`] = `
"import { ApplicationStage } from './stages/application-stage.js';
import { App } from ':proj/common-constructs';

const app = new App();

// Use this to deploy your own sandbox environment (assumes your CLI credentials)
new ApplicationStage(app, 'proj-test-sandbox', {
  env: {
    account: process.env.CDK_DEFAULT_ACCOUNT,
    region: process.env.CDK_DEFAULT_REGION,
  },
});

app.synth();
"
`;

exports[`infra generator > should handle custom project names correctly > custom-name-files 1`] = `
{
  "cdk.json": "{
  "app": "tsx src/main.ts",
  "output": "../../dist/packages/custom-infra/cdk.out",
  "watch": {
    "include": ["**"],
    "exclude": [
      "README.md",
      "cdk*.json",
      "**/*.d.ts",
      "**/*.js",
      "tsconfig.json",
      "package*.json",
      "yarn.lock",
      "node_modules",
      "test"
    ]
  },
  "context": {
    "@aws-cdk/aws-lambda:recognizeLayerVersion": true,
    "@aws-cdk/core:checkSecretUsage": true,
    "@aws-cdk/core:target-partitions": ["aws", "aws-cn"],
    "@aws-cdk-containers/ecs-service-extensions:enableDefaultLogDriver": true,
    "@aws-cdk/aws-ec2:uniqueImdsv2TemplateName": true,
    "@aws-cdk/aws-ecs:arnFormatIncludesClusterName": true,
    "@aws-cdk/aws-iam:minimizePolicies": true,
    "@aws-cdk/core:validateSnapshotRemovalPolicy": true,
    "@aws-cdk/aws-codepipeline:crossAccountKeyAliasStackSafeResourceName": true,
    "@aws-cdk/aws-s3:createDefaultLoggingPolicy": true,
    "@aws-cdk/aws-sns-subscriptions:restrictSqsDescryption": true,
    "@aws-cdk/aws-apigateway:disableCloudWatchRole": true,
    "@aws-cdk/core:enablePartitionLiterals": true,
    "@aws-cdk/aws-events:eventsTargetQueueSameAccount": true,
    "@aws-cdk/aws-ecs:disableExplicitDeploymentControllerForCircuitBreaker": true,
    "@aws-cdk/aws-iam:importedRoleStackSafeDefaultPolicyName": true,
    "@aws-cdk/aws-s3:serverAccessLogsUseBucketPolicy": true,
    "@aws-cdk/aws-route53-patters:useCertificate": true,
    "@aws-cdk/customresources:installLatestAwsSdkDefault": false,
    "@aws-cdk/aws-rds:databaseProxyUniqueResourceName": true,
    "@aws-cdk/aws-codedeploy:removeAlarmsFromDeploymentGroup": true,
    "@aws-cdk/aws-apigateway:authorizerChangeDeploymentLogicalId": true,
    "@aws-cdk/aws-ec2:launchTemplateDefaultUserData": true,
    "@aws-cdk/aws-secretsmanager:useAttachedSecretResourcePolicyForSecretTargetAttachments": true,
    "@aws-cdk/aws-redshift:columnId": true,
    "@aws-cdk/aws-stepfunctions-tasks:enableEmrServicePolicyV2": true,
    "@aws-cdk/aws-ec2:restrictDefaultSecurityGroup": true,
    "@aws-cdk/aws-apigateway:requestValidatorUniqueId": true,
    "@aws-cdk/aws-kms:aliasNameRef": true,
    "@aws-cdk/aws-autoscaling:generateLaunchTemplateInsteadOfLaunchConfig": true,
    "@aws-cdk/core:includePrefixInUniqueNameGeneration": true,
    "@aws-cdk/aws-efs:denyAnonymousAccess": true,
    "@aws-cdk/aws-opensearchservice:enableOpensearchMultiAzWithStandby": true,
    "@aws-cdk/aws-lambda-nodejs:useLatestRuntimeVersion": true,
    "@aws-cdk/aws-efs:mountTargetOrderInsensitiveLogicalId": true,
    "@aws-cdk/aws-rds:auroraClusterChangeScopeOfInstanceParameterGroupWithEachParameters": true,
    "@aws-cdk/aws-appsync:useArnForSourceApiAssociationIdentifier": true,
    "@aws-cdk/aws-rds:preventRenderingDeprecatedCredentials": true,
    "@aws-cdk/aws-codepipeline-actions:useNewDefaultBranchForCodeCommitSource": true,
    "@aws-cdk/aws-cloudwatch-actions:changeLambdaPermissionLogicalIdForLambdaAction": true,
    "@aws-cdk/aws-codepipeline:crossAccountKeysDefaultValueToFalse": true,
    "@aws-cdk/aws-codepipeline:defaultPipelineTypeToV2": true,
    "@aws-cdk/aws-kms:reduceCrossAccountRegionPolicyScope": true,
    "@aws-cdk/aws-eks:nodegroupNameAttribute": true,
    "@aws-cdk/aws-ec2:ebsDefaultGp3Volume": true,
    "@aws-cdk/aws-ecs:removeDefaultDeploymentAlarm": true,
    "@aws-cdk/custom-resources:logApiResponseDataPropertyTrueDefault": false
  }
}
",
  "src/main.ts": "import { ApplicationStage } from './stages/application-stage.js';
import { App } from ':proj/common-constructs';

const app = new App();

// Use this to deploy your own sandbox environment (assumes your CLI credentials)
new ApplicationStage(app, 'proj-custom-infra-sandbox', {
  env: {
    account: process.env.CDK_DEFAULT_ACCOUNT,
    region: process.env.CDK_DEFAULT_REGION,
  },
});

app.synth();
",
  "src/stacks/application-stack.ts": "import { Stack, StackProps } from 'aws-cdk-lib';
import { Construct } from 'constructs';

export class ApplicationStack extends Stack {
  constructor(scope: Construct, id: string, props?: StackProps) {
    super(scope, id, props);

    // The code that defines your stack goes here
  }
}
",
  "src/stages/application-stage.ts": "import { Stage, StageProps } from 'aws-cdk-lib';
import { Construct } from 'constructs';
import { ApplicationStack } from '../stacks/application-stack.js';

/**
 * Defines a collection of CDK Stacks which make up your application
 */
export class ApplicationStage extends Stage {
  constructor(scope: Construct, id: string, props?: StageProps) {
    super(scope, id, props);

    new ApplicationStack(this, 'Application', {
      crossRegionReferences: true,
    });
  }
}
",
}
`;

exports[`infra generator > should handle custom project names correctly > custom-name-project-config 1`] = `
{
  "$schema": "../../node_modules/nx/schemas/project-schema.json",
  "metadata": {
    "generator": "ts#infra",
  },
  "name": "@proj/custom-infra",
  "projectType": "application",
  "root": "packages/custom-infra",
  "sourceRoot": "packages/custom-infra/src",
  "tags": [],
  "targets": {
    "bootstrap": {
      "executor": "nx:run-commands",
      "options": {
        "command": "cdk bootstrap",
        "cwd": "packages/custom-infra",
      },
    },
    "build": {
      "dependsOn": [
        "lint",
        "compile",
        "test",
        "synth",
        "checkov",
      ],
    },
    "cdk": {
      "executor": "nx:run-commands",
      "options": {
        "command": "cdk",
        "cwd": "packages/custom-infra",
      },
    },
    "checkov": {
      "cache": true,
      "dependsOn": [
        "synth",
      ],
      "executor": "nx:run-commands",
      "inputs": [
        "{workspaceRoot}/dist/{projectRoot}/cdk.out",
      ],
      "options": {
        "command": "uvx checkov==3.2.469 --config-file packages/custom-infra/checkov.yml --file dist/packages/infra/cdk.out/**/*.template.json",
      },
      "outputs": [
        "{workspaceRoot}/dist/{projectRoot}/checkov",
      ],
    },
    "compile": {
      "executor": "nx:run-commands",
      "options": {
        "command": "tsc --build tsconfig.lib.json",
        "cwd": "{projectRoot}",
      },
      "outputs": [
        "{workspaceRoot}/dist/packages/custom-infra/tsc",
      ],
    },
    "deploy": {
      "executor": "nx:run-commands",
      "options": {
        "command": "cdk deploy --require-approval=never",
        "cwd": "packages/custom-infra",
      },
    },
    "deploy-ci": {
      "executor": "nx:run-commands",
      "options": {
        "command": "cdk deploy --require-approval=never --app ../../dist/packages/custom-infra/cdk.out",
        "cwd": "packages/custom-infra",
      },
    },
    "destroy": {
      "executor": "nx:run-commands",
      "options": {
        "command": "cdk destroy --require-approval=never",
        "cwd": "packages/custom-infra",
      },
    },
    "destroy-ci": {
      "executor": "nx:run-commands",
      "options": {
        "command": "cdk destroy --require-approval=never --app ../../dist/packages/custom-infra/cdk.out",
        "cwd": "packages/custom-infra",
      },
    },
    "synth": {
      "cache": true,
      "dependsOn": [
        "^build",
        "compile",
      ],
      "executor": "nx:run-commands",
      "inputs": [
        "default",
      ],
      "options": {
        "command": "cdk synth",
        "cwd": "packages/custom-infra",
      },
      "outputs": [
        "{workspaceRoot}/dist/packages/custom-infra/cdk.out",
      ],
    },
    "test": {
      "executor": "@nx/vite:test",
      "options": {
        "reportsDirectory": "../../coverage/packages/custom-infra",
      },
      "outputs": [
        "{options.reportsDirectory}",
      ],
    },
  },
}
`;
